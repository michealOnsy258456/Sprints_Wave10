
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000400a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  0000400a  0000409e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010f  00800170  00800170  000041ae  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  000041b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018de  00000000  00000000  00006bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000849a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  000084fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000109d  00000000  00000000  0000857a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000469  00000000  00000000  00009617  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000055b  00000000  00000000  00009a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00009fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016a  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a1e  00000000  00000000  0000a1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <main>
      8a:	0c 94 03 20 	jmp	0x4006	; 0x4006 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__udivdi3>:
     190:	ae e5       	ldi	r26, 0x5E	; 94
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__prologue_saves__>
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	4e 01       	movw	r8, r28
     1a0:	08 94       	sec
     1a2:	81 1c       	adc	r8, r1
     1a4:	91 1c       	adc	r9, r1
     1a6:	f4 01       	movw	r30, r8
     1a8:	6a 2e       	mov	r6, r26
     1aa:	11 92       	st	Z+, r1
     1ac:	6a 94       	dec	r6
     1ae:	e9 f7       	brne	.-6      	; 0x1aa <__udivdi3+0x1a>
     1b0:	29 83       	std	Y+1, r18	; 0x01
     1b2:	3a 83       	std	Y+2, r19	; 0x02
     1b4:	4b 83       	std	Y+3, r20	; 0x03
     1b6:	5c 83       	std	Y+4, r21	; 0x04
     1b8:	6d 83       	std	Y+5, r22	; 0x05
     1ba:	7e 83       	std	Y+6, r23	; 0x06
     1bc:	8f 83       	std	Y+7, r24	; 0x07
     1be:	98 87       	std	Y+8, r25	; 0x08
     1c0:	ce 01       	movw	r24, r28
     1c2:	09 96       	adiw	r24, 0x09	; 9
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 92       	st	Z+, r1
     1c8:	aa 95       	dec	r26
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <__udivdi3+0x36>
     1cc:	a9 86       	std	Y+9, r10	; 0x09
     1ce:	ba 86       	std	Y+10, r11	; 0x0a
     1d0:	cb 86       	std	Y+11, r12	; 0x0b
     1d2:	dc 86       	std	Y+12, r13	; 0x0c
     1d4:	ed 86       	std	Y+13, r14	; 0x0d
     1d6:	fe 86       	std	Y+14, r15	; 0x0e
     1d8:	0f 87       	std	Y+15, r16	; 0x0f
     1da:	18 8b       	std	Y+16, r17	; 0x10
     1dc:	29 84       	ldd	r2, Y+9	; 0x09
     1de:	3a 84       	ldd	r3, Y+10	; 0x0a
     1e0:	4b 84       	ldd	r4, Y+11	; 0x0b
     1e2:	5c 84       	ldd	r5, Y+12	; 0x0c
     1e4:	ed 84       	ldd	r14, Y+13	; 0x0d
     1e6:	fe 84       	ldd	r15, Y+14	; 0x0e
     1e8:	0f 85       	ldd	r16, Y+15	; 0x0f
     1ea:	18 89       	ldd	r17, Y+16	; 0x10
     1ec:	69 80       	ldd	r6, Y+1	; 0x01
     1ee:	7a 80       	ldd	r7, Y+2	; 0x02
     1f0:	8b 80       	ldd	r8, Y+3	; 0x03
     1f2:	9c 80       	ldd	r9, Y+4	; 0x04
     1f4:	6d a6       	std	Y+45, r6	; 0x2d
     1f6:	7e a6       	std	Y+46, r7	; 0x2e
     1f8:	8f a6       	std	Y+47, r8	; 0x2f
     1fa:	98 aa       	std	Y+48, r9	; 0x30
     1fc:	6d 80       	ldd	r6, Y+5	; 0x05
     1fe:	7e 80       	ldd	r7, Y+6	; 0x06
     200:	8f 80       	ldd	r8, Y+7	; 0x07
     202:	98 84       	ldd	r9, Y+8	; 0x08
     204:	e1 14       	cp	r14, r1
     206:	f1 04       	cpc	r15, r1
     208:	01 05       	cpc	r16, r1
     20a:	11 05       	cpc	r17, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <__udivdi3+0x80>
     20e:	b3 c3       	rjmp	.+1894   	; 0x976 <__stack+0x117>
     210:	62 14       	cp	r6, r2
     212:	73 04       	cpc	r7, r3
     214:	84 04       	cpc	r8, r4
     216:	95 04       	cpc	r9, r5
     218:	08 f0       	brcs	.+2      	; 0x21c <__udivdi3+0x8c>
     21a:	3d c1       	rjmp	.+634    	; 0x496 <__udivdi3+0x306>
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	20 16       	cp	r2, r16
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	30 06       	cpc	r3, r16
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	40 06       	cpc	r4, r16
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	50 06       	cpc	r5, r16
     22c:	88 f4       	brcc	.+34     	; 0x250 <__udivdi3+0xc0>
     22e:	1f ef       	ldi	r17, 0xFF	; 255
     230:	21 16       	cp	r2, r17
     232:	31 04       	cpc	r3, r1
     234:	41 04       	cpc	r4, r1
     236:	51 04       	cpc	r5, r1
     238:	39 f0       	breq	.+14     	; 0x248 <__udivdi3+0xb8>
     23a:	30 f0       	brcs	.+12     	; 0x248 <__udivdi3+0xb8>
     23c:	48 e0       	ldi	r20, 0x08	; 8
     23e:	e4 2e       	mov	r14, r20
     240:	f1 2c       	mov	r15, r1
     242:	01 2d       	mov	r16, r1
     244:	11 2d       	mov	r17, r1
     246:	18 c0       	rjmp	.+48     	; 0x278 <__udivdi3+0xe8>
     248:	ee 24       	eor	r14, r14
     24a:	ff 24       	eor	r15, r15
     24c:	87 01       	movw	r16, r14
     24e:	14 c0       	rjmp	.+40     	; 0x278 <__udivdi3+0xe8>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	22 16       	cp	r2, r18
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	32 06       	cpc	r3, r18
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	42 06       	cpc	r4, r18
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	52 06       	cpc	r5, r18
     260:	30 f0       	brcs	.+12     	; 0x26e <__udivdi3+0xde>
     262:	38 e1       	ldi	r19, 0x18	; 24
     264:	e3 2e       	mov	r14, r19
     266:	f1 2c       	mov	r15, r1
     268:	01 2d       	mov	r16, r1
     26a:	11 2d       	mov	r17, r1
     26c:	05 c0       	rjmp	.+10     	; 0x278 <__udivdi3+0xe8>
     26e:	20 e1       	ldi	r18, 0x10	; 16
     270:	e2 2e       	mov	r14, r18
     272:	f1 2c       	mov	r15, r1
     274:	01 2d       	mov	r16, r1
     276:	11 2d       	mov	r17, r1
     278:	d2 01       	movw	r26, r4
     27a:	c1 01       	movw	r24, r2
     27c:	0e 2c       	mov	r0, r14
     27e:	04 c0       	rjmp	.+8      	; 0x288 <__udivdi3+0xf8>
     280:	b6 95       	lsr	r27
     282:	a7 95       	ror	r26
     284:	97 95       	ror	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	d2 f7       	brpl	.-12     	; 0x280 <__udivdi3+0xf0>
     28c:	80 5a       	subi	r24, 0xA0	; 160
     28e:	9f 4f       	sbci	r25, 0xFF	; 255
     290:	dc 01       	movw	r26, r24
     292:	2c 91       	ld	r18, X
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	8e 19       	sub	r24, r14
     29e:	9f 09       	sbc	r25, r15
     2a0:	a0 0b       	sbc	r26, r16
     2a2:	b1 0b       	sbc	r27, r17
     2a4:	7c 01       	movw	r14, r24
     2a6:	8d 01       	movw	r16, r26
     2a8:	e2 1a       	sub	r14, r18
     2aa:	f1 08       	sbc	r15, r1
     2ac:	01 09       	sbc	r16, r1
     2ae:	11 09       	sbc	r17, r1
     2b0:	e1 14       	cp	r14, r1
     2b2:	f1 04       	cpc	r15, r1
     2b4:	01 05       	cpc	r16, r1
     2b6:	11 05       	cpc	r17, r1
     2b8:	a1 f1       	breq	.+104    	; 0x322 <__udivdi3+0x192>
     2ba:	0e 2c       	mov	r0, r14
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__udivdi3+0x136>
     2be:	22 0c       	add	r2, r2
     2c0:	33 1c       	adc	r3, r3
     2c2:	44 1c       	adc	r4, r4
     2c4:	55 1c       	adc	r5, r5
     2c6:	0a 94       	dec	r0
     2c8:	d2 f7       	brpl	.-12     	; 0x2be <__udivdi3+0x12e>
     2ca:	a4 01       	movw	r20, r8
     2cc:	93 01       	movw	r18, r6
     2ce:	0e 2c       	mov	r0, r14
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__udivdi3+0x14a>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	0a 94       	dec	r0
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <__udivdi3+0x142>
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	8e 19       	sub	r24, r14
     2e4:	9f 09       	sbc	r25, r15
     2e6:	6d a4       	ldd	r6, Y+45	; 0x2d
     2e8:	7e a4       	ldd	r7, Y+46	; 0x2e
     2ea:	8f a4       	ldd	r8, Y+47	; 0x2f
     2ec:	98 a8       	ldd	r9, Y+48	; 0x30
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__udivdi3+0x168>
     2f0:	96 94       	lsr	r9
     2f2:	87 94       	ror	r8
     2f4:	77 94       	ror	r7
     2f6:	67 94       	ror	r6
     2f8:	8a 95       	dec	r24
     2fa:	d2 f7       	brpl	.-12     	; 0x2f0 <__udivdi3+0x160>
     2fc:	62 2a       	or	r6, r18
     2fe:	73 2a       	or	r7, r19
     300:	84 2a       	or	r8, r20
     302:	95 2a       	or	r9, r21
     304:	ad a4       	ldd	r10, Y+45	; 0x2d
     306:	be a4       	ldd	r11, Y+46	; 0x2e
     308:	cf a4       	ldd	r12, Y+47	; 0x2f
     30a:	d8 a8       	ldd	r13, Y+48	; 0x30
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__udivdi3+0x186>
     30e:	aa 0c       	add	r10, r10
     310:	bb 1c       	adc	r11, r11
     312:	cc 1c       	adc	r12, r12
     314:	dd 1c       	adc	r13, r13
     316:	ea 94       	dec	r14
     318:	d2 f7       	brpl	.-12     	; 0x30e <__udivdi3+0x17e>
     31a:	ad a6       	std	Y+45, r10	; 0x2d
     31c:	be a6       	std	Y+46, r11	; 0x2e
     31e:	cf a6       	std	Y+47, r12	; 0x2f
     320:	d8 aa       	std	Y+48, r13	; 0x30
     322:	62 01       	movw	r12, r4
     324:	ee 24       	eor	r14, r14
     326:	ff 24       	eor	r15, r15
     328:	cd aa       	std	Y+53, r12	; 0x35
     32a:	de aa       	std	Y+54, r13	; 0x36
     32c:	ef aa       	std	Y+55, r14	; 0x37
     32e:	f8 ae       	std	Y+56, r15	; 0x38
     330:	92 01       	movw	r18, r4
     332:	81 01       	movw	r16, r2
     334:	20 70       	andi	r18, 0x00	; 0
     336:	30 70       	andi	r19, 0x00	; 0
     338:	09 af       	std	Y+57, r16	; 0x39
     33a:	1a af       	std	Y+58, r17	; 0x3a
     33c:	2b af       	std	Y+59, r18	; 0x3b
     33e:	3c af       	std	Y+60, r19	; 0x3c
     340:	c4 01       	movw	r24, r8
     342:	b3 01       	movw	r22, r6
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     34c:	7b 01       	movw	r14, r22
     34e:	8c 01       	movw	r16, r24
     350:	c4 01       	movw	r24, r8
     352:	b3 01       	movw	r22, r6
     354:	2d a9       	ldd	r18, Y+53	; 0x35
     356:	3e a9       	ldd	r19, Y+54	; 0x36
     358:	4f a9       	ldd	r20, Y+55	; 0x37
     35a:	58 ad       	ldd	r21, Y+56	; 0x38
     35c:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     360:	c9 01       	movw	r24, r18
     362:	da 01       	movw	r26, r20
     364:	3c 01       	movw	r6, r24
     366:	4d 01       	movw	r8, r26
     368:	c4 01       	movw	r24, r8
     36a:	b3 01       	movw	r22, r6
     36c:	29 ad       	ldd	r18, Y+57	; 0x39
     36e:	3a ad       	ldd	r19, Y+58	; 0x3a
     370:	4b ad       	ldd	r20, Y+59	; 0x3b
     372:	5c ad       	ldd	r21, Y+60	; 0x3c
     374:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	87 01       	movw	r16, r14
     37e:	ff 24       	eor	r15, r15
     380:	ee 24       	eor	r14, r14
     382:	ad a4       	ldd	r10, Y+45	; 0x2d
     384:	be a4       	ldd	r11, Y+46	; 0x2e
     386:	cf a4       	ldd	r12, Y+47	; 0x2f
     388:	d8 a8       	ldd	r13, Y+48	; 0x30
     38a:	c6 01       	movw	r24, r12
     38c:	aa 27       	eor	r26, r26
     38e:	bb 27       	eor	r27, r27
     390:	57 01       	movw	r10, r14
     392:	68 01       	movw	r12, r16
     394:	a8 2a       	or	r10, r24
     396:	b9 2a       	or	r11, r25
     398:	ca 2a       	or	r12, r26
     39a:	db 2a       	or	r13, r27
     39c:	a2 16       	cp	r10, r18
     39e:	b3 06       	cpc	r11, r19
     3a0:	c4 06       	cpc	r12, r20
     3a2:	d5 06       	cpc	r13, r21
     3a4:	e0 f4       	brcc	.+56     	; 0x3de <__udivdi3+0x24e>
     3a6:	08 94       	sec
     3a8:	61 08       	sbc	r6, r1
     3aa:	71 08       	sbc	r7, r1
     3ac:	81 08       	sbc	r8, r1
     3ae:	91 08       	sbc	r9, r1
     3b0:	a2 0c       	add	r10, r2
     3b2:	b3 1c       	adc	r11, r3
     3b4:	c4 1c       	adc	r12, r4
     3b6:	d5 1c       	adc	r13, r5
     3b8:	a2 14       	cp	r10, r2
     3ba:	b3 04       	cpc	r11, r3
     3bc:	c4 04       	cpc	r12, r4
     3be:	d5 04       	cpc	r13, r5
     3c0:	70 f0       	brcs	.+28     	; 0x3de <__udivdi3+0x24e>
     3c2:	a2 16       	cp	r10, r18
     3c4:	b3 06       	cpc	r11, r19
     3c6:	c4 06       	cpc	r12, r20
     3c8:	d5 06       	cpc	r13, r21
     3ca:	48 f4       	brcc	.+18     	; 0x3de <__udivdi3+0x24e>
     3cc:	08 94       	sec
     3ce:	61 08       	sbc	r6, r1
     3d0:	71 08       	sbc	r7, r1
     3d2:	81 08       	sbc	r8, r1
     3d4:	91 08       	sbc	r9, r1
     3d6:	a2 0c       	add	r10, r2
     3d8:	b3 1c       	adc	r11, r3
     3da:	c4 1c       	adc	r12, r4
     3dc:	d5 1c       	adc	r13, r5
     3de:	a2 1a       	sub	r10, r18
     3e0:	b3 0a       	sbc	r11, r19
     3e2:	c4 0a       	sbc	r12, r20
     3e4:	d5 0a       	sbc	r13, r21
     3e6:	c6 01       	movw	r24, r12
     3e8:	b5 01       	movw	r22, r10
     3ea:	2d a9       	ldd	r18, Y+53	; 0x35
     3ec:	3e a9       	ldd	r19, Y+54	; 0x36
     3ee:	4f a9       	ldd	r20, Y+55	; 0x37
     3f0:	58 ad       	ldd	r21, Y+56	; 0x38
     3f2:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c6 01       	movw	r24, r12
     3fc:	b5 01       	movw	r22, r10
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	5c 01       	movw	r10, r24
     410:	6d 01       	movw	r12, r26
     412:	c6 01       	movw	r24, r12
     414:	b5 01       	movw	r22, r10
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	8d a5       	ldd	r24, Y+45	; 0x2d
     42e:	9e a5       	ldd	r25, Y+46	; 0x2e
     430:	af a5       	ldd	r26, Y+47	; 0x2f
     432:	b8 a9       	ldd	r27, Y+48	; 0x30
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	e8 2a       	or	r14, r24
     43a:	f9 2a       	or	r15, r25
     43c:	0a 2b       	or	r16, r26
     43e:	1b 2b       	or	r17, r27
     440:	e2 16       	cp	r14, r18
     442:	f3 06       	cpc	r15, r19
     444:	04 07       	cpc	r16, r20
     446:	15 07       	cpc	r17, r21
     448:	c0 f4       	brcc	.+48     	; 0x47a <__udivdi3+0x2ea>
     44a:	08 94       	sec
     44c:	a1 08       	sbc	r10, r1
     44e:	b1 08       	sbc	r11, r1
     450:	c1 08       	sbc	r12, r1
     452:	d1 08       	sbc	r13, r1
     454:	e2 0c       	add	r14, r2
     456:	f3 1c       	adc	r15, r3
     458:	04 1d       	adc	r16, r4
     45a:	15 1d       	adc	r17, r5
     45c:	e2 14       	cp	r14, r2
     45e:	f3 04       	cpc	r15, r3
     460:	04 05       	cpc	r16, r4
     462:	15 05       	cpc	r17, r5
     464:	50 f0       	brcs	.+20     	; 0x47a <__udivdi3+0x2ea>
     466:	e2 16       	cp	r14, r18
     468:	f3 06       	cpc	r15, r19
     46a:	04 07       	cpc	r16, r20
     46c:	15 07       	cpc	r17, r21
     46e:	28 f4       	brcc	.+10     	; 0x47a <__udivdi3+0x2ea>
     470:	08 94       	sec
     472:	a1 08       	sbc	r10, r1
     474:	b1 08       	sbc	r11, r1
     476:	c1 08       	sbc	r12, r1
     478:	d1 08       	sbc	r13, r1
     47a:	d3 01       	movw	r26, r6
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	86 01       	movw	r16, r12
     482:	75 01       	movw	r14, r10
     484:	e8 2a       	or	r14, r24
     486:	f9 2a       	or	r15, r25
     488:	0a 2b       	or	r16, r26
     48a:	1b 2b       	or	r17, r27
     48c:	e9 aa       	std	Y+49, r14	; 0x31
     48e:	fa aa       	std	Y+50, r15	; 0x32
     490:	0b ab       	std	Y+51, r16	; 0x33
     492:	1c ab       	std	Y+52, r17	; 0x34
     494:	cf c4       	rjmp	.+2462   	; 0xe34 <__stack+0x5d5>
     496:	21 14       	cp	r2, r1
     498:	31 04       	cpc	r3, r1
     49a:	41 04       	cpc	r4, r1
     49c:	51 04       	cpc	r5, r1
     49e:	71 f4       	brne	.+28     	; 0x4bc <__udivdi3+0x32c>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	1c 01       	movw	r2, r24
     4ba:	2d 01       	movw	r4, r26
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	20 16       	cp	r2, r16
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	30 06       	cpc	r3, r16
     4c4:	01 e0       	ldi	r16, 0x01	; 1
     4c6:	40 06       	cpc	r4, r16
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	50 06       	cpc	r5, r16
     4cc:	88 f4       	brcc	.+34     	; 0x4f0 <__udivdi3+0x360>
     4ce:	1f ef       	ldi	r17, 0xFF	; 255
     4d0:	21 16       	cp	r2, r17
     4d2:	31 04       	cpc	r3, r1
     4d4:	41 04       	cpc	r4, r1
     4d6:	51 04       	cpc	r5, r1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <__udivdi3+0x356>
     4da:	28 f0       	brcs	.+10     	; 0x4e6 <__udivdi3+0x356>
     4dc:	48 e0       	ldi	r20, 0x08	; 8
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__udivdi3+0x384>
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <__udivdi3+0x384>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	22 16       	cp	r2, r18
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	32 06       	cpc	r3, r18
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	42 06       	cpc	r4, r18
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	52 06       	cpc	r5, r18
     500:	28 f0       	brcs	.+10     	; 0x50c <__udivdi3+0x37c>
     502:	48 e1       	ldi	r20, 0x18	; 24
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x384>
     50c:	40 e1       	ldi	r20, 0x10	; 16
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	d2 01       	movw	r26, r4
     516:	c1 01       	movw	r24, r2
     518:	04 2e       	mov	r0, r20
     51a:	04 c0       	rjmp	.+8      	; 0x524 <__udivdi3+0x394>
     51c:	b6 95       	lsr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	0a 94       	dec	r0
     526:	d2 f7       	brpl	.-12     	; 0x51c <__udivdi3+0x38c>
     528:	80 5a       	subi	r24, 0xA0	; 160
     52a:	9f 4f       	sbci	r25, 0xFF	; 255
     52c:	dc 01       	movw	r26, r24
     52e:	2c 91       	ld	r18, X
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	ee 2e       	mov	r14, r30
     534:	f1 2c       	mov	r15, r1
     536:	01 2d       	mov	r16, r1
     538:	11 2d       	mov	r17, r1
     53a:	d8 01       	movw	r26, r16
     53c:	c7 01       	movw	r24, r14
     53e:	84 1b       	sub	r24, r20
     540:	95 0b       	sbc	r25, r21
     542:	a6 0b       	sbc	r26, r22
     544:	b7 0b       	sbc	r27, r23
     546:	82 1b       	sub	r24, r18
     548:	91 09       	sbc	r25, r1
     54a:	a1 09       	sbc	r26, r1
     54c:	b1 09       	sbc	r27, r1
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a1 05       	cpc	r26, r1
     552:	b1 05       	cpc	r27, r1
     554:	61 f4       	brne	.+24     	; 0x56e <__udivdi3+0x3de>
     556:	64 01       	movw	r12, r8
     558:	53 01       	movw	r10, r6
     55a:	a2 18       	sub	r10, r2
     55c:	b3 08       	sbc	r11, r3
     55e:	c4 08       	sbc	r12, r4
     560:	d5 08       	sbc	r13, r5
     562:	31 e0       	ldi	r19, 0x01	; 1
     564:	63 2e       	mov	r6, r19
     566:	71 2c       	mov	r7, r1
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	1e c1       	rjmp	.+572    	; 0x7aa <__udivdi3+0x61a>
     56e:	6f 96       	adiw	r28, 0x1f	; 31
     570:	8f af       	std	Y+63, r24	; 0x3f
     572:	6f 97       	sbiw	r28, 0x1f	; 31
     574:	08 2e       	mov	r0, r24
     576:	04 c0       	rjmp	.+8      	; 0x580 <__udivdi3+0x3f0>
     578:	22 0c       	add	r2, r2
     57a:	33 1c       	adc	r3, r3
     57c:	44 1c       	adc	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	0a 94       	dec	r0
     582:	d2 f7       	brpl	.-12     	; 0x578 <__udivdi3+0x3e8>
     584:	ee 2d       	mov	r30, r14
     586:	e8 1b       	sub	r30, r24
     588:	64 01       	movw	r12, r8
     58a:	53 01       	movw	r10, r6
     58c:	0e 2e       	mov	r0, r30
     58e:	04 c0       	rjmp	.+8      	; 0x598 <__udivdi3+0x408>
     590:	d6 94       	lsr	r13
     592:	c7 94       	ror	r12
     594:	b7 94       	ror	r11
     596:	a7 94       	ror	r10
     598:	0a 94       	dec	r0
     59a:	d2 f7       	brpl	.-12     	; 0x590 <__udivdi3+0x400>
     59c:	a4 01       	movw	r20, r8
     59e:	93 01       	movw	r18, r6
     5a0:	6f 96       	adiw	r28, 0x1f	; 31
     5a2:	0f ac       	ldd	r0, Y+63	; 0x3f
     5a4:	6f 97       	sbiw	r28, 0x1f	; 31
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__udivdi3+0x420>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	0a 94       	dec	r0
     5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <__udivdi3+0x418>
     5b4:	6d a4       	ldd	r6, Y+45	; 0x2d
     5b6:	7e a4       	ldd	r7, Y+46	; 0x2e
     5b8:	8f a4       	ldd	r8, Y+47	; 0x2f
     5ba:	98 a8       	ldd	r9, Y+48	; 0x30
     5bc:	0e 2e       	mov	r0, r30
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__udivdi3+0x438>
     5c0:	96 94       	lsr	r9
     5c2:	87 94       	ror	r8
     5c4:	77 94       	ror	r7
     5c6:	67 94       	ror	r6
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__udivdi3+0x430>
     5cc:	84 01       	movw	r16, r8
     5ce:	73 01       	movw	r14, r6
     5d0:	e2 2a       	or	r14, r18
     5d2:	f3 2a       	or	r15, r19
     5d4:	04 2b       	or	r16, r20
     5d6:	15 2b       	or	r17, r21
     5d8:	e9 a6       	std	Y+41, r14	; 0x29
     5da:	fa a6       	std	Y+42, r15	; 0x2a
     5dc:	0b a7       	std	Y+43, r16	; 0x2b
     5de:	1c a7       	std	Y+44, r17	; 0x2c
     5e0:	32 01       	movw	r6, r4
     5e2:	88 24       	eor	r8, r8
     5e4:	99 24       	eor	r9, r9
     5e6:	92 01       	movw	r18, r4
     5e8:	81 01       	movw	r16, r2
     5ea:	20 70       	andi	r18, 0x00	; 0
     5ec:	30 70       	andi	r19, 0x00	; 0
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	0c af       	std	Y+60, r16	; 0x3c
     5f2:	1d af       	std	Y+61, r17	; 0x3d
     5f4:	2e af       	std	Y+62, r18	; 0x3e
     5f6:	3f af       	std	Y+63, r19	; 0x3f
     5f8:	21 97       	sbiw	r28, 0x01	; 1
     5fa:	c6 01       	movw	r24, r12
     5fc:	b5 01       	movw	r22, r10
     5fe:	a4 01       	movw	r20, r8
     600:	93 01       	movw	r18, r6
     602:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     606:	7b 01       	movw	r14, r22
     608:	8c 01       	movw	r16, r24
     60a:	c6 01       	movw	r24, r12
     60c:	b5 01       	movw	r22, r10
     60e:	a4 01       	movw	r20, r8
     610:	93 01       	movw	r18, r6
     612:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     616:	c9 01       	movw	r24, r18
     618:	da 01       	movw	r26, r20
     61a:	25 96       	adiw	r28, 0x05	; 5
     61c:	8c af       	std	Y+60, r24	; 0x3c
     61e:	9d af       	std	Y+61, r25	; 0x3d
     620:	ae af       	std	Y+62, r26	; 0x3e
     622:	bf af       	std	Y+63, r27	; 0x3f
     624:	25 97       	sbiw	r28, 0x05	; 5
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	21 96       	adiw	r28, 0x01	; 1
     62c:	2c ad       	ldd	r18, Y+60	; 0x3c
     62e:	3d ad       	ldd	r19, Y+61	; 0x3d
     630:	4e ad       	ldd	r20, Y+62	; 0x3e
     632:	5f ad       	ldd	r21, Y+63	; 0x3f
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	87 01       	movw	r16, r14
     640:	ff 24       	eor	r15, r15
     642:	ee 24       	eor	r14, r14
     644:	a9 a4       	ldd	r10, Y+41	; 0x29
     646:	ba a4       	ldd	r11, Y+42	; 0x2a
     648:	cb a4       	ldd	r12, Y+43	; 0x2b
     64a:	dc a4       	ldd	r13, Y+44	; 0x2c
     64c:	c6 01       	movw	r24, r12
     64e:	aa 27       	eor	r26, r26
     650:	bb 27       	eor	r27, r27
     652:	5c 01       	movw	r10, r24
     654:	6d 01       	movw	r12, r26
     656:	ae 28       	or	r10, r14
     658:	bf 28       	or	r11, r15
     65a:	c0 2a       	or	r12, r16
     65c:	d1 2a       	or	r13, r17
     65e:	a2 16       	cp	r10, r18
     660:	b3 06       	cpc	r11, r19
     662:	c4 06       	cpc	r12, r20
     664:	d5 06       	cpc	r13, r21
     666:	60 f5       	brcc	.+88     	; 0x6c0 <__udivdi3+0x530>
     668:	25 96       	adiw	r28, 0x05	; 5
     66a:	6c ad       	ldd	r22, Y+60	; 0x3c
     66c:	7d ad       	ldd	r23, Y+61	; 0x3d
     66e:	8e ad       	ldd	r24, Y+62	; 0x3e
     670:	9f ad       	ldd	r25, Y+63	; 0x3f
     672:	25 97       	sbiw	r28, 0x05	; 5
     674:	61 50       	subi	r22, 0x01	; 1
     676:	70 40       	sbci	r23, 0x00	; 0
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	25 96       	adiw	r28, 0x05	; 5
     67e:	6c af       	std	Y+60, r22	; 0x3c
     680:	7d af       	std	Y+61, r23	; 0x3d
     682:	8e af       	std	Y+62, r24	; 0x3e
     684:	9f af       	std	Y+63, r25	; 0x3f
     686:	25 97       	sbiw	r28, 0x05	; 5
     688:	a2 0c       	add	r10, r2
     68a:	b3 1c       	adc	r11, r3
     68c:	c4 1c       	adc	r12, r4
     68e:	d5 1c       	adc	r13, r5
     690:	a2 14       	cp	r10, r2
     692:	b3 04       	cpc	r11, r3
     694:	c4 04       	cpc	r12, r4
     696:	d5 04       	cpc	r13, r5
     698:	98 f0       	brcs	.+38     	; 0x6c0 <__udivdi3+0x530>
     69a:	a2 16       	cp	r10, r18
     69c:	b3 06       	cpc	r11, r19
     69e:	c4 06       	cpc	r12, r20
     6a0:	d5 06       	cpc	r13, r21
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <__udivdi3+0x530>
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	25 96       	adiw	r28, 0x05	; 5
     6ae:	6c af       	std	Y+60, r22	; 0x3c
     6b0:	7d af       	std	Y+61, r23	; 0x3d
     6b2:	8e af       	std	Y+62, r24	; 0x3e
     6b4:	9f af       	std	Y+63, r25	; 0x3f
     6b6:	25 97       	sbiw	r28, 0x05	; 5
     6b8:	a2 0c       	add	r10, r2
     6ba:	b3 1c       	adc	r11, r3
     6bc:	c4 1c       	adc	r12, r4
     6be:	d5 1c       	adc	r13, r5
     6c0:	a2 1a       	sub	r10, r18
     6c2:	b3 0a       	sbc	r11, r19
     6c4:	c4 0a       	sbc	r12, r20
     6c6:	d5 0a       	sbc	r13, r21
     6c8:	c6 01       	movw	r24, r12
     6ca:	b5 01       	movw	r22, r10
     6cc:	a4 01       	movw	r20, r8
     6ce:	93 01       	movw	r18, r6
     6d0:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     6d4:	7b 01       	movw	r14, r22
     6d6:	8c 01       	movw	r16, r24
     6d8:	c6 01       	movw	r24, r12
     6da:	b5 01       	movw	r22, r10
     6dc:	a4 01       	movw	r20, r8
     6de:	93 01       	movw	r18, r6
     6e0:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     6e4:	c9 01       	movw	r24, r18
     6e6:	da 01       	movw	r26, r20
     6e8:	3c 01       	movw	r6, r24
     6ea:	4d 01       	movw	r8, r26
     6ec:	c4 01       	movw	r24, r8
     6ee:	b3 01       	movw	r22, r6
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	2c ad       	ldd	r18, Y+60	; 0x3c
     6f4:	3d ad       	ldd	r19, Y+61	; 0x3d
     6f6:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f8:	5f ad       	ldd	r21, Y+63	; 0x3f
     6fa:	21 97       	sbiw	r28, 0x01	; 1
     6fc:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	87 01       	movw	r16, r14
     706:	ff 24       	eor	r15, r15
     708:	ee 24       	eor	r14, r14
     70a:	89 a5       	ldd	r24, Y+41	; 0x29
     70c:	9a a5       	ldd	r25, Y+42	; 0x2a
     70e:	ab a5       	ldd	r26, Y+43	; 0x2b
     710:	bc a5       	ldd	r27, Y+44	; 0x2c
     712:	a0 70       	andi	r26, 0x00	; 0
     714:	b0 70       	andi	r27, 0x00	; 0
     716:	57 01       	movw	r10, r14
     718:	68 01       	movw	r12, r16
     71a:	a8 2a       	or	r10, r24
     71c:	b9 2a       	or	r11, r25
     71e:	ca 2a       	or	r12, r26
     720:	db 2a       	or	r13, r27
     722:	a2 16       	cp	r10, r18
     724:	b3 06       	cpc	r11, r19
     726:	c4 06       	cpc	r12, r20
     728:	d5 06       	cpc	r13, r21
     72a:	e0 f4       	brcc	.+56     	; 0x764 <__udivdi3+0x5d4>
     72c:	08 94       	sec
     72e:	61 08       	sbc	r6, r1
     730:	71 08       	sbc	r7, r1
     732:	81 08       	sbc	r8, r1
     734:	91 08       	sbc	r9, r1
     736:	a2 0c       	add	r10, r2
     738:	b3 1c       	adc	r11, r3
     73a:	c4 1c       	adc	r12, r4
     73c:	d5 1c       	adc	r13, r5
     73e:	a2 14       	cp	r10, r2
     740:	b3 04       	cpc	r11, r3
     742:	c4 04       	cpc	r12, r4
     744:	d5 04       	cpc	r13, r5
     746:	70 f0       	brcs	.+28     	; 0x764 <__udivdi3+0x5d4>
     748:	a2 16       	cp	r10, r18
     74a:	b3 06       	cpc	r11, r19
     74c:	c4 06       	cpc	r12, r20
     74e:	d5 06       	cpc	r13, r21
     750:	48 f4       	brcc	.+18     	; 0x764 <__udivdi3+0x5d4>
     752:	08 94       	sec
     754:	61 08       	sbc	r6, r1
     756:	71 08       	sbc	r7, r1
     758:	81 08       	sbc	r8, r1
     75a:	91 08       	sbc	r9, r1
     75c:	a2 0c       	add	r10, r2
     75e:	b3 1c       	adc	r11, r3
     760:	c4 1c       	adc	r12, r4
     762:	d5 1c       	adc	r13, r5
     764:	8d a5       	ldd	r24, Y+45	; 0x2d
     766:	9e a5       	ldd	r25, Y+46	; 0x2e
     768:	af a5       	ldd	r26, Y+47	; 0x2f
     76a:	b8 a9       	ldd	r27, Y+48	; 0x30
     76c:	6f 96       	adiw	r28, 0x1f	; 31
     76e:	0f ac       	ldd	r0, Y+63	; 0x3f
     770:	6f 97       	sbiw	r28, 0x1f	; 31
     772:	04 c0       	rjmp	.+8      	; 0x77c <__udivdi3+0x5ec>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	aa 1f       	adc	r26, r26
     77a:	bb 1f       	adc	r27, r27
     77c:	0a 94       	dec	r0
     77e:	d2 f7       	brpl	.-12     	; 0x774 <__udivdi3+0x5e4>
     780:	8d a7       	std	Y+45, r24	; 0x2d
     782:	9e a7       	std	Y+46, r25	; 0x2e
     784:	af a7       	std	Y+47, r26	; 0x2f
     786:	b8 ab       	std	Y+48, r27	; 0x30
     788:	a2 1a       	sub	r10, r18
     78a:	b3 0a       	sbc	r11, r19
     78c:	c4 0a       	sbc	r12, r20
     78e:	d5 0a       	sbc	r13, r21
     790:	25 96       	adiw	r28, 0x05	; 5
     792:	ec ac       	ldd	r14, Y+60	; 0x3c
     794:	fd ac       	ldd	r15, Y+61	; 0x3d
     796:	0e ad       	ldd	r16, Y+62	; 0x3e
     798:	1f ad       	ldd	r17, Y+63	; 0x3f
     79a:	25 97       	sbiw	r28, 0x05	; 5
     79c:	d7 01       	movw	r26, r14
     79e:	99 27       	eor	r25, r25
     7a0:	88 27       	eor	r24, r24
     7a2:	68 2a       	or	r6, r24
     7a4:	79 2a       	or	r7, r25
     7a6:	8a 2a       	or	r8, r26
     7a8:	9b 2a       	or	r9, r27
     7aa:	82 01       	movw	r16, r4
     7ac:	22 27       	eor	r18, r18
     7ae:	33 27       	eor	r19, r19
     7b0:	29 96       	adiw	r28, 0x09	; 9
     7b2:	0c af       	std	Y+60, r16	; 0x3c
     7b4:	1d af       	std	Y+61, r17	; 0x3d
     7b6:	2e af       	std	Y+62, r18	; 0x3e
     7b8:	3f af       	std	Y+63, r19	; 0x3f
     7ba:	29 97       	sbiw	r28, 0x09	; 9
     7bc:	a2 01       	movw	r20, r4
     7be:	91 01       	movw	r18, r2
     7c0:	40 70       	andi	r20, 0x00	; 0
     7c2:	50 70       	andi	r21, 0x00	; 0
     7c4:	2d 96       	adiw	r28, 0x0d	; 13
     7c6:	2c af       	std	Y+60, r18	; 0x3c
     7c8:	3d af       	std	Y+61, r19	; 0x3d
     7ca:	4e af       	std	Y+62, r20	; 0x3e
     7cc:	5f af       	std	Y+63, r21	; 0x3f
     7ce:	2d 97       	sbiw	r28, 0x0d	; 13
     7d0:	c6 01       	movw	r24, r12
     7d2:	b5 01       	movw	r22, r10
     7d4:	29 96       	adiw	r28, 0x09	; 9
     7d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     7da:	4e ad       	ldd	r20, Y+62	; 0x3e
     7dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     7de:	29 97       	sbiw	r28, 0x09	; 9
     7e0:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     7e4:	7b 01       	movw	r14, r22
     7e6:	8c 01       	movw	r16, r24
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	29 96       	adiw	r28, 0x09	; 9
     7ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     7f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     7f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f6:	29 97       	sbiw	r28, 0x09	; 9
     7f8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     7fc:	c9 01       	movw	r24, r18
     7fe:	da 01       	movw	r26, r20
     800:	61 96       	adiw	r28, 0x11	; 17
     802:	8c af       	std	Y+60, r24	; 0x3c
     804:	9d af       	std	Y+61, r25	; 0x3d
     806:	ae af       	std	Y+62, r26	; 0x3e
     808:	bf af       	std	Y+63, r27	; 0x3f
     80a:	61 97       	sbiw	r28, 0x11	; 17
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	2d 96       	adiw	r28, 0x0d	; 13
     812:	2c ad       	ldd	r18, Y+60	; 0x3c
     814:	3d ad       	ldd	r19, Y+61	; 0x3d
     816:	4e ad       	ldd	r20, Y+62	; 0x3e
     818:	5f ad       	ldd	r21, Y+63	; 0x3f
     81a:	2d 97       	sbiw	r28, 0x0d	; 13
     81c:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	87 01       	movw	r16, r14
     826:	ff 24       	eor	r15, r15
     828:	ee 24       	eor	r14, r14
     82a:	ad a4       	ldd	r10, Y+45	; 0x2d
     82c:	be a4       	ldd	r11, Y+46	; 0x2e
     82e:	cf a4       	ldd	r12, Y+47	; 0x2f
     830:	d8 a8       	ldd	r13, Y+48	; 0x30
     832:	c6 01       	movw	r24, r12
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	a8 2a       	or	r10, r24
     83e:	b9 2a       	or	r11, r25
     840:	ca 2a       	or	r12, r26
     842:	db 2a       	or	r13, r27
     844:	a2 16       	cp	r10, r18
     846:	b3 06       	cpc	r11, r19
     848:	c4 06       	cpc	r12, r20
     84a:	d5 06       	cpc	r13, r21
     84c:	60 f5       	brcc	.+88     	; 0x8a6 <__stack+0x47>
     84e:	61 96       	adiw	r28, 0x11	; 17
     850:	6c ad       	ldd	r22, Y+60	; 0x3c
     852:	7d ad       	ldd	r23, Y+61	; 0x3d
     854:	8e ad       	ldd	r24, Y+62	; 0x3e
     856:	9f ad       	ldd	r25, Y+63	; 0x3f
     858:	61 97       	sbiw	r28, 0x11	; 17
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	61 96       	adiw	r28, 0x11	; 17
     864:	6c af       	std	Y+60, r22	; 0x3c
     866:	7d af       	std	Y+61, r23	; 0x3d
     868:	8e af       	std	Y+62, r24	; 0x3e
     86a:	9f af       	std	Y+63, r25	; 0x3f
     86c:	61 97       	sbiw	r28, 0x11	; 17
     86e:	a2 0c       	add	r10, r2
     870:	b3 1c       	adc	r11, r3
     872:	c4 1c       	adc	r12, r4
     874:	d5 1c       	adc	r13, r5
     876:	a2 14       	cp	r10, r2
     878:	b3 04       	cpc	r11, r3
     87a:	c4 04       	cpc	r12, r4
     87c:	d5 04       	cpc	r13, r5
     87e:	98 f0       	brcs	.+38     	; 0x8a6 <__stack+0x47>
     880:	a2 16       	cp	r10, r18
     882:	b3 06       	cpc	r11, r19
     884:	c4 06       	cpc	r12, r20
     886:	d5 06       	cpc	r13, r21
     888:	70 f4       	brcc	.+28     	; 0x8a6 <__stack+0x47>
     88a:	61 50       	subi	r22, 0x01	; 1
     88c:	70 40       	sbci	r23, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	61 96       	adiw	r28, 0x11	; 17
     894:	6c af       	std	Y+60, r22	; 0x3c
     896:	7d af       	std	Y+61, r23	; 0x3d
     898:	8e af       	std	Y+62, r24	; 0x3e
     89a:	9f af       	std	Y+63, r25	; 0x3f
     89c:	61 97       	sbiw	r28, 0x11	; 17
     89e:	a2 0c       	add	r10, r2
     8a0:	b3 1c       	adc	r11, r3
     8a2:	c4 1c       	adc	r12, r4
     8a4:	d5 1c       	adc	r13, r5
     8a6:	a2 1a       	sub	r10, r18
     8a8:	b3 0a       	sbc	r11, r19
     8aa:	c4 0a       	sbc	r12, r20
     8ac:	d5 0a       	sbc	r13, r21
     8ae:	c6 01       	movw	r24, r12
     8b0:	b5 01       	movw	r22, r10
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     8bc:	29 97       	sbiw	r28, 0x09	; 9
     8be:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	29 96       	adiw	r28, 0x09	; 9
     8cc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ce:	3d ad       	ldd	r19, Y+61	; 0x3d
     8d0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8d2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8d4:	29 97       	sbiw	r28, 0x09	; 9
     8d6:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     8da:	c9 01       	movw	r24, r18
     8dc:	da 01       	movw	r26, r20
     8de:	5c 01       	movw	r10, r24
     8e0:	6d 01       	movw	r12, r26
     8e2:	c6 01       	movw	r24, r12
     8e4:	b5 01       	movw	r22, r10
     8e6:	2d 96       	adiw	r28, 0x0d	; 13
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	2d 97       	sbiw	r28, 0x0d	; 13
     8f2:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	8d a5       	ldd	r24, Y+45	; 0x2d
     902:	9e a5       	ldd	r25, Y+46	; 0x2e
     904:	af a5       	ldd	r26, Y+47	; 0x2f
     906:	b8 a9       	ldd	r27, Y+48	; 0x30
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	e8 2a       	or	r14, r24
     90e:	f9 2a       	or	r15, r25
     910:	0a 2b       	or	r16, r26
     912:	1b 2b       	or	r17, r27
     914:	e2 16       	cp	r14, r18
     916:	f3 06       	cpc	r15, r19
     918:	04 07       	cpc	r16, r20
     91a:	15 07       	cpc	r17, r21
     91c:	c0 f4       	brcc	.+48     	; 0x94e <__stack+0xef>
     91e:	08 94       	sec
     920:	a1 08       	sbc	r10, r1
     922:	b1 08       	sbc	r11, r1
     924:	c1 08       	sbc	r12, r1
     926:	d1 08       	sbc	r13, r1
     928:	e2 0c       	add	r14, r2
     92a:	f3 1c       	adc	r15, r3
     92c:	04 1d       	adc	r16, r4
     92e:	15 1d       	adc	r17, r5
     930:	e2 14       	cp	r14, r2
     932:	f3 04       	cpc	r15, r3
     934:	04 05       	cpc	r16, r4
     936:	15 05       	cpc	r17, r5
     938:	50 f0       	brcs	.+20     	; 0x94e <__stack+0xef>
     93a:	e2 16       	cp	r14, r18
     93c:	f3 06       	cpc	r15, r19
     93e:	04 07       	cpc	r16, r20
     940:	15 07       	cpc	r17, r21
     942:	28 f4       	brcc	.+10     	; 0x94e <__stack+0xef>
     944:	08 94       	sec
     946:	a1 08       	sbc	r10, r1
     948:	b1 08       	sbc	r11, r1
     94a:	c1 08       	sbc	r12, r1
     94c:	d1 08       	sbc	r13, r1
     94e:	61 96       	adiw	r28, 0x11	; 17
     950:	ec ac       	ldd	r14, Y+60	; 0x3c
     952:	fd ac       	ldd	r15, Y+61	; 0x3d
     954:	0e ad       	ldd	r16, Y+62	; 0x3e
     956:	1f ad       	ldd	r17, Y+63	; 0x3f
     958:	61 97       	sbiw	r28, 0x11	; 17
     95a:	d7 01       	movw	r26, r14
     95c:	99 27       	eor	r25, r25
     95e:	88 27       	eor	r24, r24
     960:	96 01       	movw	r18, r12
     962:	85 01       	movw	r16, r10
     964:	08 2b       	or	r16, r24
     966:	19 2b       	or	r17, r25
     968:	2a 2b       	or	r18, r26
     96a:	3b 2b       	or	r19, r27
     96c:	09 ab       	std	Y+49, r16	; 0x31
     96e:	1a ab       	std	Y+50, r17	; 0x32
     970:	2b ab       	std	Y+51, r18	; 0x33
     972:	3c ab       	std	Y+52, r19	; 0x34
     974:	62 c2       	rjmp	.+1220   	; 0xe3a <__stack+0x5db>
     976:	6e 14       	cp	r6, r14
     978:	7f 04       	cpc	r7, r15
     97a:	80 06       	cpc	r8, r16
     97c:	91 06       	cpc	r9, r17
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	51 c2       	rjmp	.+1186   	; 0xe24 <__stack+0x5c5>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	e2 16       	cp	r14, r18
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f2 06       	cpc	r15, r18
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	02 07       	cpc	r16, r18
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	12 07       	cpc	r17, r18
     992:	88 f4       	brcc	.+34     	; 0x9b6 <__stack+0x157>
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	e3 16       	cp	r14, r19
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	31 f0       	breq	.+12     	; 0x9ac <__stack+0x14d>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	17 c0       	rjmp	.+46     	; 0x9da <__stack+0x17b>
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__stack+0x17b>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	e4 16       	cp	r14, r20
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	f4 06       	cpc	r15, r20
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	04 07       	cpc	r16, r20
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	14 07       	cpc	r17, r20
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__stack+0x173>
     9c8:	48 e1       	ldi	r20, 0x18	; 24
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0x17b>
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	04 2e       	mov	r0, r20
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0x18b>
     9e2:	b6 95       	lsr	r27
     9e4:	a7 95       	ror	r26
     9e6:	97 95       	ror	r25
     9e8:	87 95       	ror	r24
     9ea:	0a 94       	dec	r0
     9ec:	d2 f7       	brpl	.-12     	; 0x9e2 <__stack+0x183>
     9ee:	80 5a       	subi	r24, 0xA0	; 160
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	dc 01       	movw	r26, r24
     9f4:	2c 91       	ld	r18, X
     9f6:	30 e2       	ldi	r19, 0x20	; 32
     9f8:	a3 2e       	mov	r10, r19
     9fa:	b1 2c       	mov	r11, r1
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	d6 01       	movw	r26, r12
     a02:	c5 01       	movw	r24, r10
     a04:	84 1b       	sub	r24, r20
     a06:	95 0b       	sbc	r25, r21
     a08:	a6 0b       	sbc	r26, r22
     a0a:	b7 0b       	sbc	r27, r23
     a0c:	82 1b       	sub	r24, r18
     a0e:	91 09       	sbc	r25, r1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	89 f4       	brne	.+34     	; 0xa3e <__stack+0x1df>
     a1c:	e6 14       	cp	r14, r6
     a1e:	f7 04       	cpc	r15, r7
     a20:	08 05       	cpc	r16, r8
     a22:	19 05       	cpc	r17, r9
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x1c9>
     a26:	f2 c1       	rjmp	.+996    	; 0xe0c <__stack+0x5ad>
     a28:	6d a4       	ldd	r6, Y+45	; 0x2d
     a2a:	7e a4       	ldd	r7, Y+46	; 0x2e
     a2c:	8f a4       	ldd	r8, Y+47	; 0x2f
     a2e:	98 a8       	ldd	r9, Y+48	; 0x30
     a30:	62 14       	cp	r6, r2
     a32:	73 04       	cpc	r7, r3
     a34:	84 04       	cpc	r8, r4
     a36:	95 04       	cpc	r9, r5
     a38:	08 f0       	brcs	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	e8 c1       	rjmp	.+976    	; 0xe0c <__stack+0x5ad>
     a3c:	f3 c1       	rjmp	.+998    	; 0xe24 <__stack+0x5c5>
     a3e:	6e 96       	adiw	r28, 0x1e	; 30
     a40:	8f af       	std	Y+63, r24	; 0x3f
     a42:	6e 97       	sbiw	r28, 0x1e	; 30
     a44:	08 2e       	mov	r0, r24
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x1f1>
     a48:	ee 0c       	add	r14, r14
     a4a:	ff 1c       	adc	r15, r15
     a4c:	00 1f       	adc	r16, r16
     a4e:	11 1f       	adc	r17, r17
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__stack+0x1e9>
     a54:	6a 2d       	mov	r22, r10
     a56:	68 1b       	sub	r22, r24
     a58:	d2 01       	movw	r26, r4
     a5a:	c1 01       	movw	r24, r2
     a5c:	06 2e       	mov	r0, r22
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x209>
     a60:	b6 95       	lsr	r27
     a62:	a7 95       	ror	r26
     a64:	97 95       	ror	r25
     a66:	87 95       	ror	r24
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__stack+0x201>
     a6c:	5c 01       	movw	r10, r24
     a6e:	6d 01       	movw	r12, r26
     a70:	ae 28       	or	r10, r14
     a72:	bf 28       	or	r11, r15
     a74:	c0 2a       	or	r12, r16
     a76:	d1 2a       	or	r13, r17
     a78:	ad a2       	std	Y+37, r10	; 0x25
     a7a:	be a2       	std	Y+38, r11	; 0x26
     a7c:	cf a2       	std	Y+39, r12	; 0x27
     a7e:	d8 a6       	std	Y+40, r13	; 0x28
     a80:	72 01       	movw	r14, r4
     a82:	61 01       	movw	r12, r2
     a84:	6e 96       	adiw	r28, 0x1e	; 30
     a86:	0f ac       	ldd	r0, Y+63	; 0x3f
     a88:	6e 97       	sbiw	r28, 0x1e	; 30
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x235>
     a8c:	cc 0c       	add	r12, r12
     a8e:	dd 1c       	adc	r13, r13
     a90:	ee 1c       	adc	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x22d>
     a98:	c9 a2       	std	Y+33, r12	; 0x21
     a9a:	da a2       	std	Y+34, r13	; 0x22
     a9c:	eb a2       	std	Y+35, r14	; 0x23
     a9e:	fc a2       	std	Y+36, r15	; 0x24
     aa0:	64 01       	movw	r12, r8
     aa2:	53 01       	movw	r10, r6
     aa4:	06 2e       	mov	r0, r22
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__stack+0x251>
     aa8:	d6 94       	lsr	r13
     aaa:	c7 94       	ror	r12
     aac:	b7 94       	ror	r11
     aae:	a7 94       	ror	r10
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__stack+0x249>
     ab4:	d4 01       	movw	r26, r8
     ab6:	c3 01       	movw	r24, r6
     ab8:	6e 96       	adiw	r28, 0x1e	; 30
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6e 97       	sbiw	r28, 0x1e	; 30
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	ed a4       	ldd	r14, Y+45	; 0x2d
     ace:	fe a4       	ldd	r15, Y+46	; 0x2e
     ad0:	0f a5       	ldd	r16, Y+47	; 0x2f
     ad2:	18 a9       	ldd	r17, Y+48	; 0x30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x27f>
     ad6:	16 95       	lsr	r17
     ad8:	07 95       	ror	r16
     ada:	f7 94       	ror	r15
     adc:	e7 94       	ror	r14
     ade:	6a 95       	dec	r22
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__stack+0x277>
     ae2:	37 01       	movw	r6, r14
     ae4:	48 01       	movw	r8, r16
     ae6:	68 2a       	or	r6, r24
     ae8:	79 2a       	or	r7, r25
     aea:	8a 2a       	or	r8, r26
     aec:	9b 2a       	or	r9, r27
     aee:	6d 8e       	std	Y+29, r6	; 0x1d
     af0:	7e 8e       	std	Y+30, r7	; 0x1e
     af2:	8f 8e       	std	Y+31, r8	; 0x1f
     af4:	98 a2       	std	Y+32, r9	; 0x20
     af6:	ed a0       	ldd	r14, Y+37	; 0x25
     af8:	fe a0       	ldd	r15, Y+38	; 0x26
     afa:	0f a1       	ldd	r16, Y+39	; 0x27
     afc:	18 a5       	ldd	r17, Y+40	; 0x28
     afe:	38 01       	movw	r6, r16
     b00:	88 24       	eor	r8, r8
     b02:	99 24       	eor	r9, r9
     b04:	98 01       	movw	r18, r16
     b06:	87 01       	movw	r16, r14
     b08:	20 70       	andi	r18, 0x00	; 0
     b0a:	30 70       	andi	r19, 0x00	; 0
     b0c:	65 96       	adiw	r28, 0x15	; 21
     b0e:	0c af       	std	Y+60, r16	; 0x3c
     b10:	1d af       	std	Y+61, r17	; 0x3d
     b12:	2e af       	std	Y+62, r18	; 0x3e
     b14:	3f af       	std	Y+63, r19	; 0x3f
     b16:	65 97       	sbiw	r28, 0x15	; 21
     b18:	c6 01       	movw	r24, r12
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	93 01       	movw	r18, r6
     b20:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     b24:	7b 01       	movw	r14, r22
     b26:	8c 01       	movw	r16, r24
     b28:	c6 01       	movw	r24, r12
     b2a:	b5 01       	movw	r22, r10
     b2c:	a4 01       	movw	r20, r8
     b2e:	93 01       	movw	r18, r6
     b30:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     b34:	c9 01       	movw	r24, r18
     b36:	da 01       	movw	r26, r20
     b38:	1c 01       	movw	r2, r24
     b3a:	2d 01       	movw	r4, r26
     b3c:	c2 01       	movw	r24, r4
     b3e:	b1 01       	movw	r22, r2
     b40:	65 96       	adiw	r28, 0x15	; 21
     b42:	2c ad       	ldd	r18, Y+60	; 0x3c
     b44:	3d ad       	ldd	r19, Y+61	; 0x3d
     b46:	4e ad       	ldd	r20, Y+62	; 0x3e
     b48:	5f ad       	ldd	r21, Y+63	; 0x3f
     b4a:	65 97       	sbiw	r28, 0x15	; 21
     b4c:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	87 01       	movw	r16, r14
     b56:	ff 24       	eor	r15, r15
     b58:	ee 24       	eor	r14, r14
     b5a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     b5c:	be 8c       	ldd	r11, Y+30	; 0x1e
     b5e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     b60:	d8 a0       	ldd	r13, Y+32	; 0x20
     b62:	c6 01       	movw	r24, r12
     b64:	aa 27       	eor	r26, r26
     b66:	bb 27       	eor	r27, r27
     b68:	57 01       	movw	r10, r14
     b6a:	68 01       	movw	r12, r16
     b6c:	a8 2a       	or	r10, r24
     b6e:	b9 2a       	or	r11, r25
     b70:	ca 2a       	or	r12, r26
     b72:	db 2a       	or	r13, r27
     b74:	a2 16       	cp	r10, r18
     b76:	b3 06       	cpc	r11, r19
     b78:	c4 06       	cpc	r12, r20
     b7a:	d5 06       	cpc	r13, r21
     b7c:	00 f5       	brcc	.+64     	; 0xbbe <__stack+0x35f>
     b7e:	08 94       	sec
     b80:	21 08       	sbc	r2, r1
     b82:	31 08       	sbc	r3, r1
     b84:	41 08       	sbc	r4, r1
     b86:	51 08       	sbc	r5, r1
     b88:	ed a0       	ldd	r14, Y+37	; 0x25
     b8a:	fe a0       	ldd	r15, Y+38	; 0x26
     b8c:	0f a1       	ldd	r16, Y+39	; 0x27
     b8e:	18 a5       	ldd	r17, Y+40	; 0x28
     b90:	ae 0c       	add	r10, r14
     b92:	bf 1c       	adc	r11, r15
     b94:	c0 1e       	adc	r12, r16
     b96:	d1 1e       	adc	r13, r17
     b98:	ae 14       	cp	r10, r14
     b9a:	bf 04       	cpc	r11, r15
     b9c:	c0 06       	cpc	r12, r16
     b9e:	d1 06       	cpc	r13, r17
     ba0:	70 f0       	brcs	.+28     	; 0xbbe <__stack+0x35f>
     ba2:	a2 16       	cp	r10, r18
     ba4:	b3 06       	cpc	r11, r19
     ba6:	c4 06       	cpc	r12, r20
     ba8:	d5 06       	cpc	r13, r21
     baa:	48 f4       	brcc	.+18     	; 0xbbe <__stack+0x35f>
     bac:	08 94       	sec
     bae:	21 08       	sbc	r2, r1
     bb0:	31 08       	sbc	r3, r1
     bb2:	41 08       	sbc	r4, r1
     bb4:	51 08       	sbc	r5, r1
     bb6:	ae 0c       	add	r10, r14
     bb8:	bf 1c       	adc	r11, r15
     bba:	c0 1e       	adc	r12, r16
     bbc:	d1 1e       	adc	r13, r17
     bbe:	a2 1a       	sub	r10, r18
     bc0:	b3 0a       	sbc	r11, r19
     bc2:	c4 0a       	sbc	r12, r20
     bc4:	d5 0a       	sbc	r13, r21
     bc6:	c6 01       	movw	r24, r12
     bc8:	b5 01       	movw	r22, r10
     bca:	a4 01       	movw	r20, r8
     bcc:	93 01       	movw	r18, r6
     bce:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	a4 01       	movw	r20, r8
     bdc:	93 01       	movw	r18, r6
     bde:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
     be2:	c9 01       	movw	r24, r18
     be4:	da 01       	movw	r26, r20
     be6:	3c 01       	movw	r6, r24
     be8:	4d 01       	movw	r8, r26
     bea:	c4 01       	movw	r24, r8
     bec:	b3 01       	movw	r22, r6
     bee:	65 96       	adiw	r28, 0x15	; 21
     bf0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf8:	65 97       	sbiw	r28, 0x15	; 21
     bfa:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	87 01       	movw	r16, r14
     c04:	ff 24       	eor	r15, r15
     c06:	ee 24       	eor	r14, r14
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c0c:	af 8d       	ldd	r26, Y+31	; 0x1f
     c0e:	b8 a1       	ldd	r27, Y+32	; 0x20
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	a8 2a       	or	r10, r24
     c1a:	b9 2a       	or	r11, r25
     c1c:	ca 2a       	or	r12, r26
     c1e:	db 2a       	or	r13, r27
     c20:	a2 16       	cp	r10, r18
     c22:	b3 06       	cpc	r11, r19
     c24:	c4 06       	cpc	r12, r20
     c26:	d5 06       	cpc	r13, r21
     c28:	00 f5       	brcc	.+64     	; 0xc6a <__stack+0x40b>
     c2a:	08 94       	sec
     c2c:	61 08       	sbc	r6, r1
     c2e:	71 08       	sbc	r7, r1
     c30:	81 08       	sbc	r8, r1
     c32:	91 08       	sbc	r9, r1
     c34:	6d a1       	ldd	r22, Y+37	; 0x25
     c36:	7e a1       	ldd	r23, Y+38	; 0x26
     c38:	8f a1       	ldd	r24, Y+39	; 0x27
     c3a:	98 a5       	ldd	r25, Y+40	; 0x28
     c3c:	a6 0e       	add	r10, r22
     c3e:	b7 1e       	adc	r11, r23
     c40:	c8 1e       	adc	r12, r24
     c42:	d9 1e       	adc	r13, r25
     c44:	a6 16       	cp	r10, r22
     c46:	b7 06       	cpc	r11, r23
     c48:	c8 06       	cpc	r12, r24
     c4a:	d9 06       	cpc	r13, r25
     c4c:	70 f0       	brcs	.+28     	; 0xc6a <__stack+0x40b>
     c4e:	a2 16       	cp	r10, r18
     c50:	b3 06       	cpc	r11, r19
     c52:	c4 06       	cpc	r12, r20
     c54:	d5 06       	cpc	r13, r21
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__stack+0x40b>
     c58:	08 94       	sec
     c5a:	61 08       	sbc	r6, r1
     c5c:	71 08       	sbc	r7, r1
     c5e:	81 08       	sbc	r8, r1
     c60:	91 08       	sbc	r9, r1
     c62:	a6 0e       	add	r10, r22
     c64:	b7 1e       	adc	r11, r23
     c66:	c8 1e       	adc	r12, r24
     c68:	d9 1e       	adc	r13, r25
     c6a:	d6 01       	movw	r26, r12
     c6c:	c5 01       	movw	r24, r10
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	a4 0b       	sbc	r26, r20
     c74:	b5 0b       	sbc	r27, r21
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	ab 8f       	std	Y+27, r26	; 0x1b
     c7c:	bc 8f       	std	Y+28, r27	; 0x1c
     c7e:	d1 01       	movw	r26, r2
     c80:	99 27       	eor	r25, r25
     c82:	88 27       	eor	r24, r24
     c84:	64 01       	movw	r12, r8
     c86:	53 01       	movw	r10, r6
     c88:	a8 2a       	or	r10, r24
     c8a:	b9 2a       	or	r11, r25
     c8c:	ca 2a       	or	r12, r26
     c8e:	db 2a       	or	r13, r27
     c90:	a9 aa       	std	Y+49, r10	; 0x31
     c92:	ba aa       	std	Y+50, r11	; 0x32
     c94:	cb aa       	std	Y+51, r12	; 0x33
     c96:	dc aa       	std	Y+52, r13	; 0x34
     c98:	86 01       	movw	r16, r12
     c9a:	75 01       	movw	r14, r10
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	e2 22       	and	r14, r18
     ca6:	f3 22       	and	r15, r19
     ca8:	04 23       	and	r16, r20
     caa:	15 23       	and	r17, r21
     cac:	a6 01       	movw	r20, r12
     cae:	66 27       	eor	r22, r22
     cb0:	77 27       	eor	r23, r23
     cb2:	6d 96       	adiw	r28, 0x1d	; 29
     cb4:	4c af       	std	Y+60, r20	; 0x3c
     cb6:	5d af       	std	Y+61, r21	; 0x3d
     cb8:	6e af       	std	Y+62, r22	; 0x3e
     cba:	7f af       	std	Y+63, r23	; 0x3f
     cbc:	6d 97       	sbiw	r28, 0x1d	; 29
     cbe:	a9 a0       	ldd	r10, Y+33	; 0x21
     cc0:	ba a0       	ldd	r11, Y+34	; 0x22
     cc2:	cb a0       	ldd	r12, Y+35	; 0x23
     cc4:	dc a0       	ldd	r13, Y+36	; 0x24
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a6 22       	and	r10, r22
     cd0:	b7 22       	and	r11, r23
     cd2:	c8 22       	and	r12, r24
     cd4:	d9 22       	and	r13, r25
     cd6:	89 a1       	ldd	r24, Y+33	; 0x21
     cd8:	9a a1       	ldd	r25, Y+34	; 0x22
     cda:	ab a1       	ldd	r26, Y+35	; 0x23
     cdc:	bc a1       	ldd	r27, Y+36	; 0x24
     cde:	1d 01       	movw	r2, r26
     ce0:	44 24       	eor	r4, r4
     ce2:	55 24       	eor	r5, r5
     ce4:	c8 01       	movw	r24, r16
     ce6:	b7 01       	movw	r22, r14
     ce8:	a6 01       	movw	r20, r12
     cea:	95 01       	movw	r18, r10
     cec:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     cf0:	69 96       	adiw	r28, 0x19	; 25
     cf2:	6c af       	std	Y+60, r22	; 0x3c
     cf4:	7d af       	std	Y+61, r23	; 0x3d
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	69 97       	sbiw	r28, 0x19	; 25
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	a2 01       	movw	r20, r4
     d02:	91 01       	movw	r18, r2
     d04:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     d08:	3b 01       	movw	r6, r22
     d0a:	4c 01       	movw	r8, r24
     d0c:	6d 96       	adiw	r28, 0x1d	; 29
     d0e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d10:	7d ad       	ldd	r23, Y+61	; 0x3d
     d12:	8e ad       	ldd	r24, Y+62	; 0x3e
     d14:	9f ad       	ldd	r25, Y+63	; 0x3f
     d16:	6d 97       	sbiw	r28, 0x1d	; 29
     d18:	a6 01       	movw	r20, r12
     d1a:	95 01       	movw	r18, r10
     d1c:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     d20:	7b 01       	movw	r14, r22
     d22:	8c 01       	movw	r16, r24
     d24:	6d 96       	adiw	r28, 0x1d	; 29
     d26:	6c ad       	ldd	r22, Y+60	; 0x3c
     d28:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2e:	6d 97       	sbiw	r28, 0x1d	; 29
     d30:	a2 01       	movw	r20, r4
     d32:	91 01       	movw	r18, r2
     d34:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
     d38:	5b 01       	movw	r10, r22
     d3a:	6c 01       	movw	r12, r24
     d3c:	a8 01       	movw	r20, r16
     d3e:	97 01       	movw	r18, r14
     d40:	26 0d       	add	r18, r6
     d42:	37 1d       	adc	r19, r7
     d44:	48 1d       	adc	r20, r8
     d46:	59 1d       	adc	r21, r9
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c ac       	ldd	r6, Y+60	; 0x3c
     d4c:	7d ac       	ldd	r7, Y+61	; 0x3d
     d4e:	8e ac       	ldd	r8, Y+62	; 0x3e
     d50:	9f ac       	ldd	r9, Y+63	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c4 01       	movw	r24, r8
     d56:	aa 27       	eor	r26, r26
     d58:	bb 27       	eor	r27, r27
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	4a 1f       	adc	r20, r26
     d60:	5b 1f       	adc	r21, r27
     d62:	2e 15       	cp	r18, r14
     d64:	3f 05       	cpc	r19, r15
     d66:	40 07       	cpc	r20, r16
     d68:	51 07       	cpc	r21, r17
     d6a:	48 f4       	brcc	.+18     	; 0xd7e <__stack+0x51f>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	06 2f       	mov	r16, r22
     d74:	11 2d       	mov	r17, r1
     d76:	ae 0c       	add	r10, r14
     d78:	bf 1c       	adc	r11, r15
     d7a:	c0 1e       	adc	r12, r16
     d7c:	d1 1e       	adc	r13, r17
     d7e:	ca 01       	movw	r24, r20
     d80:	aa 27       	eor	r26, r26
     d82:	bb 27       	eor	r27, r27
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	6a 0d       	add	r22, r10
     d8a:	7b 1d       	adc	r23, r11
     d8c:	8c 1d       	adc	r24, r12
     d8e:	9d 1d       	adc	r25, r13
     d90:	69 8c       	ldd	r6, Y+25	; 0x19
     d92:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d94:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d96:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d98:	66 16       	cp	r6, r22
     d9a:	77 06       	cpc	r7, r23
     d9c:	88 06       	cpc	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	40 f1       	brcs	.+80     	; 0xdf2 <__stack+0x593>
     da2:	66 15       	cp	r22, r6
     da4:	77 05       	cpc	r23, r7
     da6:	88 05       	cpc	r24, r8
     da8:	99 05       	cpc	r25, r9
     daa:	09 f0       	breq	.+2      	; 0xdae <__stack+0x54f>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__stack+0x5d5>
     dae:	d9 01       	movw	r26, r18
     db0:	99 27       	eor	r25, r25
     db2:	88 27       	eor	r24, r24
     db4:	69 96       	adiw	r28, 0x19	; 25
     db6:	2c ad       	ldd	r18, Y+60	; 0x3c
     db8:	3d ad       	ldd	r19, Y+61	; 0x3d
     dba:	4e ad       	ldd	r20, Y+62	; 0x3e
     dbc:	5f ad       	ldd	r21, Y+63	; 0x3f
     dbe:	69 97       	sbiw	r28, 0x19	; 25
     dc0:	40 70       	andi	r20, 0x00	; 0
     dc2:	50 70       	andi	r21, 0x00	; 0
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	a4 1f       	adc	r26, r20
     dca:	b5 1f       	adc	r27, r21
     dcc:	2d a5       	ldd	r18, Y+45	; 0x2d
     dce:	3e a5       	ldd	r19, Y+46	; 0x2e
     dd0:	4f a5       	ldd	r20, Y+47	; 0x2f
     dd2:	58 a9       	ldd	r21, Y+48	; 0x30
     dd4:	6e 96       	adiw	r28, 0x1e	; 30
     dd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd8:	6e 97       	sbiw	r28, 0x1e	; 30
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__stack+0x585>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	0a 94       	dec	r0
     de6:	d2 f7       	brpl	.-12     	; 0xddc <__stack+0x57d>
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	4a 07       	cpc	r20, r26
     dee:	5b 07       	cpc	r21, r27
     df0:	08 f5       	brcc	.+66     	; 0xe34 <__stack+0x5d5>
     df2:	09 a9       	ldd	r16, Y+49	; 0x31
     df4:	1a a9       	ldd	r17, Y+50	; 0x32
     df6:	2b a9       	ldd	r18, Y+51	; 0x33
     df8:	3c a9       	ldd	r19, Y+52	; 0x34
     dfa:	01 50       	subi	r16, 0x01	; 1
     dfc:	10 40       	sbci	r17, 0x00	; 0
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	09 ab       	std	Y+49, r16	; 0x31
     e04:	1a ab       	std	Y+50, r17	; 0x32
     e06:	2b ab       	std	Y+51, r18	; 0x33
     e08:	3c ab       	std	Y+52, r19	; 0x34
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <__stack+0x5d5>
     e0c:	66 24       	eor	r6, r6
     e0e:	77 24       	eor	r7, r7
     e10:	43 01       	movw	r8, r6
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	29 ab       	std	Y+49, r18	; 0x31
     e1c:	3a ab       	std	Y+50, r19	; 0x32
     e1e:	4b ab       	std	Y+51, r20	; 0x33
     e20:	5c ab       	std	Y+52, r21	; 0x34
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <__stack+0x5db>
     e24:	66 24       	eor	r6, r6
     e26:	77 24       	eor	r7, r7
     e28:	43 01       	movw	r8, r6
     e2a:	19 aa       	std	Y+49, r1	; 0x31
     e2c:	1a aa       	std	Y+50, r1	; 0x32
     e2e:	1b aa       	std	Y+51, r1	; 0x33
     e30:	1c aa       	std	Y+52, r1	; 0x34
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__stack+0x5db>
     e34:	66 24       	eor	r6, r6
     e36:	77 24       	eor	r7, r7
     e38:	43 01       	movw	r8, r6
     e3a:	fe 01       	movw	r30, r28
     e3c:	71 96       	adiw	r30, 0x11	; 17
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	df 01       	movw	r26, r30
     e42:	1d 92       	st	X+, r1
     e44:	8a 95       	dec	r24
     e46:	e9 f7       	brne	.-6      	; 0xe42 <__stack+0x5e3>
     e48:	a9 a8       	ldd	r10, Y+49	; 0x31
     e4a:	ba a8       	ldd	r11, Y+50	; 0x32
     e4c:	cb a8       	ldd	r12, Y+51	; 0x33
     e4e:	dc a8       	ldd	r13, Y+52	; 0x34
     e50:	a9 8a       	std	Y+17, r10	; 0x11
     e52:	ba 8a       	std	Y+18, r11	; 0x12
     e54:	cb 8a       	std	Y+19, r12	; 0x13
     e56:	dc 8a       	std	Y+20, r13	; 0x14
     e58:	6d 8a       	std	Y+21, r6	; 0x15
     e5a:	7e 8a       	std	Y+22, r7	; 0x16
     e5c:	8f 8a       	std	Y+23, r8	; 0x17
     e5e:	98 8e       	std	Y+24, r9	; 0x18
     e60:	29 a9       	ldd	r18, Y+49	; 0x31
     e62:	3a 89       	ldd	r19, Y+18	; 0x12
     e64:	4b 89       	ldd	r20, Y+19	; 0x13
     e66:	5c 89       	ldd	r21, Y+20	; 0x14
     e68:	66 2d       	mov	r22, r6
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	c2 5a       	subi	r28, 0xA2	; 162
     e72:	df 4f       	sbci	r29, 0xFF	; 255
     e74:	e2 e1       	ldi	r30, 0x12	; 18
     e76:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__epilogue_restores__>

00000e7a <__umoddi3>:
     e7a:	ab e5       	ldi	r26, 0x5B	; 91
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e4       	ldi	r30, 0x43	; 67
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__prologue_saves__>
     e86:	a8 e0       	ldi	r26, 0x08	; 8
     e88:	4e 01       	movw	r8, r28
     e8a:	08 94       	sec
     e8c:	81 1c       	adc	r8, r1
     e8e:	91 1c       	adc	r9, r1
     e90:	f4 01       	movw	r30, r8
     e92:	6a 2e       	mov	r6, r26
     e94:	11 92       	st	Z+, r1
     e96:	6a 94       	dec	r6
     e98:	e9 f7       	brne	.-6      	; 0xe94 <__umoddi3+0x1a>
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	3a 83       	std	Y+2, r19	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	6d 83       	std	Y+5, r22	; 0x05
     ea4:	7e 83       	std	Y+6, r23	; 0x06
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	ce 01       	movw	r24, r28
     eac:	09 96       	adiw	r24, 0x09	; 9
     eae:	fc 01       	movw	r30, r24
     eb0:	11 92       	st	Z+, r1
     eb2:	aa 95       	dec	r26
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <__umoddi3+0x36>
     eb6:	a9 86       	std	Y+9, r10	; 0x09
     eb8:	ba 86       	std	Y+10, r11	; 0x0a
     eba:	cb 86       	std	Y+11, r12	; 0x0b
     ebc:	dc 86       	std	Y+12, r13	; 0x0c
     ebe:	ed 86       	std	Y+13, r14	; 0x0d
     ec0:	fe 86       	std	Y+14, r15	; 0x0e
     ec2:	0f 87       	std	Y+15, r16	; 0x0f
     ec4:	18 8b       	std	Y+16, r17	; 0x10
     ec6:	29 84       	ldd	r2, Y+9	; 0x09
     ec8:	3a 84       	ldd	r3, Y+10	; 0x0a
     eca:	4b 84       	ldd	r4, Y+11	; 0x0b
     ecc:	5c 84       	ldd	r5, Y+12	; 0x0c
     ece:	ad 84       	ldd	r10, Y+13	; 0x0d
     ed0:	be 84       	ldd	r11, Y+14	; 0x0e
     ed2:	cf 84       	ldd	r12, Y+15	; 0x0f
     ed4:	d8 88       	ldd	r13, Y+16	; 0x10
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	3a 81       	ldd	r19, Y+2	; 0x02
     eda:	4b 81       	ldd	r20, Y+3	; 0x03
     edc:	5c 81       	ldd	r21, Y+4	; 0x04
     ede:	69 96       	adiw	r28, 0x19	; 25
     ee0:	2f af       	std	Y+63, r18	; 0x3f
     ee2:	69 97       	sbiw	r28, 0x19	; 25
     ee4:	6a 96       	adiw	r28, 0x1a	; 26
     ee6:	3f af       	std	Y+63, r19	; 0x3f
     ee8:	6a 97       	sbiw	r28, 0x1a	; 26
     eea:	6b 96       	adiw	r28, 0x1b	; 27
     eec:	4f af       	std	Y+63, r20	; 0x3f
     eee:	6b 97       	sbiw	r28, 0x1b	; 27
     ef0:	6c 96       	adiw	r28, 0x1c	; 28
     ef2:	5f af       	std	Y+63, r21	; 0x3f
     ef4:	6c 97       	sbiw	r28, 0x1c	; 28
     ef6:	6c 96       	adiw	r28, 0x1c	; 28
     ef8:	6c ac       	ldd	r6, Y+60	; 0x3c
     efa:	7d ac       	ldd	r7, Y+61	; 0x3d
     efc:	8e ac       	ldd	r8, Y+62	; 0x3e
     efe:	9f ac       	ldd	r9, Y+63	; 0x3f
     f00:	6c 97       	sbiw	r28, 0x1c	; 28
     f02:	69 aa       	std	Y+49, r6	; 0x31
     f04:	7a aa       	std	Y+50, r7	; 0x32
     f06:	8b aa       	std	Y+51, r8	; 0x33
     f08:	9c aa       	std	Y+52, r9	; 0x34
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	3b 01       	movw	r6, r22
     f14:	4c 01       	movw	r8, r24
     f16:	6d aa       	std	Y+53, r6	; 0x35
     f18:	7e aa       	std	Y+54, r7	; 0x36
     f1a:	8f aa       	std	Y+55, r8	; 0x37
     f1c:	98 ae       	std	Y+56, r9	; 0x38
     f1e:	a1 14       	cp	r10, r1
     f20:	b1 04       	cpc	r11, r1
     f22:	c1 04       	cpc	r12, r1
     f24:	d1 04       	cpc	r13, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <__umoddi3+0xb0>
     f28:	04 c3       	rjmp	.+1544   	; 0x1532 <__umoddi3+0x6b8>
     f2a:	62 14       	cp	r6, r2
     f2c:	73 04       	cpc	r7, r3
     f2e:	84 04       	cpc	r8, r4
     f30:	95 04       	cpc	r9, r5
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__umoddi3+0xbc>
     f34:	00 c1       	rjmp	.+512    	; 0x1136 <__umoddi3+0x2bc>
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	20 16       	cp	r2, r16
     f3a:	00 e0       	ldi	r16, 0x00	; 0
     f3c:	30 06       	cpc	r3, r16
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	40 06       	cpc	r4, r16
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	50 06       	cpc	r5, r16
     f46:	88 f4       	brcc	.+34     	; 0xf6a <__umoddi3+0xf0>
     f48:	1f ef       	ldi	r17, 0xFF	; 255
     f4a:	21 16       	cp	r2, r17
     f4c:	31 04       	cpc	r3, r1
     f4e:	41 04       	cpc	r4, r1
     f50:	51 04       	cpc	r5, r1
     f52:	39 f0       	breq	.+14     	; 0xf62 <__umoddi3+0xe8>
     f54:	30 f0       	brcs	.+12     	; 0xf62 <__umoddi3+0xe8>
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	e8 2e       	mov	r14, r24
     f5a:	f1 2c       	mov	r15, r1
     f5c:	01 2d       	mov	r16, r1
     f5e:	11 2d       	mov	r17, r1
     f60:	18 c0       	rjmp	.+48     	; 0xf92 <__umoddi3+0x118>
     f62:	ee 24       	eor	r14, r14
     f64:	ff 24       	eor	r15, r15
     f66:	87 01       	movw	r16, r14
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__umoddi3+0x118>
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	24 16       	cp	r2, r20
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	34 06       	cpc	r3, r20
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	44 06       	cpc	r4, r20
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	54 06       	cpc	r5, r20
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__umoddi3+0x10e>
     f7c:	b8 e1       	ldi	r27, 0x18	; 24
     f7e:	eb 2e       	mov	r14, r27
     f80:	f1 2c       	mov	r15, r1
     f82:	01 2d       	mov	r16, r1
     f84:	11 2d       	mov	r17, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__umoddi3+0x118>
     f88:	a0 e1       	ldi	r26, 0x10	; 16
     f8a:	ea 2e       	mov	r14, r26
     f8c:	f1 2c       	mov	r15, r1
     f8e:	01 2d       	mov	r16, r1
     f90:	11 2d       	mov	r17, r1
     f92:	d2 01       	movw	r26, r4
     f94:	c1 01       	movw	r24, r2
     f96:	0e 2c       	mov	r0, r14
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__umoddi3+0x128>
     f9a:	b6 95       	lsr	r27
     f9c:	a7 95       	ror	r26
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <__umoddi3+0x120>
     fa6:	80 5a       	subi	r24, 0xA0	; 160
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	dc 01       	movw	r26, r24
     fac:	2c 91       	ld	r18, X
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	8e 19       	sub	r24, r14
     fb8:	9f 09       	sbc	r25, r15
     fba:	a0 0b       	sbc	r26, r16
     fbc:	b1 0b       	sbc	r27, r17
     fbe:	5c 01       	movw	r10, r24
     fc0:	6d 01       	movw	r12, r26
     fc2:	a2 1a       	sub	r10, r18
     fc4:	b1 08       	sbc	r11, r1
     fc6:	c1 08       	sbc	r12, r1
     fc8:	d1 08       	sbc	r13, r1
     fca:	a9 ae       	std	Y+57, r10	; 0x39
     fcc:	ba ae       	std	Y+58, r11	; 0x3a
     fce:	cb ae       	std	Y+59, r12	; 0x3b
     fd0:	dc ae       	std	Y+60, r13	; 0x3c
     fd2:	a1 14       	cp	r10, r1
     fd4:	b1 04       	cpc	r11, r1
     fd6:	c1 04       	cpc	r12, r1
     fd8:	d1 04       	cpc	r13, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <__umoddi3+0x164>
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <__umoddi3+0x1e2>
     fde:	69 ad       	ldd	r22, Y+57	; 0x39
     fe0:	06 2e       	mov	r0, r22
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__umoddi3+0x172>
     fe4:	22 0c       	add	r2, r2
     fe6:	33 1c       	adc	r3, r3
     fe8:	44 1c       	adc	r4, r4
     fea:	55 1c       	adc	r5, r5
     fec:	0a 94       	dec	r0
     fee:	d2 f7       	brpl	.-12     	; 0xfe4 <__umoddi3+0x16a>
     ff0:	a4 01       	movw	r20, r8
     ff2:	93 01       	movw	r18, r6
     ff4:	06 2e       	mov	r0, r22
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__umoddi3+0x186>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	0a 94       	dec	r0
    1002:	d2 f7       	brpl	.-12     	; 0xff8 <__umoddi3+0x17e>
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	8a 19       	sub	r24, r10
    100a:	9b 09       	sbc	r25, r11
    100c:	6c 96       	adiw	r28, 0x1c	; 28
    100e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1010:	dd ac       	ldd	r13, Y+61	; 0x3d
    1012:	ee ac       	ldd	r14, Y+62	; 0x3e
    1014:	ff ac       	ldd	r15, Y+63	; 0x3f
    1016:	6c 97       	sbiw	r28, 0x1c	; 28
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__umoddi3+0x1a8>
    101a:	f6 94       	lsr	r15
    101c:	e7 94       	ror	r14
    101e:	d7 94       	ror	r13
    1020:	c7 94       	ror	r12
    1022:	8a 95       	dec	r24
    1024:	d2 f7       	brpl	.-12     	; 0x101a <__umoddi3+0x1a0>
    1026:	87 01       	movw	r16, r14
    1028:	76 01       	movw	r14, r12
    102a:	e2 2a       	or	r14, r18
    102c:	f3 2a       	or	r15, r19
    102e:	04 2b       	or	r16, r20
    1030:	15 2b       	or	r17, r21
    1032:	ed aa       	std	Y+53, r14	; 0x35
    1034:	fe aa       	std	Y+54, r15	; 0x36
    1036:	0f ab       	std	Y+55, r16	; 0x37
    1038:	18 af       	std	Y+56, r17	; 0x38
    103a:	6c 96       	adiw	r28, 0x1c	; 28
    103c:	8c ad       	ldd	r24, Y+60	; 0x3c
    103e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1040:	ae ad       	ldd	r26, Y+62	; 0x3e
    1042:	bf ad       	ldd	r27, Y+63	; 0x3f
    1044:	6c 97       	sbiw	r28, 0x1c	; 28
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__umoddi3+0x1d6>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	6a 95       	dec	r22
    1052:	d2 f7       	brpl	.-12     	; 0x1048 <__umoddi3+0x1ce>
    1054:	89 ab       	std	Y+49, r24	; 0x31
    1056:	9a ab       	std	Y+50, r25	; 0x32
    1058:	ab ab       	std	Y+51, r26	; 0x33
    105a:	bc ab       	std	Y+52, r27	; 0x34
    105c:	32 01       	movw	r6, r4
    105e:	88 24       	eor	r8, r8
    1060:	99 24       	eor	r9, r9
    1062:	b2 01       	movw	r22, r4
    1064:	a1 01       	movw	r20, r2
    1066:	60 70       	andi	r22, 0x00	; 0
    1068:	70 70       	andi	r23, 0x00	; 0
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	4c af       	std	Y+60, r20	; 0x3c
    106e:	5d af       	std	Y+61, r21	; 0x3d
    1070:	6e af       	std	Y+62, r22	; 0x3e
    1072:	7f af       	std	Y+63, r23	; 0x3f
    1074:	21 97       	sbiw	r28, 0x01	; 1
    1076:	6d a9       	ldd	r22, Y+53	; 0x35
    1078:	7e a9       	ldd	r23, Y+54	; 0x36
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	a4 01       	movw	r20, r8
    1080:	93 01       	movw	r18, r6
    1082:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	a4 01       	movw	r20, r8
    1094:	93 01       	movw	r18, r6
    1096:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    109a:	ca 01       	movw	r24, r20
    109c:	b9 01       	movw	r22, r18
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10a8:	21 97       	sbiw	r28, 0x01	; 1
    10aa:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	87 01       	movw	r16, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	ee 24       	eor	r14, r14
    10b8:	a9 a8       	ldd	r10, Y+49	; 0x31
    10ba:	ba a8       	ldd	r11, Y+50	; 0x32
    10bc:	cb a8       	ldd	r12, Y+51	; 0x33
    10be:	dc a8       	ldd	r13, Y+52	; 0x34
    10c0:	c6 01       	movw	r24, r12
    10c2:	aa 27       	eor	r26, r26
    10c4:	bb 27       	eor	r27, r27
    10c6:	57 01       	movw	r10, r14
    10c8:	68 01       	movw	r12, r16
    10ca:	a8 2a       	or	r10, r24
    10cc:	b9 2a       	or	r11, r25
    10ce:	ca 2a       	or	r12, r26
    10d0:	db 2a       	or	r13, r27
    10d2:	a2 16       	cp	r10, r18
    10d4:	b3 06       	cpc	r11, r19
    10d6:	c4 06       	cpc	r12, r20
    10d8:	d5 06       	cpc	r13, r21
    10da:	90 f4       	brcc	.+36     	; 0x1100 <__umoddi3+0x286>
    10dc:	a2 0c       	add	r10, r2
    10de:	b3 1c       	adc	r11, r3
    10e0:	c4 1c       	adc	r12, r4
    10e2:	d5 1c       	adc	r13, r5
    10e4:	a2 14       	cp	r10, r2
    10e6:	b3 04       	cpc	r11, r3
    10e8:	c4 04       	cpc	r12, r4
    10ea:	d5 04       	cpc	r13, r5
    10ec:	48 f0       	brcs	.+18     	; 0x1100 <__umoddi3+0x286>
    10ee:	a2 16       	cp	r10, r18
    10f0:	b3 06       	cpc	r11, r19
    10f2:	c4 06       	cpc	r12, r20
    10f4:	d5 06       	cpc	r13, r21
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <__umoddi3+0x286>
    10f8:	a2 0c       	add	r10, r2
    10fa:	b3 1c       	adc	r11, r3
    10fc:	c4 1c       	adc	r12, r4
    10fe:	d5 1c       	adc	r13, r5
    1100:	a2 1a       	sub	r10, r18
    1102:	b3 0a       	sbc	r11, r19
    1104:	c4 0a       	sbc	r12, r20
    1106:	d5 0a       	sbc	r13, r21
    1108:	c6 01       	movw	r24, r12
    110a:	b5 01       	movw	r22, r10
    110c:	a4 01       	movw	r20, r8
    110e:	93 01       	movw	r18, r6
    1110:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1114:	7b 01       	movw	r14, r22
    1116:	8c 01       	movw	r16, r24
    1118:	c6 01       	movw	r24, r12
    111a:	b5 01       	movw	r22, r10
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1124:	ca 01       	movw	r24, r20
    1126:	b9 01       	movw	r22, r18
    1128:	21 96       	adiw	r28, 0x01	; 1
    112a:	2c ad       	ldd	r18, Y+60	; 0x3c
    112c:	3d ad       	ldd	r19, Y+61	; 0x3d
    112e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1130:	5f ad       	ldd	r21, Y+63	; 0x3f
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	ba c1       	rjmp	.+884    	; 0x14aa <__umoddi3+0x630>
    1136:	21 14       	cp	r2, r1
    1138:	31 04       	cpc	r3, r1
    113a:	41 04       	cpc	r4, r1
    113c:	51 04       	cpc	r5, r1
    113e:	71 f4       	brne	.+28     	; 0x115c <__umoddi3+0x2e2>
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1154:	c9 01       	movw	r24, r18
    1156:	da 01       	movw	r26, r20
    1158:	1c 01       	movw	r2, r24
    115a:	2d 01       	movw	r4, r26
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	20 16       	cp	r2, r16
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	30 06       	cpc	r3, r16
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	40 06       	cpc	r4, r16
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	50 06       	cpc	r5, r16
    116c:	88 f4       	brcc	.+34     	; 0x1190 <__umoddi3+0x316>
    116e:	1f ef       	ldi	r17, 0xFF	; 255
    1170:	21 16       	cp	r2, r17
    1172:	31 04       	cpc	r3, r1
    1174:	41 04       	cpc	r4, r1
    1176:	51 04       	cpc	r5, r1
    1178:	39 f0       	breq	.+14     	; 0x1188 <__umoddi3+0x30e>
    117a:	30 f0       	brcs	.+12     	; 0x1188 <__umoddi3+0x30e>
    117c:	68 e0       	ldi	r22, 0x08	; 8
    117e:	e6 2e       	mov	r14, r22
    1180:	f1 2c       	mov	r15, r1
    1182:	01 2d       	mov	r16, r1
    1184:	11 2d       	mov	r17, r1
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <__umoddi3+0x33e>
    1188:	ee 24       	eor	r14, r14
    118a:	ff 24       	eor	r15, r15
    118c:	87 01       	movw	r16, r14
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <__umoddi3+0x33e>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	24 16       	cp	r2, r20
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	34 06       	cpc	r3, r20
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	44 06       	cpc	r4, r20
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	54 06       	cpc	r5, r20
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__umoddi3+0x334>
    11a2:	58 e1       	ldi	r21, 0x18	; 24
    11a4:	e5 2e       	mov	r14, r21
    11a6:	f1 2c       	mov	r15, r1
    11a8:	01 2d       	mov	r16, r1
    11aa:	11 2d       	mov	r17, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <__umoddi3+0x33e>
    11ae:	40 e1       	ldi	r20, 0x10	; 16
    11b0:	e4 2e       	mov	r14, r20
    11b2:	f1 2c       	mov	r15, r1
    11b4:	01 2d       	mov	r16, r1
    11b6:	11 2d       	mov	r17, r1
    11b8:	d2 01       	movw	r26, r4
    11ba:	c1 01       	movw	r24, r2
    11bc:	0e 2c       	mov	r0, r14
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x34e>
    11c0:	b6 95       	lsr	r27
    11c2:	a7 95       	ror	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	0a 94       	dec	r0
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x346>
    11cc:	80 5a       	subi	r24, 0xA0	; 160
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	dc 01       	movw	r26, r24
    11d2:	2c 91       	ld	r18, X
    11d4:	30 e2       	ldi	r19, 0x20	; 32
    11d6:	a3 2e       	mov	r10, r19
    11d8:	b1 2c       	mov	r11, r1
    11da:	c1 2c       	mov	r12, r1
    11dc:	d1 2c       	mov	r13, r1
    11de:	d6 01       	movw	r26, r12
    11e0:	c5 01       	movw	r24, r10
    11e2:	8e 19       	sub	r24, r14
    11e4:	9f 09       	sbc	r25, r15
    11e6:	a0 0b       	sbc	r26, r16
    11e8:	b1 0b       	sbc	r27, r17
    11ea:	7c 01       	movw	r14, r24
    11ec:	8d 01       	movw	r16, r26
    11ee:	e2 1a       	sub	r14, r18
    11f0:	f1 08       	sbc	r15, r1
    11f2:	01 09       	sbc	r16, r1
    11f4:	11 09       	sbc	r17, r1
    11f6:	e9 ae       	std	Y+57, r14	; 0x39
    11f8:	fa ae       	std	Y+58, r15	; 0x3a
    11fa:	0b af       	std	Y+59, r16	; 0x3b
    11fc:	1c af       	std	Y+60, r17	; 0x3c
    11fe:	e1 14       	cp	r14, r1
    1200:	f1 04       	cpc	r15, r1
    1202:	01 05       	cpc	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	39 f4       	brne	.+14     	; 0x1216 <__umoddi3+0x39c>
    1208:	64 01       	movw	r12, r8
    120a:	53 01       	movw	r10, r6
    120c:	a2 18       	sub	r10, r2
    120e:	b3 08       	sbc	r11, r3
    1210:	c4 08       	sbc	r12, r4
    1212:	d5 08       	sbc	r13, r5
    1214:	e2 c0       	rjmp	.+452    	; 0x13da <__umoddi3+0x560>
    1216:	f9 ac       	ldd	r15, Y+57	; 0x39
    1218:	68 96       	adiw	r28, 0x18	; 24
    121a:	ff ae       	std	Y+63, r15	; 0x3f
    121c:	68 97       	sbiw	r28, 0x18	; 24
    121e:	0f 2c       	mov	r0, r15
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__umoddi3+0x3b0>
    1222:	22 0c       	add	r2, r2
    1224:	33 1c       	adc	r3, r3
    1226:	44 1c       	adc	r4, r4
    1228:	55 1c       	adc	r5, r5
    122a:	0a 94       	dec	r0
    122c:	d2 f7       	brpl	.-12     	; 0x1222 <__umoddi3+0x3a8>
    122e:	8a 2d       	mov	r24, r10
    1230:	8f 19       	sub	r24, r15
    1232:	64 01       	movw	r12, r8
    1234:	53 01       	movw	r10, r6
    1236:	08 2e       	mov	r0, r24
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__umoddi3+0x3c8>
    123a:	d6 94       	lsr	r13
    123c:	c7 94       	ror	r12
    123e:	b7 94       	ror	r11
    1240:	a7 94       	ror	r10
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <__umoddi3+0x3c0>
    1246:	a4 01       	movw	r20, r8
    1248:	93 01       	movw	r18, r6
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__umoddi3+0x3da>
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	44 1f       	adc	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	fa 94       	dec	r15
    1256:	d2 f7       	brpl	.-12     	; 0x124c <__umoddi3+0x3d2>
    1258:	6c 96       	adiw	r28, 0x1c	; 28
    125a:	6c ac       	ldd	r6, Y+60	; 0x3c
    125c:	7d ac       	ldd	r7, Y+61	; 0x3d
    125e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1260:	9f ac       	ldd	r9, Y+63	; 0x3f
    1262:	6c 97       	sbiw	r28, 0x1c	; 28
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__umoddi3+0x3f4>
    1266:	96 94       	lsr	r9
    1268:	87 94       	ror	r8
    126a:	77 94       	ror	r7
    126c:	67 94       	ror	r6
    126e:	8a 95       	dec	r24
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__umoddi3+0x3ec>
    1272:	84 01       	movw	r16, r8
    1274:	73 01       	movw	r14, r6
    1276:	e2 2a       	or	r14, r18
    1278:	f3 2a       	or	r15, r19
    127a:	04 2b       	or	r16, r20
    127c:	15 2b       	or	r17, r21
    127e:	ed a6       	std	Y+45, r14	; 0x2d
    1280:	fe a6       	std	Y+46, r15	; 0x2e
    1282:	0f a7       	std	Y+47, r16	; 0x2f
    1284:	18 ab       	std	Y+48, r17	; 0x30
    1286:	32 01       	movw	r6, r4
    1288:	88 24       	eor	r8, r8
    128a:	99 24       	eor	r9, r9
    128c:	b2 01       	movw	r22, r4
    128e:	a1 01       	movw	r20, r2
    1290:	60 70       	andi	r22, 0x00	; 0
    1292:	70 70       	andi	r23, 0x00	; 0
    1294:	25 96       	adiw	r28, 0x05	; 5
    1296:	4c af       	std	Y+60, r20	; 0x3c
    1298:	5d af       	std	Y+61, r21	; 0x3d
    129a:	6e af       	std	Y+62, r22	; 0x3e
    129c:	7f af       	std	Y+63, r23	; 0x3f
    129e:	25 97       	sbiw	r28, 0x05	; 5
    12a0:	c6 01       	movw	r24, r12
    12a2:	b5 01       	movw	r22, r10
    12a4:	a4 01       	movw	r20, r8
    12a6:	93 01       	movw	r18, r6
    12a8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    12bc:	ca 01       	movw	r24, r20
    12be:	b9 01       	movw	r22, r18
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	87 01       	movw	r16, r14
    12d6:	ff 24       	eor	r15, r15
    12d8:	ee 24       	eor	r14, r14
    12da:	ad a4       	ldd	r10, Y+45	; 0x2d
    12dc:	be a4       	ldd	r11, Y+46	; 0x2e
    12de:	cf a4       	ldd	r12, Y+47	; 0x2f
    12e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    12e2:	c6 01       	movw	r24, r12
    12e4:	aa 27       	eor	r26, r26
    12e6:	bb 27       	eor	r27, r27
    12e8:	5c 01       	movw	r10, r24
    12ea:	6d 01       	movw	r12, r26
    12ec:	ae 28       	or	r10, r14
    12ee:	bf 28       	or	r11, r15
    12f0:	c0 2a       	or	r12, r16
    12f2:	d1 2a       	or	r13, r17
    12f4:	a2 16       	cp	r10, r18
    12f6:	b3 06       	cpc	r11, r19
    12f8:	c4 06       	cpc	r12, r20
    12fa:	d5 06       	cpc	r13, r21
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <__umoddi3+0x4a8>
    12fe:	a2 0c       	add	r10, r2
    1300:	b3 1c       	adc	r11, r3
    1302:	c4 1c       	adc	r12, r4
    1304:	d5 1c       	adc	r13, r5
    1306:	a2 14       	cp	r10, r2
    1308:	b3 04       	cpc	r11, r3
    130a:	c4 04       	cpc	r12, r4
    130c:	d5 04       	cpc	r13, r5
    130e:	48 f0       	brcs	.+18     	; 0x1322 <__umoddi3+0x4a8>
    1310:	a2 16       	cp	r10, r18
    1312:	b3 06       	cpc	r11, r19
    1314:	c4 06       	cpc	r12, r20
    1316:	d5 06       	cpc	r13, r21
    1318:	20 f4       	brcc	.+8      	; 0x1322 <__umoddi3+0x4a8>
    131a:	a2 0c       	add	r10, r2
    131c:	b3 1c       	adc	r11, r3
    131e:	c4 1c       	adc	r12, r4
    1320:	d5 1c       	adc	r13, r5
    1322:	a2 1a       	sub	r10, r18
    1324:	b3 0a       	sbc	r11, r19
    1326:	c4 0a       	sbc	r12, r20
    1328:	d5 0a       	sbc	r13, r21
    132a:	c6 01       	movw	r24, r12
    132c:	b5 01       	movw	r22, r10
    132e:	a4 01       	movw	r20, r8
    1330:	93 01       	movw	r18, r6
    1332:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	c6 01       	movw	r24, r12
    133c:	b5 01       	movw	r22, r10
    133e:	a4 01       	movw	r20, r8
    1340:	93 01       	movw	r18, r6
    1342:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1346:	ca 01       	movw	r24, r20
    1348:	b9 01       	movw	r22, r18
    134a:	25 96       	adiw	r28, 0x05	; 5
    134c:	2c ad       	ldd	r18, Y+60	; 0x3c
    134e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1350:	4e ad       	ldd	r20, Y+62	; 0x3e
    1352:	5f ad       	ldd	r21, Y+63	; 0x3f
    1354:	25 97       	sbiw	r28, 0x05	; 5
    1356:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	87 01       	movw	r16, r14
    1360:	ff 24       	eor	r15, r15
    1362:	ee 24       	eor	r14, r14
    1364:	8d a5       	ldd	r24, Y+45	; 0x2d
    1366:	9e a5       	ldd	r25, Y+46	; 0x2e
    1368:	af a5       	ldd	r26, Y+47	; 0x2f
    136a:	b8 a9       	ldd	r27, Y+48	; 0x30
    136c:	a0 70       	andi	r26, 0x00	; 0
    136e:	b0 70       	andi	r27, 0x00	; 0
    1370:	57 01       	movw	r10, r14
    1372:	68 01       	movw	r12, r16
    1374:	a8 2a       	or	r10, r24
    1376:	b9 2a       	or	r11, r25
    1378:	ca 2a       	or	r12, r26
    137a:	db 2a       	or	r13, r27
    137c:	a2 16       	cp	r10, r18
    137e:	b3 06       	cpc	r11, r19
    1380:	c4 06       	cpc	r12, r20
    1382:	d5 06       	cpc	r13, r21
    1384:	90 f4       	brcc	.+36     	; 0x13aa <__umoddi3+0x530>
    1386:	a2 0c       	add	r10, r2
    1388:	b3 1c       	adc	r11, r3
    138a:	c4 1c       	adc	r12, r4
    138c:	d5 1c       	adc	r13, r5
    138e:	a2 14       	cp	r10, r2
    1390:	b3 04       	cpc	r11, r3
    1392:	c4 04       	cpc	r12, r4
    1394:	d5 04       	cpc	r13, r5
    1396:	48 f0       	brcs	.+18     	; 0x13aa <__umoddi3+0x530>
    1398:	a2 16       	cp	r10, r18
    139a:	b3 06       	cpc	r11, r19
    139c:	c4 06       	cpc	r12, r20
    139e:	d5 06       	cpc	r13, r21
    13a0:	20 f4       	brcc	.+8      	; 0x13aa <__umoddi3+0x530>
    13a2:	a2 0c       	add	r10, r2
    13a4:	b3 1c       	adc	r11, r3
    13a6:	c4 1c       	adc	r12, r4
    13a8:	d5 1c       	adc	r13, r5
    13aa:	6c 96       	adiw	r28, 0x1c	; 28
    13ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    13ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    13b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    13b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    13b4:	6c 97       	sbiw	r28, 0x1c	; 28
    13b6:	68 96       	adiw	r28, 0x18	; 24
    13b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    13ba:	68 97       	sbiw	r28, 0x18	; 24
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__umoddi3+0x54c>
    13be:	ee 0c       	add	r14, r14
    13c0:	ff 1c       	adc	r15, r15
    13c2:	00 1f       	adc	r16, r16
    13c4:	11 1f       	adc	r17, r17
    13c6:	0a 94       	dec	r0
    13c8:	d2 f7       	brpl	.-12     	; 0x13be <__umoddi3+0x544>
    13ca:	e9 aa       	std	Y+49, r14	; 0x31
    13cc:	fa aa       	std	Y+50, r15	; 0x32
    13ce:	0b ab       	std	Y+51, r16	; 0x33
    13d0:	1c ab       	std	Y+52, r17	; 0x34
    13d2:	a2 1a       	sub	r10, r18
    13d4:	b3 0a       	sbc	r11, r19
    13d6:	c4 0a       	sbc	r12, r20
    13d8:	d5 0a       	sbc	r13, r21
    13da:	32 01       	movw	r6, r4
    13dc:	88 24       	eor	r8, r8
    13de:	99 24       	eor	r9, r9
    13e0:	b2 01       	movw	r22, r4
    13e2:	a1 01       	movw	r20, r2
    13e4:	60 70       	andi	r22, 0x00	; 0
    13e6:	70 70       	andi	r23, 0x00	; 0
    13e8:	29 96       	adiw	r28, 0x09	; 9
    13ea:	4c af       	std	Y+60, r20	; 0x3c
    13ec:	5d af       	std	Y+61, r21	; 0x3d
    13ee:	6e af       	std	Y+62, r22	; 0x3e
    13f0:	7f af       	std	Y+63, r23	; 0x3f
    13f2:	29 97       	sbiw	r28, 0x09	; 9
    13f4:	c6 01       	movw	r24, r12
    13f6:	b5 01       	movw	r22, r10
    13f8:	a4 01       	movw	r20, r8
    13fa:	93 01       	movw	r18, r6
    13fc:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
    1404:	c6 01       	movw	r24, r12
    1406:	b5 01       	movw	r22, r10
    1408:	a4 01       	movw	r20, r8
    140a:	93 01       	movw	r18, r6
    140c:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1410:	ca 01       	movw	r24, r20
    1412:	b9 01       	movw	r22, r18
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	2c ad       	ldd	r18, Y+60	; 0x3c
    1418:	3d ad       	ldd	r19, Y+61	; 0x3d
    141a:	4e ad       	ldd	r20, Y+62	; 0x3e
    141c:	5f ad       	ldd	r21, Y+63	; 0x3f
    141e:	29 97       	sbiw	r28, 0x09	; 9
    1420:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	87 01       	movw	r16, r14
    142a:	ff 24       	eor	r15, r15
    142c:	ee 24       	eor	r14, r14
    142e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1430:	ba a8       	ldd	r11, Y+50	; 0x32
    1432:	cb a8       	ldd	r12, Y+51	; 0x33
    1434:	dc a8       	ldd	r13, Y+52	; 0x34
    1436:	c6 01       	movw	r24, r12
    1438:	aa 27       	eor	r26, r26
    143a:	bb 27       	eor	r27, r27
    143c:	57 01       	movw	r10, r14
    143e:	68 01       	movw	r12, r16
    1440:	a8 2a       	or	r10, r24
    1442:	b9 2a       	or	r11, r25
    1444:	ca 2a       	or	r12, r26
    1446:	db 2a       	or	r13, r27
    1448:	a2 16       	cp	r10, r18
    144a:	b3 06       	cpc	r11, r19
    144c:	c4 06       	cpc	r12, r20
    144e:	d5 06       	cpc	r13, r21
    1450:	90 f4       	brcc	.+36     	; 0x1476 <__umoddi3+0x5fc>
    1452:	a2 0c       	add	r10, r2
    1454:	b3 1c       	adc	r11, r3
    1456:	c4 1c       	adc	r12, r4
    1458:	d5 1c       	adc	r13, r5
    145a:	a2 14       	cp	r10, r2
    145c:	b3 04       	cpc	r11, r3
    145e:	c4 04       	cpc	r12, r4
    1460:	d5 04       	cpc	r13, r5
    1462:	48 f0       	brcs	.+18     	; 0x1476 <__umoddi3+0x5fc>
    1464:	a2 16       	cp	r10, r18
    1466:	b3 06       	cpc	r11, r19
    1468:	c4 06       	cpc	r12, r20
    146a:	d5 06       	cpc	r13, r21
    146c:	20 f4       	brcc	.+8      	; 0x1476 <__umoddi3+0x5fc>
    146e:	a2 0c       	add	r10, r2
    1470:	b3 1c       	adc	r11, r3
    1472:	c4 1c       	adc	r12, r4
    1474:	d5 1c       	adc	r13, r5
    1476:	a2 1a       	sub	r10, r18
    1478:	b3 0a       	sbc	r11, r19
    147a:	c4 0a       	sbc	r12, r20
    147c:	d5 0a       	sbc	r13, r21
    147e:	c6 01       	movw	r24, r12
    1480:	b5 01       	movw	r22, r10
    1482:	a4 01       	movw	r20, r8
    1484:	93 01       	movw	r18, r6
    1486:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    148a:	7b 01       	movw	r14, r22
    148c:	8c 01       	movw	r16, r24
    148e:	c6 01       	movw	r24, r12
    1490:	b5 01       	movw	r22, r10
    1492:	a4 01       	movw	r20, r8
    1494:	93 01       	movw	r18, r6
    1496:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    149a:	ca 01       	movw	r24, r20
    149c:	b9 01       	movw	r22, r18
    149e:	29 96       	adiw	r28, 0x09	; 9
    14a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a8:	29 97       	sbiw	r28, 0x09	; 9
    14aa:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	87 01       	movw	r16, r14
    14b4:	ff 24       	eor	r15, r15
    14b6:	ee 24       	eor	r14, r14
    14b8:	89 a9       	ldd	r24, Y+49	; 0x31
    14ba:	9a a9       	ldd	r25, Y+50	; 0x32
    14bc:	ab a9       	ldd	r26, Y+51	; 0x33
    14be:	bc a9       	ldd	r27, Y+52	; 0x34
    14c0:	a0 70       	andi	r26, 0x00	; 0
    14c2:	b0 70       	andi	r27, 0x00	; 0
    14c4:	e8 2a       	or	r14, r24
    14c6:	f9 2a       	or	r15, r25
    14c8:	0a 2b       	or	r16, r26
    14ca:	1b 2b       	or	r17, r27
    14cc:	e2 16       	cp	r14, r18
    14ce:	f3 06       	cpc	r15, r19
    14d0:	04 07       	cpc	r16, r20
    14d2:	15 07       	cpc	r17, r21
    14d4:	90 f4       	brcc	.+36     	; 0x14fa <__umoddi3+0x680>
    14d6:	e2 0c       	add	r14, r2
    14d8:	f3 1c       	adc	r15, r3
    14da:	04 1d       	adc	r16, r4
    14dc:	15 1d       	adc	r17, r5
    14de:	e2 14       	cp	r14, r2
    14e0:	f3 04       	cpc	r15, r3
    14e2:	04 05       	cpc	r16, r4
    14e4:	15 05       	cpc	r17, r5
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <__umoddi3+0x680>
    14e8:	e2 16       	cp	r14, r18
    14ea:	f3 06       	cpc	r15, r19
    14ec:	04 07       	cpc	r16, r20
    14ee:	15 07       	cpc	r17, r21
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__umoddi3+0x680>
    14f2:	e2 0c       	add	r14, r2
    14f4:	f3 1c       	adc	r15, r3
    14f6:	04 1d       	adc	r16, r4
    14f8:	15 1d       	adc	r17, r5
    14fa:	e2 1a       	sub	r14, r18
    14fc:	f3 0a       	sbc	r15, r19
    14fe:	04 0b       	sbc	r16, r20
    1500:	15 0b       	sbc	r17, r21
    1502:	d8 01       	movw	r26, r16
    1504:	c7 01       	movw	r24, r14
    1506:	09 ac       	ldd	r0, Y+57	; 0x39
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__umoddi3+0x698>
    150a:	b6 95       	lsr	r27
    150c:	a7 95       	ror	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	0a 94       	dec	r0
    1514:	d2 f7       	brpl	.-12     	; 0x150a <__umoddi3+0x690>
    1516:	89 8b       	std	Y+17, r24	; 0x11
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	ab 8b       	std	Y+19, r26	; 0x13
    151c:	bc 8b       	std	Y+20, r27	; 0x14
    151e:	1d 8a       	std	Y+21, r1	; 0x15
    1520:	1e 8a       	std	Y+22, r1	; 0x16
    1522:	1f 8a       	std	Y+23, r1	; 0x17
    1524:	18 8e       	std	Y+24, r1	; 0x18
    1526:	28 2f       	mov	r18, r24
    1528:	3a 89       	ldd	r19, Y+18	; 0x12
    152a:	4b 89       	ldd	r20, Y+19	; 0x13
    152c:	5c 89       	ldd	r21, Y+20	; 0x14
    152e:	6d 89       	ldd	r22, Y+21	; 0x15
    1530:	0c c3       	rjmp	.+1560   	; 0x1b4a <__umoddi3+0xcd0>
    1532:	6a 14       	cp	r6, r10
    1534:	7b 04       	cpc	r7, r11
    1536:	8c 04       	cpc	r8, r12
    1538:	9d 04       	cpc	r9, r13
    153a:	08 f4       	brcc	.+2      	; 0x153e <__umoddi3+0x6c4>
    153c:	09 c3       	rjmp	.+1554   	; 0x1b50 <__umoddi3+0xcd6>
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	a0 16       	cp	r10, r16
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	b0 06       	cpc	r11, r16
    1546:	01 e0       	ldi	r16, 0x01	; 1
    1548:	c0 06       	cpc	r12, r16
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	d0 06       	cpc	r13, r16
    154e:	88 f4       	brcc	.+34     	; 0x1572 <__umoddi3+0x6f8>
    1550:	1f ef       	ldi	r17, 0xFF	; 255
    1552:	a1 16       	cp	r10, r17
    1554:	b1 04       	cpc	r11, r1
    1556:	c1 04       	cpc	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	39 f0       	breq	.+14     	; 0x156a <__umoddi3+0x6f0>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__umoddi3+0x6f0>
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	e2 2e       	mov	r14, r18
    1562:	f1 2c       	mov	r15, r1
    1564:	01 2d       	mov	r16, r1
    1566:	11 2d       	mov	r17, r1
    1568:	18 c0       	rjmp	.+48     	; 0x159a <__umoddi3+0x720>
    156a:	ee 24       	eor	r14, r14
    156c:	ff 24       	eor	r15, r15
    156e:	87 01       	movw	r16, r14
    1570:	14 c0       	rjmp	.+40     	; 0x159a <__umoddi3+0x720>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	a4 16       	cp	r10, r20
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	b4 06       	cpc	r11, r20
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	c4 06       	cpc	r12, r20
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	d4 06       	cpc	r13, r20
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__umoddi3+0x716>
    1584:	98 e1       	ldi	r25, 0x18	; 24
    1586:	e9 2e       	mov	r14, r25
    1588:	f1 2c       	mov	r15, r1
    158a:	01 2d       	mov	r16, r1
    158c:	11 2d       	mov	r17, r1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__umoddi3+0x720>
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	01 2d       	mov	r16, r1
    1598:	11 2d       	mov	r17, r1
    159a:	d6 01       	movw	r26, r12
    159c:	c5 01       	movw	r24, r10
    159e:	0e 2c       	mov	r0, r14
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <__umoddi3+0x730>
    15a2:	b6 95       	lsr	r27
    15a4:	a7 95       	ror	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	0a 94       	dec	r0
    15ac:	d2 f7       	brpl	.-12     	; 0x15a2 <__umoddi3+0x728>
    15ae:	80 5a       	subi	r24, 0xA0	; 160
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	dc 01       	movw	r26, r24
    15b4:	2c 91       	ld	r18, X
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8e 19       	sub	r24, r14
    15c0:	9f 09       	sbc	r25, r15
    15c2:	a0 0b       	sbc	r26, r16
    15c4:	b1 0b       	sbc	r27, r17
    15c6:	82 1b       	sub	r24, r18
    15c8:	91 09       	sbc	r25, r1
    15ca:	a1 09       	sbc	r26, r1
    15cc:	b1 09       	sbc	r27, r1
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	a1 05       	cpc	r26, r1
    15d2:	b1 05       	cpc	r27, r1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__umoddi3+0x75e>
    15d6:	4f c0       	rjmp	.+158    	; 0x1676 <__umoddi3+0x7fc>
    15d8:	a6 14       	cp	r10, r6
    15da:	b7 04       	cpc	r11, r7
    15dc:	c8 04       	cpc	r12, r8
    15de:	d9 04       	cpc	r13, r9
    15e0:	58 f0       	brcs	.+22     	; 0x15f8 <__umoddi3+0x77e>
    15e2:	6c 96       	adiw	r28, 0x1c	; 28
    15e4:	ec ac       	ldd	r14, Y+60	; 0x3c
    15e6:	fd ac       	ldd	r15, Y+61	; 0x3d
    15e8:	0e ad       	ldd	r16, Y+62	; 0x3e
    15ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    15ec:	6c 97       	sbiw	r28, 0x1c	; 28
    15ee:	e2 14       	cp	r14, r2
    15f0:	f3 04       	cpc	r15, r3
    15f2:	04 05       	cpc	r16, r4
    15f4:	15 05       	cpc	r17, r5
    15f6:	68 f1       	brcs	.+90     	; 0x1652 <__umoddi3+0x7d8>
    15f8:	6c 96       	adiw	r28, 0x1c	; 28
    15fa:	ec ac       	ldd	r14, Y+60	; 0x3c
    15fc:	fd ac       	ldd	r15, Y+61	; 0x3d
    15fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1600:	1f ad       	ldd	r17, Y+63	; 0x3f
    1602:	6c 97       	sbiw	r28, 0x1c	; 28
    1604:	e2 18       	sub	r14, r2
    1606:	f3 08       	sbc	r15, r3
    1608:	04 09       	sbc	r16, r4
    160a:	15 09       	sbc	r17, r5
    160c:	a4 01       	movw	r20, r8
    160e:	93 01       	movw	r18, r6
    1610:	2a 19       	sub	r18, r10
    1612:	3b 09       	sbc	r19, r11
    1614:	4c 09       	sbc	r20, r12
    1616:	5d 09       	sbc	r21, r13
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	65 01       	movw	r12, r10
    161e:	6c 96       	adiw	r28, 0x1c	; 28
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	6c 97       	sbiw	r28, 0x1c	; 28
    162a:	6e 15       	cp	r22, r14
    162c:	7f 05       	cpc	r23, r15
    162e:	80 07       	cpc	r24, r16
    1630:	91 07       	cpc	r25, r17
    1632:	28 f4       	brcc	.+10     	; 0x163e <__umoddi3+0x7c4>
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	ab 2e       	mov	r10, r27
    1638:	b1 2c       	mov	r11, r1
    163a:	c1 2c       	mov	r12, r1
    163c:	d1 2c       	mov	r13, r1
    163e:	da 01       	movw	r26, r20
    1640:	c9 01       	movw	r24, r18
    1642:	8a 19       	sub	r24, r10
    1644:	9b 09       	sbc	r25, r11
    1646:	ac 09       	sbc	r26, r12
    1648:	bd 09       	sbc	r27, r13
    164a:	8d ab       	std	Y+53, r24	; 0x35
    164c:	9e ab       	std	Y+54, r25	; 0x36
    164e:	af ab       	std	Y+55, r26	; 0x37
    1650:	b8 af       	std	Y+56, r27	; 0x38
    1652:	e9 8a       	std	Y+17, r14	; 0x11
    1654:	fa 8a       	std	Y+18, r15	; 0x12
    1656:	0b 8b       	std	Y+19, r16	; 0x13
    1658:	1c 8b       	std	Y+20, r17	; 0x14
    165a:	6d a8       	ldd	r6, Y+53	; 0x35
    165c:	7e a8       	ldd	r7, Y+54	; 0x36
    165e:	8f a8       	ldd	r8, Y+55	; 0x37
    1660:	98 ac       	ldd	r9, Y+56	; 0x38
    1662:	6d 8a       	std	Y+21, r6	; 0x15
    1664:	7e 8a       	std	Y+22, r7	; 0x16
    1666:	8f 8a       	std	Y+23, r8	; 0x17
    1668:	98 8e       	std	Y+24, r9	; 0x18
    166a:	2e 2d       	mov	r18, r14
    166c:	3a 89       	ldd	r19, Y+18	; 0x12
    166e:	4b 89       	ldd	r20, Y+19	; 0x13
    1670:	5c 89       	ldd	r21, Y+20	; 0x14
    1672:	6d a9       	ldd	r22, Y+53	; 0x35
    1674:	6a c2       	rjmp	.+1236   	; 0x1b4a <__umoddi3+0xcd0>
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	8f af       	std	Y+63, r24	; 0x3f
    167a:	67 97       	sbiw	r28, 0x17	; 23
    167c:	a6 01       	movw	r20, r12
    167e:	95 01       	movw	r18, r10
    1680:	08 2e       	mov	r0, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__umoddi3+0x812>
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	44 1f       	adc	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__umoddi3+0x80a>
    1690:	a0 e2       	ldi	r26, 0x20	; 32
    1692:	aa 2e       	mov	r10, r26
    1694:	a8 1a       	sub	r10, r24
    1696:	66 96       	adiw	r28, 0x16	; 22
    1698:	af ae       	std	Y+63, r10	; 0x3f
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	d2 01       	movw	r26, r4
    169e:	c1 01       	movw	r24, r2
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__umoddi3+0x830>
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	aa 94       	dec	r10
    16ac:	d2 f7       	brpl	.-12     	; 0x16a2 <__umoddi3+0x828>
    16ae:	6c 01       	movw	r12, r24
    16b0:	7d 01       	movw	r14, r26
    16b2:	c2 2a       	or	r12, r18
    16b4:	d3 2a       	or	r13, r19
    16b6:	e4 2a       	or	r14, r20
    16b8:	f5 2a       	or	r15, r21
    16ba:	c9 a6       	std	Y+41, r12	; 0x29
    16bc:	da a6       	std	Y+42, r13	; 0x2a
    16be:	eb a6       	std	Y+43, r14	; 0x2b
    16c0:	fc a6       	std	Y+44, r15	; 0x2c
    16c2:	82 01       	movw	r16, r4
    16c4:	71 01       	movw	r14, r2
    16c6:	67 96       	adiw	r28, 0x17	; 23
    16c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ca:	67 97       	sbiw	r28, 0x17	; 23
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__umoddi3+0x85c>
    16ce:	ee 0c       	add	r14, r14
    16d0:	ff 1c       	adc	r15, r15
    16d2:	00 1f       	adc	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	0a 94       	dec	r0
    16d8:	d2 f7       	brpl	.-12     	; 0x16ce <__umoddi3+0x854>
    16da:	ed a2       	std	Y+37, r14	; 0x25
    16dc:	fe a2       	std	Y+38, r15	; 0x26
    16de:	0f a3       	std	Y+39, r16	; 0x27
    16e0:	18 a7       	std	Y+40, r17	; 0x28
    16e2:	64 01       	movw	r12, r8
    16e4:	53 01       	movw	r10, r6
    16e6:	66 96       	adiw	r28, 0x16	; 22
    16e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ea:	66 97       	sbiw	r28, 0x16	; 22
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__umoddi3+0x87c>
    16ee:	d6 94       	lsr	r13
    16f0:	c7 94       	ror	r12
    16f2:	b7 94       	ror	r11
    16f4:	a7 94       	ror	r10
    16f6:	0a 94       	dec	r0
    16f8:	d2 f7       	brpl	.-12     	; 0x16ee <__umoddi3+0x874>
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	67 96       	adiw	r28, 0x17	; 23
    1700:	0f ac       	ldd	r0, Y+63	; 0x3f
    1702:	67 97       	sbiw	r28, 0x17	; 23
    1704:	04 c0       	rjmp	.+8      	; 0x170e <__umoddi3+0x894>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	0a 94       	dec	r0
    1710:	d2 f7       	brpl	.-12     	; 0x1706 <__umoddi3+0x88c>
    1712:	6c 96       	adiw	r28, 0x1c	; 28
    1714:	8c ad       	ldd	r24, Y+60	; 0x3c
    1716:	9d ad       	ldd	r25, Y+61	; 0x3d
    1718:	ae ad       	ldd	r26, Y+62	; 0x3e
    171a:	bf ad       	ldd	r27, Y+63	; 0x3f
    171c:	6c 97       	sbiw	r28, 0x1c	; 28
    171e:	66 96       	adiw	r28, 0x16	; 22
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	66 97       	sbiw	r28, 0x16	; 22
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x8b4>
    1726:	b6 95       	lsr	r27
    1728:	a7 95       	ror	r26
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x8ac>
    1732:	3c 01       	movw	r6, r24
    1734:	4d 01       	movw	r8, r26
    1736:	62 2a       	or	r6, r18
    1738:	73 2a       	or	r7, r19
    173a:	84 2a       	or	r8, r20
    173c:	95 2a       	or	r9, r21
    173e:	69 a2       	std	Y+33, r6	; 0x21
    1740:	7a a2       	std	Y+34, r7	; 0x22
    1742:	8b a2       	std	Y+35, r8	; 0x23
    1744:	9c a2       	std	Y+36, r9	; 0x24
    1746:	6c 96       	adiw	r28, 0x1c	; 28
    1748:	ec ac       	ldd	r14, Y+60	; 0x3c
    174a:	fd ac       	ldd	r15, Y+61	; 0x3d
    174c:	0e ad       	ldd	r16, Y+62	; 0x3e
    174e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1750:	6c 97       	sbiw	r28, 0x1c	; 28
    1752:	67 96       	adiw	r28, 0x17	; 23
    1754:	0f ac       	ldd	r0, Y+63	; 0x3f
    1756:	67 97       	sbiw	r28, 0x17	; 23
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__umoddi3+0x8e8>
    175a:	ee 0c       	add	r14, r14
    175c:	ff 1c       	adc	r15, r15
    175e:	00 1f       	adc	r16, r16
    1760:	11 1f       	adc	r17, r17
    1762:	0a 94       	dec	r0
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__umoddi3+0x8e0>
    1766:	ed 8e       	std	Y+29, r14	; 0x1d
    1768:	fe 8e       	std	Y+30, r15	; 0x1e
    176a:	0f 8f       	std	Y+31, r16	; 0x1f
    176c:	18 a3       	std	Y+32, r17	; 0x20
    176e:	49 a5       	ldd	r20, Y+41	; 0x29
    1770:	5a a5       	ldd	r21, Y+42	; 0x2a
    1772:	6b a5       	ldd	r22, Y+43	; 0x2b
    1774:	7c a5       	ldd	r23, Y+44	; 0x2c
    1776:	3b 01       	movw	r6, r22
    1778:	88 24       	eor	r8, r8
    177a:	99 24       	eor	r9, r9
    177c:	60 70       	andi	r22, 0x00	; 0
    177e:	70 70       	andi	r23, 0x00	; 0
    1780:	2d 96       	adiw	r28, 0x0d	; 13
    1782:	4c af       	std	Y+60, r20	; 0x3c
    1784:	5d af       	std	Y+61, r21	; 0x3d
    1786:	6e af       	std	Y+62, r22	; 0x3e
    1788:	7f af       	std	Y+63, r23	; 0x3f
    178a:	2d 97       	sbiw	r28, 0x0d	; 13
    178c:	c6 01       	movw	r24, r12
    178e:	b5 01       	movw	r22, r10
    1790:	a4 01       	movw	r20, r8
    1792:	93 01       	movw	r18, r6
    1794:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	c6 01       	movw	r24, r12
    179e:	b5 01       	movw	r22, r10
    17a0:	a4 01       	movw	r20, r8
    17a2:	93 01       	movw	r18, r6
    17a4:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    17a8:	c9 01       	movw	r24, r18
    17aa:	da 01       	movw	r26, r20
    17ac:	1c 01       	movw	r2, r24
    17ae:	2d 01       	movw	r4, r26
    17b0:	c2 01       	movw	r24, r4
    17b2:	b1 01       	movw	r22, r2
    17b4:	2d 96       	adiw	r28, 0x0d	; 13
    17b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    17b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    17ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    17bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    17be:	2d 97       	sbiw	r28, 0x0d	; 13
    17c0:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	87 01       	movw	r16, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	ee 24       	eor	r14, r14
    17ce:	a9 a0       	ldd	r10, Y+33	; 0x21
    17d0:	ba a0       	ldd	r11, Y+34	; 0x22
    17d2:	cb a0       	ldd	r12, Y+35	; 0x23
    17d4:	dc a0       	ldd	r13, Y+36	; 0x24
    17d6:	c6 01       	movw	r24, r12
    17d8:	aa 27       	eor	r26, r26
    17da:	bb 27       	eor	r27, r27
    17dc:	57 01       	movw	r10, r14
    17de:	68 01       	movw	r12, r16
    17e0:	a8 2a       	or	r10, r24
    17e2:	b9 2a       	or	r11, r25
    17e4:	ca 2a       	or	r12, r26
    17e6:	db 2a       	or	r13, r27
    17e8:	a2 16       	cp	r10, r18
    17ea:	b3 06       	cpc	r11, r19
    17ec:	c4 06       	cpc	r12, r20
    17ee:	d5 06       	cpc	r13, r21
    17f0:	00 f5       	brcc	.+64     	; 0x1832 <__umoddi3+0x9b8>
    17f2:	08 94       	sec
    17f4:	21 08       	sbc	r2, r1
    17f6:	31 08       	sbc	r3, r1
    17f8:	41 08       	sbc	r4, r1
    17fa:	51 08       	sbc	r5, r1
    17fc:	e9 a4       	ldd	r14, Y+41	; 0x29
    17fe:	fa a4       	ldd	r15, Y+42	; 0x2a
    1800:	0b a5       	ldd	r16, Y+43	; 0x2b
    1802:	1c a5       	ldd	r17, Y+44	; 0x2c
    1804:	ae 0c       	add	r10, r14
    1806:	bf 1c       	adc	r11, r15
    1808:	c0 1e       	adc	r12, r16
    180a:	d1 1e       	adc	r13, r17
    180c:	ae 14       	cp	r10, r14
    180e:	bf 04       	cpc	r11, r15
    1810:	c0 06       	cpc	r12, r16
    1812:	d1 06       	cpc	r13, r17
    1814:	70 f0       	brcs	.+28     	; 0x1832 <__umoddi3+0x9b8>
    1816:	a2 16       	cp	r10, r18
    1818:	b3 06       	cpc	r11, r19
    181a:	c4 06       	cpc	r12, r20
    181c:	d5 06       	cpc	r13, r21
    181e:	48 f4       	brcc	.+18     	; 0x1832 <__umoddi3+0x9b8>
    1820:	08 94       	sec
    1822:	21 08       	sbc	r2, r1
    1824:	31 08       	sbc	r3, r1
    1826:	41 08       	sbc	r4, r1
    1828:	51 08       	sbc	r5, r1
    182a:	ae 0c       	add	r10, r14
    182c:	bf 1c       	adc	r11, r15
    182e:	c0 1e       	adc	r12, r16
    1830:	d1 1e       	adc	r13, r17
    1832:	a2 1a       	sub	r10, r18
    1834:	b3 0a       	sbc	r11, r19
    1836:	c4 0a       	sbc	r12, r20
    1838:	d5 0a       	sbc	r13, r21
    183a:	c6 01       	movw	r24, r12
    183c:	b5 01       	movw	r22, r10
    183e:	a4 01       	movw	r20, r8
    1840:	93 01       	movw	r18, r6
    1842:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1846:	7b 01       	movw	r14, r22
    1848:	8c 01       	movw	r16, r24
    184a:	c6 01       	movw	r24, r12
    184c:	b5 01       	movw	r22, r10
    184e:	a4 01       	movw	r20, r8
    1850:	93 01       	movw	r18, r6
    1852:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__udivmodsi4>
    1856:	c9 01       	movw	r24, r18
    1858:	da 01       	movw	r26, r20
    185a:	3c 01       	movw	r6, r24
    185c:	4d 01       	movw	r8, r26
    185e:	c4 01       	movw	r24, r8
    1860:	b3 01       	movw	r22, r6
    1862:	2d 96       	adiw	r28, 0x0d	; 13
    1864:	2c ad       	ldd	r18, Y+60	; 0x3c
    1866:	3d ad       	ldd	r19, Y+61	; 0x3d
    1868:	4e ad       	ldd	r20, Y+62	; 0x3e
    186a:	5f ad       	ldd	r21, Y+63	; 0x3f
    186c:	2d 97       	sbiw	r28, 0x0d	; 13
    186e:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	87 01       	movw	r16, r14
    1878:	ff 24       	eor	r15, r15
    187a:	ee 24       	eor	r14, r14
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	ab a1       	ldd	r26, Y+35	; 0x23
    1882:	bc a1       	ldd	r27, Y+36	; 0x24
    1884:	a0 70       	andi	r26, 0x00	; 0
    1886:	b0 70       	andi	r27, 0x00	; 0
    1888:	57 01       	movw	r10, r14
    188a:	68 01       	movw	r12, r16
    188c:	a8 2a       	or	r10, r24
    188e:	b9 2a       	or	r11, r25
    1890:	ca 2a       	or	r12, r26
    1892:	db 2a       	or	r13, r27
    1894:	a2 16       	cp	r10, r18
    1896:	b3 06       	cpc	r11, r19
    1898:	c4 06       	cpc	r12, r20
    189a:	d5 06       	cpc	r13, r21
    189c:	00 f5       	brcc	.+64     	; 0x18de <__umoddi3+0xa64>
    189e:	08 94       	sec
    18a0:	61 08       	sbc	r6, r1
    18a2:	71 08       	sbc	r7, r1
    18a4:	81 08       	sbc	r8, r1
    18a6:	91 08       	sbc	r9, r1
    18a8:	69 a5       	ldd	r22, Y+41	; 0x29
    18aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	a6 0e       	add	r10, r22
    18b2:	b7 1e       	adc	r11, r23
    18b4:	c8 1e       	adc	r12, r24
    18b6:	d9 1e       	adc	r13, r25
    18b8:	a6 16       	cp	r10, r22
    18ba:	b7 06       	cpc	r11, r23
    18bc:	c8 06       	cpc	r12, r24
    18be:	d9 06       	cpc	r13, r25
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__umoddi3+0xa64>
    18c2:	a2 16       	cp	r10, r18
    18c4:	b3 06       	cpc	r11, r19
    18c6:	c4 06       	cpc	r12, r20
    18c8:	d5 06       	cpc	r13, r21
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__umoddi3+0xa64>
    18cc:	08 94       	sec
    18ce:	61 08       	sbc	r6, r1
    18d0:	71 08       	sbc	r7, r1
    18d2:	81 08       	sbc	r8, r1
    18d4:	91 08       	sbc	r9, r1
    18d6:	a6 0e       	add	r10, r22
    18d8:	b7 1e       	adc	r11, r23
    18da:	c8 1e       	adc	r12, r24
    18dc:	d9 1e       	adc	r13, r25
    18de:	d6 01       	movw	r26, r12
    18e0:	c5 01       	movw	r24, r10
    18e2:	82 1b       	sub	r24, r18
    18e4:	93 0b       	sbc	r25, r19
    18e6:	a4 0b       	sbc	r26, r20
    18e8:	b5 0b       	sbc	r27, r21
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
    18f2:	d1 01       	movw	r26, r2
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	84 01       	movw	r16, r8
    18fa:	73 01       	movw	r14, r6
    18fc:	e8 2a       	or	r14, r24
    18fe:	f9 2a       	or	r15, r25
    1900:	0a 2b       	or	r16, r26
    1902:	1b 2b       	or	r17, r27
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	a4 2e       	mov	r10, r20
    1908:	4f ef       	ldi	r20, 0xFF	; 255
    190a:	b4 2e       	mov	r11, r20
    190c:	c1 2c       	mov	r12, r1
    190e:	d1 2c       	mov	r13, r1
    1910:	ae 20       	and	r10, r14
    1912:	bf 20       	and	r11, r15
    1914:	c0 22       	and	r12, r16
    1916:	d1 22       	and	r13, r17
    1918:	78 01       	movw	r14, r16
    191a:	00 27       	eor	r16, r16
    191c:	11 27       	eor	r17, r17
    191e:	6d a0       	ldd	r6, Y+37	; 0x25
    1920:	7e a0       	ldd	r7, Y+38	; 0x26
    1922:	8f a0       	ldd	r8, Y+39	; 0x27
    1924:	98 a4       	ldd	r9, Y+40	; 0x28
    1926:	4f ef       	ldi	r20, 0xFF	; 255
    1928:	5f ef       	ldi	r21, 0xFF	; 255
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	64 22       	and	r6, r20
    1930:	75 22       	and	r7, r21
    1932:	86 22       	and	r8, r22
    1934:	97 22       	and	r9, r23
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	af a1       	ldd	r26, Y+39	; 0x27
    193c:	b8 a5       	ldd	r27, Y+40	; 0x28
    193e:	bd 01       	movw	r22, r26
    1940:	88 27       	eor	r24, r24
    1942:	99 27       	eor	r25, r25
    1944:	65 96       	adiw	r28, 0x15	; 21
    1946:	6c af       	std	Y+60, r22	; 0x3c
    1948:	7d af       	std	Y+61, r23	; 0x3d
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	65 97       	sbiw	r28, 0x15	; 21
    1950:	c6 01       	movw	r24, r12
    1952:	b5 01       	movw	r22, r10
    1954:	a4 01       	movw	r20, r8
    1956:	93 01       	movw	r18, r6
    1958:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	6c af       	std	Y+60, r22	; 0x3c
    1960:	7d af       	std	Y+61, r23	; 0x3d
    1962:	8e af       	std	Y+62, r24	; 0x3e
    1964:	9f af       	std	Y+63, r25	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	c6 01       	movw	r24, r12
    196a:	b5 01       	movw	r22, r10
    196c:	65 96       	adiw	r28, 0x15	; 21
    196e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1970:	3d ad       	ldd	r19, Y+61	; 0x3d
    1972:	4e ad       	ldd	r20, Y+62	; 0x3e
    1974:	5f ad       	ldd	r21, Y+63	; 0x3f
    1976:	65 97       	sbiw	r28, 0x15	; 21
    1978:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    197c:	1b 01       	movw	r2, r22
    197e:	2c 01       	movw	r4, r24
    1980:	c8 01       	movw	r24, r16
    1982:	b7 01       	movw	r22, r14
    1984:	a4 01       	movw	r20, r8
    1986:	93 01       	movw	r18, r6
    1988:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    198c:	5b 01       	movw	r10, r22
    198e:	6c 01       	movw	r12, r24
    1990:	c8 01       	movw	r24, r16
    1992:	b7 01       	movw	r22, r14
    1994:	65 96       	adiw	r28, 0x15	; 21
    1996:	2c ad       	ldd	r18, Y+60	; 0x3c
    1998:	3d ad       	ldd	r19, Y+61	; 0x3d
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	65 97       	sbiw	r28, 0x15	; 21
    19a0:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__mulsi3>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
    19a8:	a6 01       	movw	r20, r12
    19aa:	95 01       	movw	r18, r10
    19ac:	22 0d       	add	r18, r2
    19ae:	33 1d       	adc	r19, r3
    19b0:	44 1d       	adc	r20, r4
    19b2:	55 1d       	adc	r21, r5
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c ac       	ldd	r6, Y+60	; 0x3c
    19b8:	7d ac       	ldd	r7, Y+61	; 0x3d
    19ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    19bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c4 01       	movw	r24, r8
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	28 0f       	add	r18, r24
    19c8:	39 1f       	adc	r19, r25
    19ca:	4a 1f       	adc	r20, r26
    19cc:	5b 1f       	adc	r21, r27
    19ce:	2a 15       	cp	r18, r10
    19d0:	3b 05       	cpc	r19, r11
    19d2:	4c 05       	cpc	r20, r12
    19d4:	5d 05       	cpc	r21, r13
    19d6:	48 f4       	brcc	.+18     	; 0x19ea <__umoddi3+0xb70>
    19d8:	81 2c       	mov	r8, r1
    19da:	91 2c       	mov	r9, r1
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	ae 2e       	mov	r10, r30
    19e0:	b1 2c       	mov	r11, r1
    19e2:	e8 0c       	add	r14, r8
    19e4:	f9 1c       	adc	r15, r9
    19e6:	0a 1d       	adc	r16, r10
    19e8:	1b 1d       	adc	r17, r11
    19ea:	ca 01       	movw	r24, r20
    19ec:	aa 27       	eor	r26, r26
    19ee:	bb 27       	eor	r27, r27
    19f0:	57 01       	movw	r10, r14
    19f2:	68 01       	movw	r12, r16
    19f4:	a8 0e       	add	r10, r24
    19f6:	b9 1e       	adc	r11, r25
    19f8:	ca 1e       	adc	r12, r26
    19fa:	db 1e       	adc	r13, r27
    19fc:	a9 01       	movw	r20, r18
    19fe:	33 27       	eor	r19, r19
    1a00:	22 27       	eor	r18, r18
    1a02:	61 96       	adiw	r28, 0x11	; 17
    1a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a06:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a08:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a0c:	61 97       	sbiw	r28, 0x11	; 17
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
    1a16:	4a 1f       	adc	r20, r26
    1a18:	5b 1f       	adc	r21, r27
    1a1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a1e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a20:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a22:	ea 14       	cp	r14, r10
    1a24:	fb 04       	cpc	r15, r11
    1a26:	0c 05       	cpc	r16, r12
    1a28:	1d 05       	cpc	r17, r13
    1a2a:	70 f0       	brcs	.+28     	; 0x1a48 <__umoddi3+0xbce>
    1a2c:	ae 14       	cp	r10, r14
    1a2e:	bf 04       	cpc	r11, r15
    1a30:	c0 06       	cpc	r12, r16
    1a32:	d1 06       	cpc	r13, r17
    1a34:	69 f5       	brne	.+90     	; 0x1a90 <__umoddi3+0xc16>
    1a36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	95 07       	cpc	r25, r21
    1a46:	20 f5       	brcc	.+72     	; 0x1a90 <__umoddi3+0xc16>
    1a48:	da 01       	movw	r26, r20
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	6d a0       	ldd	r6, Y+37	; 0x25
    1a4e:	7e a0       	ldd	r7, Y+38	; 0x26
    1a50:	8f a0       	ldd	r8, Y+39	; 0x27
    1a52:	98 a4       	ldd	r9, Y+40	; 0x28
    1a54:	86 19       	sub	r24, r6
    1a56:	97 09       	sbc	r25, r7
    1a58:	a8 09       	sbc	r26, r8
    1a5a:	b9 09       	sbc	r27, r9
    1a5c:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a5e:	fa a4       	ldd	r15, Y+42	; 0x2a
    1a60:	0b a5       	ldd	r16, Y+43	; 0x2b
    1a62:	1c a5       	ldd	r17, Y+44	; 0x2c
    1a64:	ae 18       	sub	r10, r14
    1a66:	bf 08       	sbc	r11, r15
    1a68:	c0 0a       	sbc	r12, r16
    1a6a:	d1 0a       	sbc	r13, r17
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	ff 24       	eor	r15, r15
    1a70:	87 01       	movw	r16, r14
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	4a 07       	cpc	r20, r26
    1a78:	5b 07       	cpc	r21, r27
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <__umoddi3+0xc0c>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	e2 2e       	mov	r14, r18
    1a80:	f1 2c       	mov	r15, r1
    1a82:	01 2d       	mov	r16, r1
    1a84:	11 2d       	mov	r17, r1
    1a86:	ae 18       	sub	r10, r14
    1a88:	bf 08       	sbc	r11, r15
    1a8a:	c0 0a       	sbc	r12, r16
    1a8c:	d1 0a       	sbc	r13, r17
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__umoddi3+0xc1a>
    1a90:	da 01       	movw	r26, r20
    1a92:	c9 01       	movw	r24, r18
    1a94:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a96:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a98:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a9a:	98 a0       	ldd	r9, Y+32	; 0x20
    1a9c:	68 1a       	sub	r6, r24
    1a9e:	79 0a       	sbc	r7, r25
    1aa0:	8a 0a       	sbc	r8, r26
    1aa2:	9b 0a       	sbc	r9, r27
    1aa4:	49 8d       	ldd	r20, Y+25	; 0x19
    1aa6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1aa8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1aaa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1aac:	4a 19       	sub	r20, r10
    1aae:	5b 09       	sbc	r21, r11
    1ab0:	6c 09       	sbc	r22, r12
    1ab2:	7d 09       	sbc	r23, r13
    1ab4:	5a 01       	movw	r10, r20
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	22 24       	eor	r2, r2
    1aba:	33 24       	eor	r3, r3
    1abc:	21 01       	movw	r4, r2
    1abe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	66 15       	cp	r22, r6
    1ac8:	77 05       	cpc	r23, r7
    1aca:	88 05       	cpc	r24, r8
    1acc:	99 05       	cpc	r25, r9
    1ace:	28 f4       	brcc	.+10     	; 0x1ada <__umoddi3+0xc60>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	28 2e       	mov	r2, r24
    1ad4:	31 2c       	mov	r3, r1
    1ad6:	41 2c       	mov	r4, r1
    1ad8:	51 2c       	mov	r5, r1
    1ada:	86 01       	movw	r16, r12
    1adc:	75 01       	movw	r14, r10
    1ade:	e2 18       	sub	r14, r2
    1ae0:	f3 08       	sbc	r15, r3
    1ae2:	04 09       	sbc	r16, r4
    1ae4:	15 09       	sbc	r17, r5
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	97 01       	movw	r18, r14
    1aea:	66 96       	adiw	r28, 0x16	; 22
    1aec:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aee:	66 97       	sbiw	r28, 0x16	; 22
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__umoddi3+0xc80>
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	44 1f       	adc	r20, r20
    1af8:	55 1f       	adc	r21, r21
    1afa:	0a 94       	dec	r0
    1afc:	d2 f7       	brpl	.-12     	; 0x1af2 <__umoddi3+0xc78>
    1afe:	d4 01       	movw	r26, r8
    1b00:	c3 01       	movw	r24, r6
    1b02:	67 96       	adiw	r28, 0x17	; 23
    1b04:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b06:	67 97       	sbiw	r28, 0x17	; 23
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <__umoddi3+0xc98>
    1b0a:	b6 95       	lsr	r27
    1b0c:	a7 95       	ror	r26
    1b0e:	97 95       	ror	r25
    1b10:	87 95       	ror	r24
    1b12:	0a 94       	dec	r0
    1b14:	d2 f7       	brpl	.-12     	; 0x1b0a <__umoddi3+0xc90>
    1b16:	28 2b       	or	r18, r24
    1b18:	39 2b       	or	r19, r25
    1b1a:	4a 2b       	or	r20, r26
    1b1c:	5b 2b       	or	r21, r27
    1b1e:	29 8b       	std	Y+17, r18	; 0x11
    1b20:	3a 8b       	std	Y+18, r19	; 0x12
    1b22:	4b 8b       	std	Y+19, r20	; 0x13
    1b24:	5c 8b       	std	Y+20, r21	; 0x14
    1b26:	67 96       	adiw	r28, 0x17	; 23
    1b28:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b2a:	67 97       	sbiw	r28, 0x17	; 23
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <__umoddi3+0xcbc>
    1b2e:	16 95       	lsr	r17
    1b30:	07 95       	ror	r16
    1b32:	f7 94       	ror	r15
    1b34:	e7 94       	ror	r14
    1b36:	0a 94       	dec	r0
    1b38:	d2 f7       	brpl	.-12     	; 0x1b2e <__umoddi3+0xcb4>
    1b3a:	ed 8a       	std	Y+21, r14	; 0x15
    1b3c:	fe 8a       	std	Y+22, r15	; 0x16
    1b3e:	0f 8b       	std	Y+23, r16	; 0x17
    1b40:	18 8f       	std	Y+24, r17	; 0x18
    1b42:	3a 89       	ldd	r19, Y+18	; 0x12
    1b44:	4b 89       	ldd	r20, Y+19	; 0x13
    1b46:	5c 89       	ldd	r21, Y+20	; 0x14
    1b48:	6e 2d       	mov	r22, r14
    1b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b50:	c5 5a       	subi	r28, 0xA5	; 165
    1b52:	df 4f       	sbci	r29, 0xFF	; 255
    1b54:	e2 e1       	ldi	r30, 0x12	; 18
    1b56:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__epilogue_restores__>

00001b5a <TIMER_VidInit>:
/************************************************************************************
 *                              Functions Definitions                               *
 ************************************************************************************/

void TIMER_VidInit(const TIM_Config * a_Ptr,uint16_t a_SetInitialValue,uint16_t a_SetCompare)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	28 97       	sbiw	r28, 0x08	; 8
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	7c 83       	std	Y+4, r23	; 0x04
    1b74:	6b 83       	std	Y+3, r22	; 0x03
    1b76:	5e 83       	std	Y+6, r21	; 0x06
    1b78:	4d 83       	std	Y+5, r20	; 0x05

	switch(a_Ptr -> timer_ID)
    1b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7e:	80 81       	ld	r24, Z
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	38 87       	std	Y+8, r19	; 0x08
    1b86:	2f 83       	std	Y+7, r18	; 0x07
    1b88:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8a:	98 85       	ldd	r25, Y+8	; 0x08
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	e1 f1       	breq	.+120    	; 0x1c0a <TIMER_VidInit+0xb0>
    1b92:	2f 81       	ldd	r18, Y+7	; 0x07
    1b94:	38 85       	ldd	r19, Y+8	; 0x08
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <TIMER_VidInit+0x44>
    1b9c:	69 c0       	rjmp	.+210    	; 0x1c70 <TIMER_VidInit+0x116>
    1b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba0:	98 85       	ldd	r25, Y+8	; 0x08
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <TIMER_VidInit+0x4e>
    1ba6:	8d c0       	rjmp	.+282    	; 0x1cc2 <TIMER_VidInit+0x168>
	{

	case TIMER_0:
		TCNT0 = 0x00;
    1ba8:	e2 e5       	ldi	r30, 0x52	; 82
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	10 82       	st	Z, r1
		OCR0  = 0x00;
    1bae:	ec e5       	ldi	r30, 0x5C	; 92
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	10 82       	st	Z, r1
		TCNT0 = a_SetInitialValue;
    1bb4:	e2 e5       	ldi	r30, 0x52	; 82
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	80 83       	st	Z, r24

		if((a_Ptr -> timer_Mode)==NORMAL)
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	81 81       	ldd	r24, Z+1	; 0x01
    1bc2:	88 23       	and	r24, r24
    1bc4:	61 f4       	brne	.+24     	; 0x1bde <TIMER_VidInit+0x84>
		{
			TCCR0  = (1 << FOC0);
    1bc6:	e3 e5       	ldi	r30, 0x53	; 83
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 e8       	ldi	r24, 0x80	; 128
    1bcc:	80 83       	st	Z, r24
			TIMSK |= (1 << TOIE0);
    1bce:	a9 e5       	ldi	r26, 0x59	; 89
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e9 e5       	ldi	r30, 0x59	; 89
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 60       	ori	r24, 0x01	; 1
    1bda:	8c 93       	st	X, r24
    1bdc:	72 c0       	rjmp	.+228    	; 0x1cc2 <TIMER_VidInit+0x168>
		}
		else if((a_Ptr -> timer_Mode)==COMPARE)
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	81 81       	ldd	r24, Z+1	; 0x01
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	09 f0       	breq	.+2      	; 0x1bea <TIMER_VidInit+0x90>
    1be8:	6c c0       	rjmp	.+216    	; 0x1cc2 <TIMER_VidInit+0x168>
		{
			OCR0   = a_SetCompare;
    1bea:	ec e5       	ldi	r30, 0x5C	; 92
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	80 83       	st	Z, r24
			TCCR0  = (1 << FOC0) | (1 << WGM01);
    1bf2:	e3 e5       	ldi	r30, 0x53	; 83
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	88 e8       	ldi	r24, 0x88	; 136
    1bf8:	80 83       	st	Z, r24
			TIMSK |= (1 << OCIE0);
    1bfa:	a9 e5       	ldi	r26, 0x59	; 89
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e9 e5       	ldi	r30, 0x59	; 89
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	82 60       	ori	r24, 0x02	; 2
    1c06:	8c 93       	st	X, r24
    1c08:	5c c0       	rjmp	.+184    	; 0x1cc2 <TIMER_VidInit+0x168>
		}
		break;

	case TIMER_1:
		if((a_Ptr -> timer_Mode)==NORMAL)
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	81 81       	ldd	r24, Z+1	; 0x01
    1c10:	88 23       	and	r24, r24
    1c12:	79 f4       	brne	.+30     	; 0x1c32 <TIMER_VidInit+0xd8>
		{
			TCNT1=a_SetInitialValue;
    1c14:	ec e4       	ldi	r30, 0x4C	; 76
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
			TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    1c20:	ef e4       	ldi	r30, 0x4F	; 79
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	8c e0       	ldi	r24, 0x0C	; 12
    1c26:	80 83       	st	Z, r24
			TIMSK=(1<<TOIE1);
    1c28:	e9 e5       	ldi	r30, 0x59	; 89
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	80 83       	st	Z, r24
    1c30:	48 c0       	rjmp	.+144    	; 0x1cc2 <TIMER_VidInit+0x168>
		}
		else if((a_Ptr -> timer_Mode)==COMPARE)
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <TIMER_VidInit+0xe4>
    1c3c:	42 c0       	rjmp	.+132    	; 0x1cc2 <TIMER_VidInit+0x168>
		{
			OCR1A=a_SetCompare;
    1c3e:	ea e4       	ldi	r30, 0x4A	; 74
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
			TCCR1A  = (1 << FOC1A) | (1 << FOC1B);
    1c4a:	ef e4       	ldi	r30, 0x4F	; 79
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	8c e0       	ldi	r24, 0x0C	; 12
    1c50:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
    1c52:	ae e4       	ldi	r26, 0x4E	; 78
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	ee e4       	ldi	r30, 0x4E	; 78
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 60       	ori	r24, 0x08	; 8
    1c5e:	8c 93       	st	X, r24
			TIMSK  |= (1 << OCIE1A);
    1c60:	a9 e5       	ldi	r26, 0x59	; 89
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e9 e5       	ldi	r30, 0x59	; 89
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 61       	ori	r24, 0x10	; 16
    1c6c:	8c 93       	st	X, r24
    1c6e:	29 c0       	rjmp	.+82     	; 0x1cc2 <TIMER_VidInit+0x168>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2 = a_SetInitialValue;
    1c70:	e4 e4       	ldi	r30, 0x44	; 68
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	80 83       	st	Z, r24
		if((a_Ptr -> timer_Mode)==NORMAL)
    1c78:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7c:	81 81       	ldd	r24, Z+1	; 0x01
    1c7e:	88 23       	and	r24, r24
    1c80:	61 f4       	brne	.+24     	; 0x1c9a <TIMER_VidInit+0x140>
		{
			TCCR2  = (1 << FOC2);
    1c82:	e5 e4       	ldi	r30, 0x45	; 69
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 e8       	ldi	r24, 0x80	; 128
    1c88:	80 83       	st	Z, r24
			TIMSK |= (1 << TOIE2);
    1c8a:	a9 e5       	ldi	r26, 0x59	; 89
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e9 e5       	ldi	r30, 0x59	; 89
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 64       	ori	r24, 0x40	; 64
    1c96:	8c 93       	st	X, r24
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <TIMER_VidInit+0x168>
		}
		else if((a_Ptr -> timer_Mode)==COMPARE)
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	79 f4       	brne	.+30     	; 0x1cc2 <TIMER_VidInit+0x168>
		{
			OCR2   = a_SetCompare;
    1ca4:	e3 e4       	ldi	r30, 0x43	; 67
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	80 83       	st	Z, r24
			TCCR2  = (1 << FOC2) | (1 << WGM21);
    1cac:	e5 e4       	ldi	r30, 0x45	; 69
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	88 e8       	ldi	r24, 0x88	; 136
    1cb2:	80 83       	st	Z, r24
			TIMSK |= (1 << OCIE2);
    1cb4:	a9 e5       	ldi	r26, 0x59	; 89
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 e5       	ldi	r30, 0x59	; 89
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 68       	ori	r24, 0x80	; 128
    1cc0:	8c 93       	st	X, r24

		}	/* END CASE OF TIMER2 */
		break;
	}
}
    1cc2:	28 96       	adiw	r28, 0x08	; 8
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <TIMER_Stop>:


void TIMER_Stop(const TIM_ID a_timerID)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <TIMER_Stop+0x6>
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	89 83       	std	Y+1, r24	; 0x01

	switch(a_timerID)
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3b 83       	std	Y+3, r19	; 0x03
    1cea:	2a 83       	std	Y+2, r18	; 0x02
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	a9 f0       	breq	.+42     	; 0x1d20 <TIMER_Stop+0x4c>
    1cf6:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf8:	3b 81       	ldd	r19, Y+3	; 0x03
    1cfa:	22 30       	cpi	r18, 0x02	; 2
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	e1 f0       	breq	.+56     	; 0x1d38 <TIMER_Stop+0x64>
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	11 f5       	brne	.+68     	; 0x1d4c <TIMER_Stop+0x78>
	{

	case TIMER_0:
		TCCR0  = ( TCCR0 & 0xF8 );
    1d08:	a3 e5       	ldi	r26, 0x53	; 83
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e3 e5       	ldi	r30, 0x53	; 83
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	88 7f       	andi	r24, 0xF8	; 248
    1d14:	8c 93       	st	X, r24
		TCNT1=0;
    1d16:	ec e4       	ldi	r30, 0x4C	; 76
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	11 82       	std	Z+1, r1	; 0x01
    1d1c:	10 82       	st	Z, r1
    1d1e:	16 c0       	rjmp	.+44     	; 0x1d4c <TIMER_Stop+0x78>
		break;
	case TIMER_1:
		TCCR1B = (TCCR1B & 0xF8);
    1d20:	ae e4       	ldi	r26, 0x4E	; 78
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	ee e4       	ldi	r30, 0x4E	; 78
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 7f       	andi	r24, 0xF8	; 248
    1d2c:	8c 93       	st	X, r24
		TCNT1=0;
    1d2e:	ec e4       	ldi	r30, 0x4C	; 76
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	11 82       	std	Z+1, r1	; 0x01
    1d34:	10 82       	st	Z, r1
    1d36:	0a c0       	rjmp	.+20     	; 0x1d4c <TIMER_Stop+0x78>
		break;
	case TIMER_2:
		TCCR2  = ( TCCR2 & 0xF8 );
    1d38:	a5 e4       	ldi	r26, 0x45	; 69
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e5 e4       	ldi	r30, 0x45	; 69
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 7f       	andi	r24, 0xF8	; 248
    1d44:	8c 93       	st	X, r24
		TCNT2=0;
    1d46:	e4 e4       	ldi	r30, 0x44	; 68
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	10 82       	st	Z, r1
		break;
	}
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <TIMER_Start>:

void TIMER_Start(const TIM_Clock TIME_Clk,const TIM_ID TIME_ID)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <TIMER_Start+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <TIMER_Start+0x8>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	6a 83       	std	Y+2, r22	; 0x02

	switch(TIME_ID)
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	3c 83       	std	Y+4, r19	; 0x04
    1d70:	2b 83       	std	Y+3, r18	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	91 05       	cpc	r25, r1
    1d7a:	a1 f0       	breq	.+40     	; 0x1da4 <TIMER_Start+0x4c>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	d1 f0       	breq	.+52     	; 0x1dba <TIMER_Start+0x62>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	01 f5       	brne	.+64     	; 0x1dce <TIMER_Start+0x76>
	{
	case TIMER_0:
		TCCR0  = (TCCR0 & 0xF8) | (TIME_Clk);
    1d8e:	a3 e5       	ldi	r26, 0x53	; 83
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e3 e5       	ldi	r30, 0x53	; 83
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	98 2f       	mov	r25, r24
    1d9a:	98 7f       	andi	r25, 0xF8	; 248
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	89 2b       	or	r24, r25
    1da0:	8c 93       	st	X, r24
    1da2:	15 c0       	rjmp	.+42     	; 0x1dce <TIMER_Start+0x76>
		break;
	case TIMER_1:
		TCCR1B  = (TCCR1B & 0xF8) | (TIME_Clk);
    1da4:	ae e4       	ldi	r26, 0x4E	; 78
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ee e4       	ldi	r30, 0x4E	; 78
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	98 2f       	mov	r25, r24
    1db0:	98 7f       	andi	r25, 0xF8	; 248
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	89 2b       	or	r24, r25
    1db6:	8c 93       	st	X, r24
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <TIMER_Start+0x76>
		break;
	case TIMER_2:
		TCCR2  = (TCCR2 & 0xF8) | (TIME_Clk);
    1dba:	a5 e4       	ldi	r26, 0x45	; 69
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e5 e4       	ldi	r30, 0x45	; 69
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	98 7f       	andi	r25, 0xF8	; 248
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	89 2b       	or	r24, r25
    1dcc:	8c 93       	st	X, r24
		break;
	}
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <TIMER_CLEAR_FLAG>:

void TIMER_CLEAR_FLAG(const TIM_ID a_timerID,const TIM_Mode a_TimerMode)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	28 97       	sbiw	r28, 0x08	; 8
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	6a 83       	std	Y+2, r22	; 0x02
	switch (a_timerID)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	38 87       	std	Y+8, r19	; 0x08
    1dfc:	2f 83       	std	Y+7, r18	; 0x07
    1dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1e00:	98 85       	ldd	r25, Y+8	; 0x08
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 05       	cpc	r25, r1
    1e06:	a1 f1       	breq	.+104    	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
    1e08:	2f 81       	ldd	r18, Y+7	; 0x07
    1e0a:	38 85       	ldd	r19, Y+8	; 0x08
    1e0c:	22 30       	cpi	r18, 0x02	; 2
    1e0e:	31 05       	cpc	r19, r1
    1e10:	d1 f0       	breq	.+52     	; 0x1e46 <TIMER_CLEAR_FLAG+0x6a>
    1e12:	8f 81       	ldd	r24, Y+7	; 0x07
    1e14:	98 85       	ldd	r25, Y+8	; 0x08
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	59 f5       	brne	.+86     	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
	{
	case TIMER_0:
		switch(a_TimerMode)
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3e 83       	std	Y+6, r19	; 0x06
    1e22:	2d 83       	std	Y+5, r18	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	11 f1       	breq	.+68     	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
    1e2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e30:	21 30       	cpi	r18, 0x01	; 1
    1e32:	31 05       	cpc	r19, r1
    1e34:	e9 f4       	brne	.+58     	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
		{
		case NORMAL:
			break;
		case COMPARE:
			Set_Bit(TIFR_R,1);
    1e36:	a8 e5       	ldi	r26, 0x58	; 88
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e8 e5       	ldi	r30, 0x58	; 88
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	82 60       	ori	r24, 0x02	; 2
    1e42:	8c 93       	st	X, r24
    1e44:	15 c0       	rjmp	.+42     	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
		break;
		case TIMER_1:

			break;
		case TIMER_2:
			switch(a_TimerMode)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
    1e58:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5c:	21 30       	cpi	r18, 0x01	; 1
    1e5e:	31 05       	cpc	r19, r1
    1e60:	39 f4       	brne	.+14     	; 0x1e70 <TIMER_CLEAR_FLAG+0x94>
			{
			case NORMAL:
				break;
			case COMPARE:
				Set_Bit(TIFR_R,7);
    1e62:	a8 e5       	ldi	r26, 0x58	; 88
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e8 e5       	ldi	r30, 0x58	; 88
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	8c 93       	st	X, r24

			default:
			{}
			break;
	}
}
    1e70:	28 96       	adiw	r28, 0x08	; 8
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <TIMER_Get_Status>:



uint8_t* TIMER_Get_Status(TIM_Config * a_Ptr, char state)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	61 97       	sbiw	r28, 0x11	; 17
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	6b 83       	std	Y+3, r22	; 0x03
	static uint8_t a_Flag_TIM0=0,a_Flag_TIM2=0;

	if (state==TIME0)
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <TIMER_Get_Status+0x22>
    1ea2:	45 c0       	rjmp	.+138    	; 0x1f2e <TIMER_Get_Status+0xac>
	{
		if(a_Flag_TIM0 == 0)
    1ea4:	80 91 71 01 	lds	r24, 0x0171
    1ea8:	88 23       	and	r24, r24
    1eaa:	41 f4       	brne	.+16     	; 0x1ebc <TIMER_Get_Status+0x3a>
		{
			a_Flag_TIM0=1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	80 93 71 01 	sts	0x0171, r24

			return &a_Flag_TIM0 ;
    1eb2:	21 e7       	ldi	r18, 0x71	; 113
    1eb4:	31 e0       	ldi	r19, 0x01	; 1
    1eb6:	39 8b       	std	Y+17, r19	; 0x11
    1eb8:	28 8b       	std	Y+16, r18	; 0x10
    1eba:	f1 c0       	rjmp	.+482    	; 0x209e <TIMER_Get_Status+0x21c>
		}
		else if (a_Flag_TIM0==1)
    1ebc:	80 91 71 01 	lds	r24, 0x0171
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <TIMER_Get_Status+0x44>
    1ec4:	83 c0       	rjmp	.+262    	; 0x1fcc <TIMER_Get_Status+0x14a>
		{
			switch(a_Ptr->timer_ID)
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <TIMER_Get_Status+0x54>
    1ed4:	7b c0       	rjmp	.+246    	; 0x1fcc <TIMER_Get_Status+0x14a>
			{
			case TIMER_0:
				switch(a_Ptr->timer_Mode)
    1ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eda:	81 81       	ldd	r24, Z+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3f 87       	std	Y+15, r19	; 0x0f
    1ee2:	2e 87       	std	Y+14, r18	; 0x0e
    1ee4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	09 f4       	brne	.+2      	; 0x1eee <TIMER_Get_Status+0x6c>
    1eec:	6f c0       	rjmp	.+222    	; 0x1fcc <TIMER_Get_Status+0x14a>
    1eee:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ef0:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ef2:	21 30       	cpi	r18, 0x01	; 1
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <TIMER_Get_Status+0x78>
    1ef8:	69 c0       	rjmp	.+210    	; 0x1fcc <TIMER_Get_Status+0x14a>
				{
				case NORMAL:
					break;
				case COMPARE:
					if (Get_Bit(TIFR_R,1)==1)
    1efa:	e8 e5       	ldi	r30, 0x58	; 88
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	86 95       	lsr	r24
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	81 70       	andi	r24, 0x01	; 1
    1f08:	90 70       	andi	r25, 0x00	; 0
    1f0a:	88 23       	and	r24, r24
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <TIMER_Get_Status+0x8e>
    1f0e:	5e c0       	rjmp	.+188    	; 0x1fcc <TIMER_Get_Status+0x14a>
					{
						a_Flag_TIM0=2;
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	80 93 71 01 	sts	0x0171, r24
						TIMER_Stop(TIMER_0);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <TIMER_Stop>
						TIMER_CLEAR_FLAG(TIMER_0,COMPARE);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_CLEAR_FLAG>
						return &a_Flag_TIM0 ;
    1f24:	81 e7       	ldi	r24, 0x71	; 113
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	99 8b       	std	Y+17, r25	; 0x11
    1f2a:	88 8b       	std	Y+16, r24	; 0x10
    1f2c:	b8 c0       	rjmp	.+368    	; 0x209e <TIMER_Get_Status+0x21c>
					break;

			}
		}
	}
	else if (state == TIME2)
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <TIMER_Get_Status+0xb4>
    1f34:	4b c0       	rjmp	.+150    	; 0x1fcc <TIMER_Get_Status+0x14a>
	{
		if(a_Flag_TIM2 == 0)
    1f36:	80 91 70 01 	lds	r24, 0x0170
    1f3a:	88 23       	and	r24, r24
    1f3c:	41 f4       	brne	.+16     	; 0x1f4e <TIMER_Get_Status+0xcc>
		{
			a_Flag_TIM2=1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 70 01 	sts	0x0170, r24

			return &a_Flag_TIM2 ;
    1f44:	20 e7       	ldi	r18, 0x70	; 112
    1f46:	31 e0       	ldi	r19, 0x01	; 1
    1f48:	39 8b       	std	Y+17, r19	; 0x11
    1f4a:	28 8b       	std	Y+16, r18	; 0x10
    1f4c:	a8 c0       	rjmp	.+336    	; 0x209e <TIMER_Get_Status+0x21c>
		}
		else if (a_Flag_TIM2==1)
    1f4e:	80 91 70 01 	lds	r24, 0x0170
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	d9 f5       	brne	.+118    	; 0x1fcc <TIMER_Get_Status+0x14a>
		{
			switch(a_Ptr->timer_ID)
    1f56:	e9 81       	ldd	r30, Y+1	; 0x01
    1f58:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5a:	80 81       	ld	r24, Z
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3d 87       	std	Y+13, r19	; 0x0d
    1f62:	2c 87       	std	Y+12, r18	; 0x0c
    1f64:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f66:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	79 f1       	breq	.+94     	; 0x1fcc <TIMER_Get_Status+0x14a>
    1f6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f70:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f72:	22 30       	cpi	r18, 0x02	; 2
    1f74:	31 05       	cpc	r19, r1
    1f76:	51 f5       	brne	.+84     	; 0x1fcc <TIMER_Get_Status+0x14a>
				break;
			case TIMER_1:
				break;

			case TIMER_2:
				switch(a_Ptr->timer_Mode)
    1f78:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7c:	81 81       	ldd	r24, Z+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	3b 87       	std	Y+11, r19	; 0x0b
    1f84:	2a 87       	std	Y+10, r18	; 0x0a
    1f86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	f9 f0       	breq	.+62     	; 0x1fcc <TIMER_Get_Status+0x14a>
    1f8e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f90:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f92:	21 30       	cpi	r18, 0x01	; 1
    1f94:	31 05       	cpc	r19, r1
    1f96:	d1 f4       	brne	.+52     	; 0x1fcc <TIMER_Get_Status+0x14a>
				{
				case NORMAL:
					break;
				case COMPARE:
					if (Get_Bit(TIFR_R,1)==1)
    1f98:	e8 e5       	ldi	r30, 0x58	; 88
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	86 95       	lsr	r24
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	81 70       	andi	r24, 0x01	; 1
    1fa6:	90 70       	andi	r25, 0x00	; 0
    1fa8:	88 23       	and	r24, r24
    1faa:	81 f0       	breq	.+32     	; 0x1fcc <TIMER_Get_Status+0x14a>
					{
						a_Flag_TIM2=2;
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	80 93 70 01 	sts	0x0170, r24
						TIMER_Stop(a_Flag_TIM2);
    1fb2:	80 91 70 01 	lds	r24, 0x0170
    1fb6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <TIMER_Stop>
						TIMER_CLEAR_FLAG(TIMER_2,COMPARE);
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_CLEAR_FLAG>
						return &a_Flag_TIM2 ;
    1fc2:	80 e7       	ldi	r24, 0x70	; 112
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	99 8b       	std	Y+17, r25	; 0x11
    1fc8:	88 8b       	std	Y+16, r24	; 0x10
    1fca:	69 c0       	rjmp	.+210    	; 0x209e <TIMER_Get_Status+0x21c>

			}
		}

	}
	switch(a_Ptr->timer_ID)
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	80 81       	ld	r24, Z
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	39 87       	std	Y+9, r19	; 0x09
    1fd8:	28 87       	std	Y+8, r18	; 0x08
    1fda:	88 85       	ldd	r24, Y+8	; 0x08
    1fdc:	99 85       	ldd	r25, Y+9	; 0x09
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <TIMER_Get_Status+0x164>
    1fe4:	5a c0       	rjmp	.+180    	; 0x209a <TIMER_Get_Status+0x218>
    1fe6:	28 85       	ldd	r18, Y+8	; 0x08
    1fe8:	39 85       	ldd	r19, Y+9	; 0x09
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	71 f1       	breq	.+92     	; 0x204c <TIMER_Get_Status+0x1ca>
    1ff0:	88 85       	ldd	r24, Y+8	; 0x08
    1ff2:	99 85       	ldd	r25, Y+9	; 0x09
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <TIMER_Get_Status+0x178>
    1ff8:	50 c0       	rjmp	.+160    	; 0x209a <TIMER_Get_Status+0x218>
	{
	case TIMER_0:
		switch(a_Ptr->timer_Mode)
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	81 81       	ldd	r24, Z+1	; 0x01
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3f 83       	std	Y+7, r19	; 0x07
    2006:	2e 83       	std	Y+6, r18	; 0x06
    2008:	8e 81       	ldd	r24, Y+6	; 0x06
    200a:	9f 81       	ldd	r25, Y+7	; 0x07
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	09 f4       	brne	.+2      	; 0x2012 <TIMER_Get_Status+0x190>
    2010:	44 c0       	rjmp	.+136    	; 0x209a <TIMER_Get_Status+0x218>
    2012:	2e 81       	ldd	r18, Y+6	; 0x06
    2014:	3f 81       	ldd	r19, Y+7	; 0x07
    2016:	21 30       	cpi	r18, 0x01	; 1
    2018:	31 05       	cpc	r19, r1
    201a:	09 f0       	breq	.+2      	; 0x201e <TIMER_Get_Status+0x19c>
    201c:	3e c0       	rjmp	.+124    	; 0x209a <TIMER_Get_Status+0x218>
		{
		case NORMAL:
			break;
		case COMPARE:
			if (Get_Bit(TIFR_R,7)==1)
    201e:	e8 e5       	ldi	r30, 0x58	; 88
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	88 1f       	adc	r24, r24
    2026:	88 27       	eor	r24, r24
    2028:	88 1f       	adc	r24, r24
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	b1 f5       	brne	.+108    	; 0x209a <TIMER_Get_Status+0x218>
			{
				a_Flag_TIM0=2;
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	80 93 71 01 	sts	0x0171, r24
				TIMER_Stop(TIMER_0);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <TIMER_Stop>
				TIMER_CLEAR_FLAG(TIMER_0,COMPARE);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_CLEAR_FLAG>
				return &a_Flag_TIM0 ;
    2042:	81 e7       	ldi	r24, 0x71	; 113
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	99 8b       	std	Y+17, r25	; 0x11
    2048:	88 8b       	std	Y+16, r24	; 0x10
    204a:	29 c0       	rjmp	.+82     	; 0x209e <TIMER_Get_Status+0x21c>
		}
		break;
		case TIMER_1:
			break;
		case TIMER_2:
			switch(a_Ptr->timer_Mode)
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	3d 83       	std	Y+5, r19	; 0x05
    2058:	2c 83       	std	Y+4, r18	; 0x04
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	9d 81       	ldd	r25, Y+5	; 0x05
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	e1 f0       	breq	.+56     	; 0x209a <TIMER_Get_Status+0x218>
    2062:	2c 81       	ldd	r18, Y+4	; 0x04
    2064:	3d 81       	ldd	r19, Y+5	; 0x05
    2066:	21 30       	cpi	r18, 0x01	; 1
    2068:	31 05       	cpc	r19, r1
    206a:	b9 f4       	brne	.+46     	; 0x209a <TIMER_Get_Status+0x218>
			{
			case NORMAL:
				break;
			case COMPARE:
				if (Get_Bit(TIFR_R,7)==1)
    206c:	e8 e5       	ldi	r30, 0x58	; 88
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 1f       	adc	r24, r24
    2074:	88 27       	eor	r24, r24
    2076:	88 1f       	adc	r24, r24
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	79 f4       	brne	.+30     	; 0x209a <TIMER_Get_Status+0x218>
				{
					a_Flag_TIM2=2;
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	80 93 70 01 	sts	0x0170, r24
					TIMER_Stop(TIMER_2);
    2082:	82 e0       	ldi	r24, 0x02	; 2
    2084:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <TIMER_Stop>
					TIMER_CLEAR_FLAG(TIMER_2,COMPARE);
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_CLEAR_FLAG>
					return &a_Flag_TIM2 ;
    2090:	80 e7       	ldi	r24, 0x70	; 112
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	99 8b       	std	Y+17, r25	; 0x11
    2096:	88 8b       	std	Y+16, r24	; 0x10
    2098:	02 c0       	rjmp	.+4      	; 0x209e <TIMER_Get_Status+0x21c>
			}
			break;
			default :
				break;
	}
	return 0;
    209a:	19 8a       	std	Y+17, r1	; 0x11
    209c:	18 8a       	std	Y+16, r1	; 0x10
    209e:	88 89       	ldd	r24, Y+16	; 0x10
    20a0:	99 89       	ldd	r25, Y+17	; 0x11
}
    20a2:	61 96       	adiw	r28, 0x11	; 17
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <DIO_setPortDirection>:
 */

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <DIO_setPortDirection+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <DIO_setPortDirection+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    20c6:	19 82       	std	Y+1, r1	; 0x01
	//Check for the ports if it is between 0 to 3
    switch (PortID)
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	3d 83       	std	Y+5, r19	; 0x05
    20d0:	2c 83       	std	Y+4, r18	; 0x04
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	91 05       	cpc	r25, r1
    20da:	d1 f0       	breq	.+52     	; 0x2110 <DIO_setPortDirection+0x5c>
    20dc:	2c 81       	ldd	r18, Y+4	; 0x04
    20de:	3d 81       	ldd	r19, Y+5	; 0x05
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <DIO_setPortDirection+0x3c>
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	61 f0       	breq	.+24     	; 0x2106 <DIO_setPortDirection+0x52>
    20ee:	1f c0       	rjmp	.+62     	; 0x212e <DIO_setPortDirection+0x7a>
    20f0:	2c 81       	ldd	r18, Y+4	; 0x04
    20f2:	3d 81       	ldd	r19, Y+5	; 0x05
    20f4:	22 30       	cpi	r18, 0x02	; 2
    20f6:	31 05       	cpc	r19, r1
    20f8:	81 f0       	breq	.+32     	; 0x211a <DIO_setPortDirection+0x66>
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	83 30       	cpi	r24, 0x03	; 3
    2100:	91 05       	cpc	r25, r1
    2102:	81 f0       	breq	.+32     	; 0x2124 <DIO_setPortDirection+0x70>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <DIO_setPortDirection+0x7a>
    {
    case PORTa :
        DDRA = PortDirection;
    2106:	ea e3       	ldi	r30, 0x3A	; 58
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	80 83       	st	Z, r24
    210e:	11 c0       	rjmp	.+34     	; 0x2132 <DIO_setPortDirection+0x7e>
        break;
    case PORTb :
        DDRB = PortDirection;
    2110:	e7 e3       	ldi	r30, 0x37	; 55
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	80 83       	st	Z, r24
    2118:	0c c0       	rjmp	.+24     	; 0x2132 <DIO_setPortDirection+0x7e>
        break;
    case PORTc :
        DDRC = PortDirection;
    211a:	e4 e3       	ldi	r30, 0x34	; 52
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	80 83       	st	Z, r24
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <DIO_setPortDirection+0x7e>
        break;
    case PORTd :
        DDRD = PortDirection;
    2124:	e1 e3       	ldi	r30, 0x31	; 49
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	80 83       	st	Z, r24
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <DIO_setPortDirection+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPortDirection
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <DIO_setPinDirection>:

/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	28 97       	sbiw	r28, 0x08	; 8
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	8a 83       	std	Y+2, r24	; 0x02
    215a:	6b 83       	std	Y+3, r22	; 0x03
    215c:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    215e:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	88 30       	cpi	r24, 0x08	; 8
    2164:	08 f0       	brcs	.+2      	; 0x2168 <DIO_setPinDirection+0x24>
    2166:	f4 c0       	rjmp	.+488    	; 0x2350 <DIO_setPinDirection+0x20c>
	{
		if (DIO_u8_OUTPUT==PinDirection)
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	09 f0       	breq	.+2      	; 0x2170 <DIO_setPinDirection+0x2c>
    216e:	72 c0       	rjmp	.+228    	; 0x2254 <DIO_setPinDirection+0x110>
		{
			switch (PortID)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	38 87       	std	Y+8, r19	; 0x08
    2178:	2f 83       	std	Y+7, r18	; 0x07
    217a:	8f 81       	ldd	r24, Y+7	; 0x07
    217c:	98 85       	ldd	r25, Y+8	; 0x08
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	91 05       	cpc	r25, r1
    2182:	49 f1       	breq	.+82     	; 0x21d6 <DIO_setPinDirection+0x92>
    2184:	2f 81       	ldd	r18, Y+7	; 0x07
    2186:	38 85       	ldd	r19, Y+8	; 0x08
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	2c f4       	brge	.+10     	; 0x2198 <DIO_setPinDirection+0x54>
    218e:	8f 81       	ldd	r24, Y+7	; 0x07
    2190:	98 85       	ldd	r25, Y+8	; 0x08
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	61 f0       	breq	.+24     	; 0x21ae <DIO_setPinDirection+0x6a>
    2196:	5b c0       	rjmp	.+182    	; 0x224e <DIO_setPinDirection+0x10a>
    2198:	2f 81       	ldd	r18, Y+7	; 0x07
    219a:	38 85       	ldd	r19, Y+8	; 0x08
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	71 f1       	breq	.+92     	; 0x21fe <DIO_setPinDirection+0xba>
    21a2:	8f 81       	ldd	r24, Y+7	; 0x07
    21a4:	98 85       	ldd	r25, Y+8	; 0x08
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	e9 f1       	breq	.+122    	; 0x2226 <DIO_setPinDirection+0xe2>
    21ac:	50 c0       	rjmp	.+160    	; 0x224e <DIO_setPinDirection+0x10a>
			{
			case PORTa :
				Set_Bit(DDRA, PinNumber);
    21ae:	aa e3       	ldi	r26, 0x3A	; 58
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ea e3       	ldi	r30, 0x3A	; 58
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <DIO_setPinDirection+0x88>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <DIO_setPinDirection+0x84>
    21d0:	84 2b       	or	r24, r20
    21d2:	8c 93       	st	X, r24
    21d4:	bf c0       	rjmp	.+382    	; 0x2354 <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				Set_Bit(DDRB, PinNumber);
    21d6:	a7 e3       	ldi	r26, 0x37	; 55
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e7 e3       	ldi	r30, 0x37	; 55
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	48 2f       	mov	r20, r24
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <DIO_setPinDirection+0xb0>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <DIO_setPinDirection+0xac>
    21f8:	84 2b       	or	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	ab c0       	rjmp	.+342    	; 0x2354 <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				Set_Bit(DDRC, PinNumber);
    21fe:	a4 e3       	ldi	r26, 0x34	; 52
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e4 e3       	ldi	r30, 0x34	; 52
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <DIO_setPinDirection+0xd8>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <DIO_setPinDirection+0xd4>
    2220:	84 2b       	or	r24, r20
    2222:	8c 93       	st	X, r24
    2224:	97 c0       	rjmp	.+302    	; 0x2354 <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				Set_Bit(DDRD, PinNumber);
    2226:	a1 e3       	ldi	r26, 0x31	; 49
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e1 e3       	ldi	r30, 0x31	; 49
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	48 2f       	mov	r20, r24
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	02 2e       	mov	r0, r18
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <DIO_setPinDirection+0x100>
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	0a 94       	dec	r0
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <DIO_setPinDirection+0xfc>
    2248:	84 2b       	or	r24, r20
    224a:	8c 93       	st	X, r24
    224c:	83 c0       	rjmp	.+262    	; 0x2354 <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	80 c0       	rjmp	.+256    	; 0x2354 <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT

		else if (DIO_u8_INPUT == PinDirection)
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	88 23       	and	r24, r24
    2258:	09 f0       	breq	.+2      	; 0x225c <DIO_setPinDirection+0x118>
    225a:	77 c0       	rjmp	.+238    	; 0x234a <DIO_setPinDirection+0x206>
		{
			switch (PortID)
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	3e 83       	std	Y+6, r19	; 0x06
    2264:	2d 83       	std	Y+5, r18	; 0x05
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	91 05       	cpc	r25, r1
    226e:	59 f1       	breq	.+86     	; 0x22c6 <DIO_setPinDirection+0x182>
    2270:	2d 81       	ldd	r18, Y+5	; 0x05
    2272:	3e 81       	ldd	r19, Y+6	; 0x06
    2274:	22 30       	cpi	r18, 0x02	; 2
    2276:	31 05       	cpc	r19, r1
    2278:	2c f4       	brge	.+10     	; 0x2284 <DIO_setPinDirection+0x140>
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f0       	breq	.+26     	; 0x229c <DIO_setPinDirection+0x158>
    2282:	60 c0       	rjmp	.+192    	; 0x2344 <DIO_setPinDirection+0x200>
    2284:	2d 81       	ldd	r18, Y+5	; 0x05
    2286:	3e 81       	ldd	r19, Y+6	; 0x06
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	89 f1       	breq	.+98     	; 0x22f0 <DIO_setPinDirection+0x1ac>
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <DIO_setPinDirection+0x156>
    2298:	40 c0       	rjmp	.+128    	; 0x231a <DIO_setPinDirection+0x1d6>
    229a:	54 c0       	rjmp	.+168    	; 0x2344 <DIO_setPinDirection+0x200>
			{
			case PORTa :
				Clr_Bit(DDRA, PinNumber);
    229c:	aa e3       	ldi	r26, 0x3A	; 58
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e3       	ldi	r30, 0x3A	; 58
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_setPinDirection+0x176>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <DIO_setPinDirection+0x172>
    22be:	80 95       	com	r24
    22c0:	84 23       	and	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	47 c0       	rjmp	.+142    	; 0x2354 <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				Clr_Bit(DDRB, PinNumber);
    22c6:	a7 e3       	ldi	r26, 0x37	; 55
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e7 e3       	ldi	r30, 0x37	; 55
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	48 2f       	mov	r20, r24
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_setPinDirection+0x1a0>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_setPinDirection+0x19c>
    22e8:	80 95       	com	r24
    22ea:	84 23       	and	r24, r20
    22ec:	8c 93       	st	X, r24
    22ee:	32 c0       	rjmp	.+100    	; 0x2354 <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				Clr_Bit(DDRC, PinNumber);
    22f0:	a4 e3       	ldi	r26, 0x34	; 52
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e4 e3       	ldi	r30, 0x34	; 52
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 2e       	mov	r0, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <DIO_setPinDirection+0x1ca>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	0a 94       	dec	r0
    2310:	e2 f7       	brpl	.-8      	; 0x230a <DIO_setPinDirection+0x1c6>
    2312:	80 95       	com	r24
    2314:	84 23       	and	r24, r20
    2316:	8c 93       	st	X, r24
    2318:	1d c0       	rjmp	.+58     	; 0x2354 <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				Clr_Bit(DDRD, PinNumber);
    231a:	a1 e3       	ldi	r26, 0x31	; 49
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e1 e3       	ldi	r30, 0x31	; 49
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <DIO_setPinDirection+0x1f4>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <DIO_setPinDirection+0x1f0>
    233c:	80 95       	com	r24
    233e:	84 23       	and	r24, r20
    2340:	8c 93       	st	X, r24
    2342:	08 c0       	rjmp	.+16     	; 0x2354 <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of ELSE IF that check for the direction if it is INPUT
		else
		{
			u8_ERROR_STAT = ERROR_NOK;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <DIO_setPinDirection+0x210>
		} //END OF ELSE
	}	  //END of IF That checking the port and pin number
	else
	{
		u8_ERROR_STAT = ERROR_NOK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01

	}	  //END of ELSE
	return u8_ERROR_STAT;
    2354:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPinDirection
    2356:	28 96       	adiw	r28, 0x08	; 8
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <DIO_writePortValue>:

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	00 d0       	rcall	.+0      	; 0x236e <DIO_writePortValue+0x6>
    236e:	00 d0       	rcall	.+0      	; 0x2370 <DIO_writePortValue+0x8>
    2370:	0f 92       	push	r0
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	8a 83       	std	Y+2, r24	; 0x02
    2378:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    237a:	19 82       	std	Y+1, r1	; 0x01
    switch (PortID)
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	3d 83       	std	Y+5, r19	; 0x05
    2384:	2c 83       	std	Y+4, r18	; 0x04
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	91 05       	cpc	r25, r1
    238e:	d1 f0       	breq	.+52     	; 0x23c4 <DIO_writePortValue+0x5c>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	2c f4       	brge	.+10     	; 0x23a4 <DIO_writePortValue+0x3c>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 f0       	breq	.+24     	; 0x23ba <DIO_writePortValue+0x52>
    23a2:	1f c0       	rjmp	.+62     	; 0x23e2 <DIO_writePortValue+0x7a>
    23a4:	2c 81       	ldd	r18, Y+4	; 0x04
    23a6:	3d 81       	ldd	r19, Y+5	; 0x05
    23a8:	22 30       	cpi	r18, 0x02	; 2
    23aa:	31 05       	cpc	r19, r1
    23ac:	81 f0       	breq	.+32     	; 0x23ce <DIO_writePortValue+0x66>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	83 30       	cpi	r24, 0x03	; 3
    23b4:	91 05       	cpc	r25, r1
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <DIO_writePortValue+0x70>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <DIO_writePortValue+0x7a>
    {
    case PORTa :
        PORTA = PortValue;
    23ba:	eb e3       	ldi	r30, 0x3B	; 59
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	80 83       	st	Z, r24
    23c2:	11 c0       	rjmp	.+34     	; 0x23e6 <DIO_writePortValue+0x7e>
        break;
    case PORTb :
        PORTB = PortValue;
    23c4:	e8 e3       	ldi	r30, 0x38	; 56
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	80 83       	st	Z, r24
    23cc:	0c c0       	rjmp	.+24     	; 0x23e6 <DIO_writePortValue+0x7e>
        break;
    case PORTc :
        PORTC = PortValue;
    23ce:	e5 e3       	ldi	r30, 0x35	; 53
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	80 83       	st	Z, r24
    23d6:	07 c0       	rjmp	.+14     	; 0x23e6 <DIO_writePortValue+0x7e>
        break;
    case PORTd :
        PORTD = PortValue;
    23d8:	e2 e3       	ldi	r30, 0x32	; 50
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	80 83       	st	Z, r24
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <DIO_writePortValue+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_writePortValue
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <DIO_writePinValue>:

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	28 97       	sbiw	r28, 0x08	; 8
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	6b 83       	std	Y+3, r22	; 0x03
    2410:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    2412:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
	if ( (PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	88 30       	cpi	r24, 0x08	; 8
    2418:	08 f0       	brcs	.+2      	; 0x241c <DIO_writePinValue+0x24>
    241a:	f4 c0       	rjmp	.+488    	; 0x2604 <DIO_writePinValue+0x20c>
	{
		if (DIO_u8_HIGH==PinDirection)
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	09 f0       	breq	.+2      	; 0x2424 <DIO_writePinValue+0x2c>
    2422:	72 c0       	rjmp	.+228    	; 0x2508 <DIO_writePinValue+0x110>
		{
			switch (PortID)
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	38 87       	std	Y+8, r19	; 0x08
    242c:	2f 83       	std	Y+7, r18	; 0x07
    242e:	8f 81       	ldd	r24, Y+7	; 0x07
    2430:	98 85       	ldd	r25, Y+8	; 0x08
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	91 05       	cpc	r25, r1
    2436:	49 f1       	breq	.+82     	; 0x248a <DIO_writePinValue+0x92>
    2438:	2f 81       	ldd	r18, Y+7	; 0x07
    243a:	38 85       	ldd	r19, Y+8	; 0x08
    243c:	22 30       	cpi	r18, 0x02	; 2
    243e:	31 05       	cpc	r19, r1
    2440:	2c f4       	brge	.+10     	; 0x244c <DIO_writePinValue+0x54>
    2442:	8f 81       	ldd	r24, Y+7	; 0x07
    2444:	98 85       	ldd	r25, Y+8	; 0x08
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	61 f0       	breq	.+24     	; 0x2462 <DIO_writePinValue+0x6a>
    244a:	5b c0       	rjmp	.+182    	; 0x2502 <DIO_writePinValue+0x10a>
    244c:	2f 81       	ldd	r18, Y+7	; 0x07
    244e:	38 85       	ldd	r19, Y+8	; 0x08
    2450:	22 30       	cpi	r18, 0x02	; 2
    2452:	31 05       	cpc	r19, r1
    2454:	71 f1       	breq	.+92     	; 0x24b2 <DIO_writePinValue+0xba>
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	91 05       	cpc	r25, r1
    245e:	e9 f1       	breq	.+122    	; 0x24da <DIO_writePinValue+0xe2>
    2460:	50 c0       	rjmp	.+160    	; 0x2502 <DIO_writePinValue+0x10a>
			{
			case PORTa :
				Set_Bit(PORTA, PinNumber);
    2462:	ab e3       	ldi	r26, 0x3B	; 59
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	eb e3       	ldi	r30, 0x3B	; 59
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <DIO_writePinValue+0x88>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <DIO_writePinValue+0x84>
    2484:	84 2b       	or	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	bf c0       	rjmp	.+382    	; 0x2608 <DIO_writePinValue+0x210>
				break;
			case PORTb :
				Set_Bit(PORTB, PinNumber);
    248a:	a8 e3       	ldi	r26, 0x38	; 56
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e8 e3       	ldi	r30, 0x38	; 56
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <DIO_writePinValue+0xb0>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <DIO_writePinValue+0xac>
    24ac:	84 2b       	or	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	ab c0       	rjmp	.+342    	; 0x2608 <DIO_writePinValue+0x210>
				break;
			case PORTc :
				Set_Bit(PORTC, PinNumber);
    24b2:	a5 e3       	ldi	r26, 0x35	; 53
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e5 e3       	ldi	r30, 0x35	; 53
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_writePinValue+0xd8>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_writePinValue+0xd4>
    24d4:	84 2b       	or	r24, r20
    24d6:	8c 93       	st	X, r24
    24d8:	97 c0       	rjmp	.+302    	; 0x2608 <DIO_writePinValue+0x210>
				break;
			case PORTd :
				Set_Bit(PORTD, PinNumber);
    24da:	a2 e3       	ldi	r26, 0x32	; 50
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e2 e3       	ldi	r30, 0x32	; 50
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_writePinValue+0x100>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <DIO_writePinValue+0xfc>
    24fc:	84 2b       	or	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	83 c0       	rjmp	.+262    	; 0x2608 <DIO_writePinValue+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	80 c0       	rjmp	.+256    	; 0x2608 <DIO_writePinValue+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT
		else if (DIO_u8_LOW==PinDirection)
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	88 23       	and	r24, r24
    250c:	09 f0       	breq	.+2      	; 0x2510 <DIO_writePinValue+0x118>
    250e:	77 c0       	rjmp	.+238    	; 0x25fe <DIO_writePinValue+0x206>
		{
			switch (PortID)
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	3e 83       	std	Y+6, r19	; 0x06
    2518:	2d 83       	std	Y+5, r18	; 0x05
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	91 05       	cpc	r25, r1
    2522:	59 f1       	breq	.+86     	; 0x257a <DIO_writePinValue+0x182>
    2524:	2d 81       	ldd	r18, Y+5	; 0x05
    2526:	3e 81       	ldd	r19, Y+6	; 0x06
    2528:	22 30       	cpi	r18, 0x02	; 2
    252a:	31 05       	cpc	r19, r1
    252c:	2c f4       	brge	.+10     	; 0x2538 <DIO_writePinValue+0x140>
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f0       	breq	.+26     	; 0x2550 <DIO_writePinValue+0x158>
    2536:	60 c0       	rjmp	.+192    	; 0x25f8 <DIO_writePinValue+0x200>
    2538:	2d 81       	ldd	r18, Y+5	; 0x05
    253a:	3e 81       	ldd	r19, Y+6	; 0x06
    253c:	22 30       	cpi	r18, 0x02	; 2
    253e:	31 05       	cpc	r19, r1
    2540:	89 f1       	breq	.+98     	; 0x25a4 <DIO_writePinValue+0x1ac>
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	83 30       	cpi	r24, 0x03	; 3
    2548:	91 05       	cpc	r25, r1
    254a:	09 f4       	brne	.+2      	; 0x254e <DIO_writePinValue+0x156>
    254c:	40 c0       	rjmp	.+128    	; 0x25ce <DIO_writePinValue+0x1d6>
    254e:	54 c0       	rjmp	.+168    	; 0x25f8 <DIO_writePinValue+0x200>
			{
			case PORTa :
				Clr_Bit(PORTA, PinNumber);
    2550:	ab e3       	ldi	r26, 0x3B	; 59
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	eb e3       	ldi	r30, 0x3B	; 59
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	48 2f       	mov	r20, r24
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	02 2e       	mov	r0, r18
    2568:	02 c0       	rjmp	.+4      	; 0x256e <DIO_writePinValue+0x176>
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	0a 94       	dec	r0
    2570:	e2 f7       	brpl	.-8      	; 0x256a <DIO_writePinValue+0x172>
    2572:	80 95       	com	r24
    2574:	84 23       	and	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	47 c0       	rjmp	.+142    	; 0x2608 <DIO_writePinValue+0x210>
				break;
			case PORTb :
				Clr_Bit(PORTB, PinNumber);
    257a:	a8 e3       	ldi	r26, 0x38	; 56
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e8 e3       	ldi	r30, 0x38	; 56
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	48 2f       	mov	r20, r24
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <DIO_writePinValue+0x1a0>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <DIO_writePinValue+0x19c>
    259c:	80 95       	com	r24
    259e:	84 23       	and	r24, r20
    25a0:	8c 93       	st	X, r24
    25a2:	32 c0       	rjmp	.+100    	; 0x2608 <DIO_writePinValue+0x210>
				break;
			case PORTc :
				Clr_Bit(PORTC, PinNumber);
    25a4:	a5 e3       	ldi	r26, 0x35	; 53
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e5 e3       	ldi	r30, 0x35	; 53
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <DIO_writePinValue+0x1ca>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <DIO_writePinValue+0x1c6>
    25c6:	80 95       	com	r24
    25c8:	84 23       	and	r24, r20
    25ca:	8c 93       	st	X, r24
    25cc:	1d c0       	rjmp	.+58     	; 0x2608 <DIO_writePinValue+0x210>
				break;
			case PORTd :
				Clr_Bit(PORTD, PinNumber);
    25ce:	a2 e3       	ldi	r26, 0x32	; 50
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e2 e3       	ldi	r30, 0x32	; 50
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	48 2f       	mov	r20, r24
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	02 2e       	mov	r0, r18
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <DIO_writePinValue+0x1f4>
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	0a 94       	dec	r0
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <DIO_writePinValue+0x1f0>
    25f0:	80 95       	com	r24
    25f2:	84 23       	and	r24, r20
    25f4:	8c 93       	st	X, r24
    25f6:	08 c0       	rjmp	.+16     	; 0x2608 <DIO_writePinValue+0x210>
				break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <DIO_writePinValue+0x210>
			} //END of SWITCH
		} // END OF ELSE IF
		else
        {
            /*INVALID PIN DIRECTION*/
			u8_ERROR_STAT = ERROR_NOK;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <DIO_writePinValue+0x210>
		} //END OF ELSE
	}	  //END OF IF
	else
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	89 83       	std	Y+1, r24	; 0x01
	}	  //END of ELSE
	return u8_ERROR_STAT ;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_writePinValue
    260a:	28 96       	adiw	r28, 0x08	; 8
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <DIO_readPort>:

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <DIO_readPort+0x6>
    2622:	00 d0       	rcall	.+0      	; 0x2624 <DIO_readPort+0x8>
    2624:	00 d0       	rcall	.+0      	; 0x2626 <DIO_readPort+0xa>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	8a 83       	std	Y+2, r24	; 0x02
    262c:	7c 83       	std	Y+4, r23	; 0x04
    262e:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    2630:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	19 f4       	brne	.+6      	; 0x2640 <DIO_readPort+0x24>
    {
        u8_ERROR_STAT = ERROR_NOK;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	3d c0       	rjmp	.+122    	; 0x26ba <DIO_readPort+0x9e>
	}
	else
	{
    switch (PortID)
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	3e 83       	std	Y+6, r19	; 0x06
    2648:	2d 83       	std	Y+5, r18	; 0x05
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	e1 f0       	breq	.+56     	; 0x268c <DIO_readPort+0x70>
    2654:	2d 81       	ldd	r18, Y+5	; 0x05
    2656:	3e 81       	ldd	r19, Y+6	; 0x06
    2658:	22 30       	cpi	r18, 0x02	; 2
    265a:	31 05       	cpc	r19, r1
    265c:	2c f4       	brge	.+10     	; 0x2668 <DIO_readPort+0x4c>
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	61 f0       	breq	.+24     	; 0x267e <DIO_readPort+0x62>
    2666:	27 c0       	rjmp	.+78     	; 0x26b6 <DIO_readPort+0x9a>
    2668:	2d 81       	ldd	r18, Y+5	; 0x05
    266a:	3e 81       	ldd	r19, Y+6	; 0x06
    266c:	22 30       	cpi	r18, 0x02	; 2
    266e:	31 05       	cpc	r19, r1
    2670:	a1 f0       	breq	.+40     	; 0x269a <DIO_readPort+0x7e>
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	91 05       	cpc	r25, r1
    267a:	b1 f0       	breq	.+44     	; 0x26a8 <DIO_readPort+0x8c>
    267c:	1c c0       	rjmp	.+56     	; 0x26b6 <DIO_readPort+0x9a>
    {
    case PORTa :
        *(PortState) = PINA;
    267e:	e9 e3       	ldi	r30, 0x39	; 57
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	eb 81       	ldd	r30, Y+3	; 0x03
    2686:	fc 81       	ldd	r31, Y+4	; 0x04
    2688:	80 83       	st	Z, r24
    268a:	17 c0       	rjmp	.+46     	; 0x26ba <DIO_readPort+0x9e>
        break;
    case PORTb :
        *(PortState) = PINB;
    268c:	e6 e3       	ldi	r30, 0x36	; 54
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	eb 81       	ldd	r30, Y+3	; 0x03
    2694:	fc 81       	ldd	r31, Y+4	; 0x04
    2696:	80 83       	st	Z, r24
    2698:	10 c0       	rjmp	.+32     	; 0x26ba <DIO_readPort+0x9e>
        break;
    case PORTc :
        *(PortState) = PINC;
    269a:	e3 e3       	ldi	r30, 0x33	; 51
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	eb 81       	ldd	r30, Y+3	; 0x03
    26a2:	fc 81       	ldd	r31, Y+4	; 0x04
    26a4:	80 83       	st	Z, r24
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <DIO_readPort+0x9e>
        break;
    case PORTd :
        *(PortState) = PIND;
    26a8:	e0 e3       	ldi	r30, 0x30	; 48
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	eb 81       	ldd	r30, Y+3	; 0x03
    26b0:	fc 81       	ldd	r31, Y+4	; 0x04
    26b2:	80 83       	st	Z, r24
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <DIO_readPort+0x9e>
        break;
    default:
            /*INVALID PORT NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_readPort
    26bc:	26 96       	adiw	r28, 0x06	; 6
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <DIO_readPin>:

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	27 97       	sbiw	r28, 0x07	; 7
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	8a 83       	std	Y+2, r24	; 0x02
    26e4:	6b 83       	std	Y+3, r22	; 0x03
    26e6:	5d 83       	std	Y+5, r21	; 0x05
    26e8:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    26ea:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	9d 81       	ldd	r25, Y+5	; 0x05
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	19 f4       	brne	.+6      	; 0x26fa <DIO_readPin+0x2c>
    {
        u8_ERROR_STAT = ERROR_NOK;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	7a c0       	rjmp	.+244    	; 0x27ee <DIO_readPin+0x120>
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	88 30       	cpi	r24, 0x08	; 8
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <DIO_readPin+0x34>
    2700:	74 c0       	rjmp	.+232    	; 0x27ea <DIO_readPin+0x11c>
        {
            switch (PortID)
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	3f 83       	std	Y+7, r19	; 0x07
    270a:	2e 83       	std	Y+6, r18	; 0x06
    270c:	4e 81       	ldd	r20, Y+6	; 0x06
    270e:	5f 81       	ldd	r21, Y+7	; 0x07
    2710:	41 30       	cpi	r20, 0x01	; 1
    2712:	51 05       	cpc	r21, r1
    2714:	59 f1       	breq	.+86     	; 0x276c <DIO_readPin+0x9e>
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	9f 81       	ldd	r25, Y+7	; 0x07
    271a:	82 30       	cpi	r24, 0x02	; 2
    271c:	91 05       	cpc	r25, r1
    271e:	34 f4       	brge	.+12     	; 0x272c <DIO_readPin+0x5e>
    2720:	2e 81       	ldd	r18, Y+6	; 0x06
    2722:	3f 81       	ldd	r19, Y+7	; 0x07
    2724:	21 15       	cp	r18, r1
    2726:	31 05       	cpc	r19, r1
    2728:	69 f0       	breq	.+26     	; 0x2744 <DIO_readPin+0x76>
    272a:	5c c0       	rjmp	.+184    	; 0x27e4 <DIO_readPin+0x116>
    272c:	4e 81       	ldd	r20, Y+6	; 0x06
    272e:	5f 81       	ldd	r21, Y+7	; 0x07
    2730:	42 30       	cpi	r20, 0x02	; 2
    2732:	51 05       	cpc	r21, r1
    2734:	79 f1       	breq	.+94     	; 0x2794 <DIO_readPin+0xc6>
    2736:	8e 81       	ldd	r24, Y+6	; 0x06
    2738:	9f 81       	ldd	r25, Y+7	; 0x07
    273a:	83 30       	cpi	r24, 0x03	; 3
    273c:	91 05       	cpc	r25, r1
    273e:	09 f4       	brne	.+2      	; 0x2742 <DIO_readPin+0x74>
    2740:	3d c0       	rjmp	.+122    	; 0x27bc <DIO_readPin+0xee>
    2742:	50 c0       	rjmp	.+160    	; 0x27e4 <DIO_readPin+0x116>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
    2744:	e9 e3       	ldi	r30, 0x39	; 57
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a9 01       	movw	r20, r18
    2756:	02 c0       	rjmp	.+4      	; 0x275c <DIO_readPin+0x8e>
    2758:	55 95       	asr	r21
    275a:	47 95       	ror	r20
    275c:	8a 95       	dec	r24
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <DIO_readPin+0x8a>
    2760:	ca 01       	movw	r24, r20
    2762:	81 70       	andi	r24, 0x01	; 1
    2764:	ec 81       	ldd	r30, Y+4	; 0x04
    2766:	fd 81       	ldd	r31, Y+5	; 0x05
    2768:	80 83       	st	Z, r24
    276a:	41 c0       	rjmp	.+130    	; 0x27ee <DIO_readPin+0x120>
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
    276c:	e6 e3       	ldi	r30, 0x36	; 54
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a9 01       	movw	r20, r18
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <DIO_readPin+0xb6>
    2780:	55 95       	asr	r21
    2782:	47 95       	ror	r20
    2784:	8a 95       	dec	r24
    2786:	e2 f7       	brpl	.-8      	; 0x2780 <DIO_readPin+0xb2>
    2788:	ca 01       	movw	r24, r20
    278a:	81 70       	andi	r24, 0x01	; 1
    278c:	ec 81       	ldd	r30, Y+4	; 0x04
    278e:	fd 81       	ldd	r31, Y+5	; 0x05
    2790:	80 83       	st	Z, r24
    2792:	2d c0       	rjmp	.+90     	; 0x27ee <DIO_readPin+0x120>
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
    2794:	e3 e3       	ldi	r30, 0x33	; 51
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a9 01       	movw	r20, r18
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <DIO_readPin+0xde>
    27a8:	55 95       	asr	r21
    27aa:	47 95       	ror	r20
    27ac:	8a 95       	dec	r24
    27ae:	e2 f7       	brpl	.-8      	; 0x27a8 <DIO_readPin+0xda>
    27b0:	ca 01       	movw	r24, r20
    27b2:	81 70       	andi	r24, 0x01	; 1
    27b4:	ec 81       	ldd	r30, Y+4	; 0x04
    27b6:	fd 81       	ldd	r31, Y+5	; 0x05
    27b8:	80 83       	st	Z, r24
    27ba:	19 c0       	rjmp	.+50     	; 0x27ee <DIO_readPin+0x120>
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
    27bc:	e0 e3       	ldi	r30, 0x30	; 48
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a9 01       	movw	r20, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <DIO_readPin+0x106>
    27d0:	55 95       	asr	r21
    27d2:	47 95       	ror	r20
    27d4:	8a 95       	dec	r24
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <DIO_readPin+0x102>
    27d8:	ca 01       	movw	r24, r20
    27da:	81 70       	andi	r24, 0x01	; 1
    27dc:	ec 81       	ldd	r30, Y+4	; 0x04
    27de:	fd 81       	ldd	r31, Y+5	; 0x05
    27e0:	80 83       	st	Z, r24
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <DIO_readPin+0x120>
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <DIO_readPin+0x120>
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	89 83       	std	Y+1, r24	; 0x01
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
}    //END of DIO_readPint
    27f0:	27 96       	adiw	r28, 0x07	; 7
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <DIO_TogglePin>:
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <DIO_TogglePin+0x6>
    2808:	00 d0       	rcall	.+0      	; 0x280a <DIO_TogglePin+0x8>
    280a:	0f 92       	push	r0
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	8a 83       	std	Y+2, r24	; 0x02
    2812:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    2814:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	88 30       	cpi	r24, 0x08	; 8
    281a:	08 f0       	brcs	.+2      	; 0x281e <DIO_TogglePin+0x1c>
    281c:	72 c0       	rjmp	.+228    	; 0x2902 <DIO_TogglePin+0x100>
    {
        switch (PortID)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3d 83       	std	Y+5, r19	; 0x05
    2826:	2c 83       	std	Y+4, r18	; 0x04
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	9d 81       	ldd	r25, Y+5	; 0x05
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	91 05       	cpc	r25, r1
    2830:	49 f1       	breq	.+82     	; 0x2884 <DIO_TogglePin+0x82>
    2832:	2c 81       	ldd	r18, Y+4	; 0x04
    2834:	3d 81       	ldd	r19, Y+5	; 0x05
    2836:	22 30       	cpi	r18, 0x02	; 2
    2838:	31 05       	cpc	r19, r1
    283a:	2c f4       	brge	.+10     	; 0x2846 <DIO_TogglePin+0x44>
    283c:	8c 81       	ldd	r24, Y+4	; 0x04
    283e:	9d 81       	ldd	r25, Y+5	; 0x05
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	61 f0       	breq	.+24     	; 0x285c <DIO_TogglePin+0x5a>
    2844:	5b c0       	rjmp	.+182    	; 0x28fc <DIO_TogglePin+0xfa>
    2846:	2c 81       	ldd	r18, Y+4	; 0x04
    2848:	3d 81       	ldd	r19, Y+5	; 0x05
    284a:	22 30       	cpi	r18, 0x02	; 2
    284c:	31 05       	cpc	r19, r1
    284e:	71 f1       	breq	.+92     	; 0x28ac <DIO_TogglePin+0xaa>
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	83 30       	cpi	r24, 0x03	; 3
    2856:	91 05       	cpc	r25, r1
    2858:	e9 f1       	breq	.+122    	; 0x28d4 <DIO_TogglePin+0xd2>
    285a:	50 c0       	rjmp	.+160    	; 0x28fc <DIO_TogglePin+0xfa>
        {
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
    285c:	ab e3       	ldi	r26, 0x3B	; 59
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	eb e3       	ldi	r30, 0x3B	; 59
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	48 2f       	mov	r20, r24
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 2e       	mov	r0, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <DIO_TogglePin+0x78>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0a 94       	dec	r0
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <DIO_TogglePin+0x74>
    287e:	84 27       	eor	r24, r20
    2880:	8c 93       	st	X, r24
    2882:	41 c0       	rjmp	.+130    	; 0x2906 <DIO_TogglePin+0x104>
            break;
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
    2884:	a8 e3       	ldi	r26, 0x38	; 56
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e8 e3       	ldi	r30, 0x38	; 56
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	48 2f       	mov	r20, r24
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	02 2e       	mov	r0, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <DIO_TogglePin+0xa0>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <DIO_TogglePin+0x9c>
    28a6:	84 27       	eor	r24, r20
    28a8:	8c 93       	st	X, r24
    28aa:	2d c0       	rjmp	.+90     	; 0x2906 <DIO_TogglePin+0x104>
            break;
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
    28ac:	a5 e3       	ldi	r26, 0x35	; 53
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e5 e3       	ldi	r30, 0x35	; 53
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <DIO_TogglePin+0xc8>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <DIO_TogglePin+0xc4>
    28ce:	84 27       	eor	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	19 c0       	rjmp	.+50     	; 0x2906 <DIO_TogglePin+0x104>
            break;
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
    28d4:	a2 e3       	ldi	r26, 0x32	; 50
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e2 e3       	ldi	r30, 0x32	; 50
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	48 2f       	mov	r20, r24
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <DIO_TogglePin+0xf0>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <DIO_TogglePin+0xec>
    28f6:	84 27       	eor	r24, r20
    28f8:	8c 93       	st	X, r24
    28fa:	05 c0       	rjmp	.+10     	; 0x2906 <DIO_TogglePin+0x104>
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <DIO_TogglePin+0x104>
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
    }	  //END of ELSE
    return u8_ERROR_STAT ;
    2906:	89 81       	ldd	r24, Y+1	; 0x01
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <DIO_SetPullupRes>:
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <DIO_SetPullupRes+0x6>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <DIO_SetPullupRes+0x8>
    2920:	0f 92       	push	r0
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    292a:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	88 30       	cpi	r24, 0x08	; 8
    2930:	08 f0       	brcs	.+2      	; 0x2934 <DIO_SetPullupRes+0x1c>
    2932:	ce c0       	rjmp	.+412    	; 0x2ad0 <DIO_SetPullupRes+0x1b8>
    {
        switch (PortID)
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	3d 83       	std	Y+5, r19	; 0x05
    293c:	2c 83       	std	Y+4, r18	; 0x04
    293e:	4c 81       	ldd	r20, Y+4	; 0x04
    2940:	5d 81       	ldd	r21, Y+5	; 0x05
    2942:	41 30       	cpi	r20, 0x01	; 1
    2944:	51 05       	cpc	r21, r1
    2946:	09 f4       	brne	.+2      	; 0x294a <DIO_SetPullupRes+0x32>
    2948:	42 c0       	rjmp	.+132    	; 0x29ce <DIO_SetPullupRes+0xb6>
    294a:	8c 81       	ldd	r24, Y+4	; 0x04
    294c:	9d 81       	ldd	r25, Y+5	; 0x05
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	91 05       	cpc	r25, r1
    2952:	34 f4       	brge	.+12     	; 0x2960 <DIO_SetPullupRes+0x48>
    2954:	2c 81       	ldd	r18, Y+4	; 0x04
    2956:	3d 81       	ldd	r19, Y+5	; 0x05
    2958:	21 15       	cp	r18, r1
    295a:	31 05       	cpc	r19, r1
    295c:	71 f0       	breq	.+28     	; 0x297a <DIO_SetPullupRes+0x62>
    295e:	b5 c0       	rjmp	.+362    	; 0x2aca <DIO_SetPullupRes+0x1b2>
    2960:	4c 81       	ldd	r20, Y+4	; 0x04
    2962:	5d 81       	ldd	r21, Y+5	; 0x05
    2964:	42 30       	cpi	r20, 0x02	; 2
    2966:	51 05       	cpc	r21, r1
    2968:	09 f4       	brne	.+2      	; 0x296c <DIO_SetPullupRes+0x54>
    296a:	5b c0       	rjmp	.+182    	; 0x2a22 <DIO_SetPullupRes+0x10a>
    296c:	8c 81       	ldd	r24, Y+4	; 0x04
    296e:	9d 81       	ldd	r25, Y+5	; 0x05
    2970:	83 30       	cpi	r24, 0x03	; 3
    2972:	91 05       	cpc	r25, r1
    2974:	09 f4       	brne	.+2      	; 0x2978 <DIO_SetPullupRes+0x60>
    2976:	7f c0       	rjmp	.+254    	; 0x2a76 <DIO_SetPullupRes+0x15e>
    2978:	a8 c0       	rjmp	.+336    	; 0x2aca <DIO_SetPullupRes+0x1b2>
        {
        case PORTa :
            if(DIO_u8_INPUT==Get_Bit(DDRA, PinNumber))
    297a:	ea e3       	ldi	r30, 0x3A	; 58
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	28 2f       	mov	r18, r24
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a9 01       	movw	r20, r18
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <DIO_SetPullupRes+0x7a>
    298e:	55 95       	asr	r21
    2990:	47 95       	ror	r20
    2992:	8a 95       	dec	r24
    2994:	e2 f7       	brpl	.-8      	; 0x298e <DIO_SetPullupRes+0x76>
    2996:	ca 01       	movw	r24, r20
    2998:	81 70       	andi	r24, 0x01	; 1
    299a:	90 70       	andi	r25, 0x00	; 0
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	a1 f4       	brne	.+40     	; 0x29c8 <DIO_SetPullupRes+0xb0>
            {
                Set_Bit(PORTA, PinNumber);
    29a0:	ab e3       	ldi	r26, 0x3B	; 59
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	eb e3       	ldi	r30, 0x3B	; 59
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	48 2f       	mov	r20, r24
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	02 2e       	mov	r0, r18
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <DIO_SetPullupRes+0xa6>
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	0a 94       	dec	r0
    29c0:	e2 f7       	brpl	.-8      	; 0x29ba <DIO_SetPullupRes+0xa2>
    29c2:	84 2b       	or	r24, r20
    29c4:	8c 93       	st	X, r24
    29c6:	86 c0       	rjmp	.+268    	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	83 c0       	rjmp	.+262    	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTb :
            if(DIO_u8_INPUT==Get_Bit(DDRB, PinNumber))
    29ce:	e7 e3       	ldi	r30, 0x37	; 55
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a9 01       	movw	r20, r18
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <DIO_SetPullupRes+0xce>
    29e2:	55 95       	asr	r21
    29e4:	47 95       	ror	r20
    29e6:	8a 95       	dec	r24
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <DIO_SetPullupRes+0xca>
    29ea:	ca 01       	movw	r24, r20
    29ec:	81 70       	andi	r24, 0x01	; 1
    29ee:	90 70       	andi	r25, 0x00	; 0
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	a1 f4       	brne	.+40     	; 0x2a1c <DIO_SetPullupRes+0x104>
            {
                Set_Bit(PORTB, PinNumber);
    29f4:	a8 e3       	ldi	r26, 0x38	; 56
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e8 e3       	ldi	r30, 0x38	; 56
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	48 2f       	mov	r20, r24
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	02 2e       	mov	r0, r18
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <DIO_SetPullupRes+0xfa>
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	0a 94       	dec	r0
    2a14:	e2 f7       	brpl	.-8      	; 0x2a0e <DIO_SetPullupRes+0xf6>
    2a16:	84 2b       	or	r24, r20
    2a18:	8c 93       	st	X, r24
    2a1a:	5c c0       	rjmp	.+184    	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	59 c0       	rjmp	.+178    	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTc :
            if(DIO_u8_INPUT==Get_Bit(DDRC, PinNumber))
    2a22:	e4 e3       	ldi	r30, 0x34	; 52
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	88 2f       	mov	r24, r24
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a9 01       	movw	r20, r18
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <DIO_SetPullupRes+0x122>
    2a36:	55 95       	asr	r21
    2a38:	47 95       	ror	r20
    2a3a:	8a 95       	dec	r24
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <DIO_SetPullupRes+0x11e>
    2a3e:	ca 01       	movw	r24, r20
    2a40:	81 70       	andi	r24, 0x01	; 1
    2a42:	90 70       	andi	r25, 0x00	; 0
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	a1 f4       	brne	.+40     	; 0x2a70 <DIO_SetPullupRes+0x158>
            {
                Set_Bit(PORTC, PinNumber);
    2a48:	a5 e3       	ldi	r26, 0x35	; 53
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e5 e3       	ldi	r30, 0x35	; 53
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	48 2f       	mov	r20, r24
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	02 2e       	mov	r0, r18
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <DIO_SetPullupRes+0x14e>
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	0a 94       	dec	r0
    2a68:	e2 f7       	brpl	.-8      	; 0x2a62 <DIO_SetPullupRes+0x14a>
    2a6a:	84 2b       	or	r24, r20
    2a6c:	8c 93       	st	X, r24
    2a6e:	32 c0       	rjmp	.+100    	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	2f c0       	rjmp	.+94     	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTd :
            if(DIO_u8_INPUT==Get_Bit(DDRD, PinNumber))
    2a76:	e1 e3       	ldi	r30, 0x31	; 49
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	a9 01       	movw	r20, r18
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <DIO_SetPullupRes+0x176>
    2a8a:	55 95       	asr	r21
    2a8c:	47 95       	ror	r20
    2a8e:	8a 95       	dec	r24
    2a90:	e2 f7       	brpl	.-8      	; 0x2a8a <DIO_SetPullupRes+0x172>
    2a92:	ca 01       	movw	r24, r20
    2a94:	81 70       	andi	r24, 0x01	; 1
    2a96:	90 70       	andi	r25, 0x00	; 0
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	a1 f4       	brne	.+40     	; 0x2ac4 <DIO_SetPullupRes+0x1ac>
            {
                Set_Bit(PORTD, PinNumber);
    2a9c:	a2 e3       	ldi	r26, 0x32	; 50
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e2 e3       	ldi	r30, 0x32	; 50
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	48 2f       	mov	r20, r24
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	02 2e       	mov	r0, r18
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <DIO_SetPullupRes+0x1a2>
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	0a 94       	dec	r0
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <DIO_SetPullupRes+0x19e>
    2abe:	84 2b       	or	r24, r20
    2ac0:	8c 93       	st	X, r24
    2ac2:	08 c0       	rjmp	.+16     	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
            }
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <DIO_SetPullupRes+0x1bc>
    }	  //END OF IF

    else
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    } //END of ELSE
    return u8_ERROR_STAT ;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <LCD_init>:
 * @return function error state.
 */


LCD_ERROR_state_t LCD_init(void)
{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <LCD_init+0x6>
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <LCD_init+0x8>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    2af2:	8f ef       	ldi	r24, 0xFF	; 255
    2af4:	8a 83       	std	Y+2, r24	; 0x02
	/*setting the functions state*/
	uint8_t static LCD_State = OperationStarted;

	uint8_t LCD_SendCommandRetVal = OperationStarted;
    2af6:	8f ef       	ldi	r24, 0xFF	; 255
    2af8:	89 83       	std	Y+1, r24	; 0x01
#if (DATA_BITS_MODE == 4)
	switch (LCD_State)
    2afa:	80 91 63 01 	lds	r24, 0x0163
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	3c 83       	std	Y+4, r19	; 0x04
    2b04:	2b 83       	std	Y+3, r18	; 0x03
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	88 30       	cpi	r24, 0x08	; 8
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <LCD_init+0x2c>
    2b10:	4a c0       	rjmp	.+148    	; 0x2ba6 <LCD_init+0xc0>
    2b12:	2b 81       	ldd	r18, Y+3	; 0x03
    2b14:	3c 81       	ldd	r19, Y+4	; 0x04
    2b16:	29 30       	cpi	r18, 0x09	; 9
    2b18:	31 05       	cpc	r19, r1
    2b1a:	5c f4       	brge	.+22     	; 0x2b32 <LCD_init+0x4c>
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	85 30       	cpi	r24, 0x05	; 5
    2b22:	91 05       	cpc	r25, r1
    2b24:	89 f1       	breq	.+98     	; 0x2b88 <LCD_init+0xa2>
    2b26:	2b 81       	ldd	r18, Y+3	; 0x03
    2b28:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2a:	26 30       	cpi	r18, 0x06	; 6
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	81 f1       	breq	.+96     	; 0x2b90 <LCD_init+0xaa>
    2b30:	5c c0       	rjmp	.+184    	; 0x2bea <LCD_init+0x104>
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	8a 30       	cpi	r24, 0x0A	; 10
    2b38:	91 05       	cpc	r25, r1
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <LCD_init+0x58>
    2b3c:	4a c0       	rjmp	.+148    	; 0x2bd2 <LCD_init+0xec>
    2b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b40:	3c 81       	ldd	r19, Y+4	; 0x04
    2b42:	2a 30       	cpi	r18, 0x0A	; 10
    2b44:	31 05       	cpc	r19, r1
    2b46:	d4 f1       	brlt	.+116    	; 0x2bbc <LCD_init+0xd6>
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b4e:	91 05       	cpc	r25, r1
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <LCD_init+0x6e>
    2b52:	4b c0       	rjmp	.+150    	; 0x2bea <LCD_init+0x104>
	{
	case OperationStarted:
		/*TIMER Function Configuration */
		TIMER_VidInit(&timer_config,0,250);
    2b54:	80 e6       	ldi	r24, 0x60	; 96
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	70 e0       	ldi	r23, 0x00	; 0
    2b5c:	4a ef       	ldi	r20, 0xFA	; 250
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TIMER_VidInit>
 		LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2b64:	a7 e3       	ldi	r26, 0x37	; 55
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e7 e3       	ldi	r30, 0x37	; 55
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8e 60       	ori	r24, 0x0E	; 14
    2b70:	8c 93       	st	X, r24

		/*To Execute The Timer To Put Initial Value In Clock  */
		LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    2b72:	a7 e3       	ldi	r26, 0x37	; 55
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	e7 e3       	ldi	r30, 0x37	; 55
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	80 6f       	ori	r24, 0xF0	; 240
    2b7e:	8c 93       	st	X, r24
		/*set status of the function*/
		LCD_State = LCD_Pin_Initializing;
    2b80:	85 e0       	ldi	r24, 0x05	; 5
    2b82:	80 93 63 01 	sts	0x0163, r24
    2b86:	33 c0       	rjmp	.+102    	; 0x2bee <LCD_init+0x108>
		break;
	case LCD_Pin_Initializing:
		/*if timer delay function finished correctly Start the initialization sequence*/
		LCD_State = LCD_Start_Initialization;
    2b88:	86 e0       	ldi	r24, 0x06	; 6
    2b8a:	80 93 63 01 	sts	0x0163, r24
    2b8e:	2f c0       	rjmp	.+94     	; 0x2bee <LCD_init+0x108>
		break;
	case LCD_Start_Initialization:
		LCD_SendCommandRetVal = LCD_SendCommand(FOUR_BITS_DATA_MODE);
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_SendCommand>
    2b96:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	88 23       	and	r24, r24
    2b9c:	41 f5       	brne	.+80     	; 0x2bee <LCD_init+0x108>
		{
			LCD_State = First_Cmd_Sent;
    2b9e:	88 e0       	ldi	r24, 0x08	; 8
    2ba0:	80 93 63 01 	sts	0x0163, r24
    2ba4:	24 c0       	rjmp	.+72     	; 0x2bee <LCD_init+0x108>
		}
		break;
	case First_Cmd_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    2ba6:	88 e2       	ldi	r24, 0x28	; 40
    2ba8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_SendCommand>
    2bac:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	88 23       	and	r24, r24
    2bb2:	e9 f4       	brne	.+58     	; 0x2bee <LCD_init+0x108>
		{
			LCD_State = Second_Cmd_Sent;
    2bb4:	89 e0       	ldi	r24, 0x09	; 9
    2bb6:	80 93 63 01 	sts	0x0163, r24
    2bba:	19 c0       	rjmp	.+50     	; 0x2bee <LCD_init+0x108>

		}
		break;
	case Second_Cmd_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(CURSOR_OFF);
    2bbc:	8c e0       	ldi	r24, 0x0C	; 12
    2bbe:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_SendCommand>
    2bc2:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	88 23       	and	r24, r24
    2bc8:	91 f4       	brne	.+36     	; 0x2bee <LCD_init+0x108>
		{
			LCD_State = Third_Cmd_Sent;
    2bca:	8a e0       	ldi	r24, 0x0A	; 10
    2bcc:	80 93 63 01 	sts	0x0163, r24
    2bd0:	0e c0       	rjmp	.+28     	; 0x2bee <LCD_init+0x108>

		}
		break;
	case Third_Cmd_Sent:
		LCD_SendCommandRetVal = LCD_SendCommand(CLEAR_COMMAND);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_SendCommand>
    2bd8:	89 83       	std	Y+1, r24	; 0x01
		if(LCD_SendCommandRetVal == OperationSuccess)
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	88 23       	and	r24, r24
    2bde:	39 f4       	brne	.+14     	; 0x2bee <LCD_init+0x108>
		{
			LCD_State = OperationStarted;
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	80 93 63 01 	sts	0x0163, r24
			ErrRetVal = OperationSuccess;
    2be6:	1a 82       	std	Y+2, r1	; 0x02
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <LCD_init+0x108>
		}
		break;
	default:
		ErrRetVal = OperationFail;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	8a 83       	std	Y+2, r24	; 0x02
	}
#endif

	return ErrRetVal;
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <LCD_SendCommand>:
 * @return function error state.
 */


LCD_ERROR_state_t LCD_SendCommand(uint8_t command)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <LCD_SendCommand+0x6>
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <LCD_SendCommand+0x8>
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	8a 83       	std	Y+2, r24	; 0x02
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static Command_State = OperationStarted;
	/*declaring a variable for the timer return*/
#if (DATA_BITS_MODE == 4)
	switch(Command_State)
    2c10:	80 91 64 01 	lds	r24, 0x0164
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	3c 83       	std	Y+4, r19	; 0x04
    2c1a:	2b 83       	std	Y+3, r18	; 0x03
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	86 31       	cpi	r24, 0x16	; 22
    2c22:	91 05       	cpc	r25, r1
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <LCD_SendCommand+0x2a>
    2c26:	42 c0       	rjmp	.+132    	; 0x2cac <LCD_SendCommand+0xae>
    2c28:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c2c:	27 31       	cpi	r18, 0x17	; 23
    2c2e:	31 05       	cpc	r19, r1
    2c30:	9c f4       	brge	.+38     	; 0x2c58 <LCD_SendCommand+0x5a>
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	9c 81       	ldd	r25, Y+4	; 0x04
    2c36:	83 30       	cpi	r24, 0x03	; 3
    2c38:	91 05       	cpc	r25, r1
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <LCD_SendCommand+0x40>
    2c3c:	e7 c0       	rjmp	.+462    	; 0x2e0c <LCD_SendCommand+0x20e>
    2c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c40:	3c 81       	ldd	r19, Y+4	; 0x04
    2c42:	24 31       	cpi	r18, 0x14	; 20
    2c44:	31 05       	cpc	r19, r1
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <LCD_SendCommand+0x4c>
    2c48:	41 c1       	rjmp	.+642    	; 0x2ecc <LCD_SendCommand+0x2ce>
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	91 05       	cpc	r25, r1
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <LCD_SendCommand+0x58>
    2c54:	56 c0       	rjmp	.+172    	; 0x2d02 <LCD_SendCommand+0x104>
    2c56:	45 c1       	rjmp	.+650    	; 0x2ee2 <LCD_SendCommand+0x2e4>
    2c58:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5c:	28 31       	cpi	r18, 0x18	; 24
    2c5e:	31 05       	cpc	r19, r1
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <LCD_SendCommand+0x66>
    2c62:	a9 c0       	rjmp	.+338    	; 0x2db6 <LCD_SendCommand+0x1b8>
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	88 31       	cpi	r24, 0x18	; 24
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	0c f4       	brge	.+2      	; 0x2c70 <LCD_SendCommand+0x72>
    2c6e:	78 c0       	rjmp	.+240    	; 0x2d60 <LCD_SendCommand+0x162>
    2c70:	2b 81       	ldd	r18, Y+3	; 0x03
    2c72:	3c 81       	ldd	r19, Y+4	; 0x04
    2c74:	29 31       	cpi	r18, 0x19	; 25
    2c76:	31 05       	cpc	r19, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <LCD_SendCommand+0x7e>
    2c7a:	fe c0       	rjmp	.+508    	; 0x2e78 <LCD_SendCommand+0x27a>
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	8f 3f       	cpi	r24, 0xFF	; 255
    2c82:	91 05       	cpc	r25, r1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <LCD_SendCommand+0x8a>
    2c86:	2d c1       	rjmp	.+602    	; 0x2ee2 <LCD_SendCommand+0x2e4>
	{
	case OperationStarted:
		CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2c88:	a8 e3       	ldi	r26, 0x38	; 56
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e8 e3       	ldi	r30, 0x38	; 56
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	8d 7f       	andi	r24, 0xFD	; 253
    2c94:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2c96:	a8 e3       	ldi	r26, 0x38	; 56
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e8 e3       	ldi	r30, 0x38	; 56
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8b 7f       	andi	r24, 0xFB	; 251
    2ca2:	8c 93       	st	X, r24
		Command_State = Sending_First_Nibble_E;
    2ca4:	86 e1       	ldi	r24, 0x16	; 22
    2ca6:	80 93 64 01 	sts	0x0164, r24
    2caa:	1d c1       	rjmp	.+570    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		break;
	case Sending_First_Nibble_E:
		if(TimerRetVal1==NULL_PTR)
    2cac:	80 91 72 01 	lds	r24, 0x0172
    2cb0:	90 91 73 01 	lds	r25, 0x0173
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	49 f4       	brne	.+18     	; 0x2cca <LCD_SendCommand+0xcc>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2cb8:	80 e6       	ldi	r24, 0x60	; 96
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	61 e0       	ldi	r22, 0x01	; 1
    2cbe:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2cc2:	90 93 73 01 	sts	0x0173, r25
    2cc6:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2cca:	e0 91 72 01 	lds	r30, 0x0172
    2cce:	f0 91 73 01 	lds	r31, 0x0173
    2cd2:	80 81       	ld	r24, Z
    2cd4:	82 30       	cpi	r24, 0x02	; 2
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <LCD_SendCommand+0xdc>
    2cd8:	06 c1       	rjmp	.+524    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2cda:	a8 e3       	ldi	r26, 0x38	; 56
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e8 e3       	ldi	r30, 0x38	; 56
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	88 60       	ori	r24, 0x08	; 8
    2ce6:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2ce8:	e0 91 72 01 	lds	r30, 0x0172
    2cec:	f0 91 73 01 	lds	r31, 0x0173
    2cf0:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2cf2:	10 92 73 01 	sts	0x0173, r1
    2cf6:	10 92 72 01 	sts	0x0172, r1
			Command_State = Sending_First_Nibble;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	80 93 64 01 	sts	0x0164, r24
    2d00:	f2 c0       	rjmp	.+484    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    2d02:	80 91 72 01 	lds	r24, 0x0172
    2d06:	90 91 73 01 	lds	r25, 0x0173
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	49 f4       	brne	.+18     	; 0x2d20 <LCD_SendCommand+0x122>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2d0e:	80 e6       	ldi	r24, 0x60	; 96
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2d18:	90 93 73 01 	sts	0x0173, r25
    2d1c:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2d20:	e0 91 72 01 	lds	r30, 0x0172
    2d24:	f0 91 73 01 	lds	r31, 0x0173
    2d28:	80 81       	ld	r24, Z
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <LCD_SendCommand+0x132>
    2d2e:	db c0       	rjmp	.+438    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    2d30:	a8 e3       	ldi	r26, 0x38	; 56
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e8 e3       	ldi	r30, 0x38	; 56
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	98 2f       	mov	r25, r24
    2d3c:	9f 70       	andi	r25, 0x0F	; 15
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	80 7f       	andi	r24, 0xF0	; 240
    2d42:	89 2b       	or	r24, r25
    2d44:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2d46:	e0 91 72 01 	lds	r30, 0x0172
    2d4a:	f0 91 73 01 	lds	r31, 0x0173
    2d4e:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2d50:	10 92 73 01 	sts	0x0173, r1
    2d54:	10 92 72 01 	sts	0x0172, r1
			Command_State = Sending_Second_Nibble_E;
    2d58:	87 e1       	ldi	r24, 0x17	; 23
    2d5a:	80 93 64 01 	sts	0x0164, r24
    2d5e:	c3 c0       	rjmp	.+390    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	case Sending_Second_Nibble_E:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    2d60:	80 91 72 01 	lds	r24, 0x0172
    2d64:	90 91 73 01 	lds	r25, 0x0173
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	49 f4       	brne	.+18     	; 0x2d7e <LCD_SendCommand+0x180>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2d6c:	80 e6       	ldi	r24, 0x60	; 96
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	61 e0       	ldi	r22, 0x01	; 1
    2d72:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2d76:	90 93 73 01 	sts	0x0173, r25
    2d7a:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2d7e:	e0 91 72 01 	lds	r30, 0x0172
    2d82:	f0 91 73 01 	lds	r31, 0x0173
    2d86:	80 81       	ld	r24, Z
    2d88:	82 30       	cpi	r24, 0x02	; 2
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <LCD_SendCommand+0x190>
    2d8c:	ac c0       	rjmp	.+344    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2d8e:	a8 e3       	ldi	r26, 0x38	; 56
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e8 e3       	ldi	r30, 0x38	; 56
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	87 7f       	andi	r24, 0xF7	; 247
    2d9a:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2d9c:	e0 91 72 01 	lds	r30, 0x0172
    2da0:	f0 91 73 01 	lds	r31, 0x0173
    2da4:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2da6:	10 92 73 01 	sts	0x0173, r1
    2daa:	10 92 72 01 	sts	0x0172, r1
			Command_State = Sending_Second_Nibble_SET_E;
    2dae:	88 e1       	ldi	r24, 0x18	; 24
    2db0:	80 93 64 01 	sts	0x0164, r24
    2db4:	98 c0       	rjmp	.+304    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	case Sending_Second_Nibble_SET_E:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    2db6:	80 91 72 01 	lds	r24, 0x0172
    2dba:	90 91 73 01 	lds	r25, 0x0173
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	49 f4       	brne	.+18     	; 0x2dd4 <LCD_SendCommand+0x1d6>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2dc2:	80 e6       	ldi	r24, 0x60	; 96
    2dc4:	91 e0       	ldi	r25, 0x01	; 1
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2dcc:	90 93 73 01 	sts	0x0173, r25
    2dd0:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2dd4:	e0 91 72 01 	lds	r30, 0x0172
    2dd8:	f0 91 73 01 	lds	r31, 0x0173
    2ddc:	80 81       	ld	r24, Z
    2dde:	82 30       	cpi	r24, 0x02	; 2
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <LCD_SendCommand+0x1e6>
    2de2:	81 c0       	rjmp	.+258    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2de4:	a8 e3       	ldi	r26, 0x38	; 56
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e8 e3       	ldi	r30, 0x38	; 56
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	88 60       	ori	r24, 0x08	; 8
    2df0:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2df2:	e0 91 72 01 	lds	r30, 0x0172
    2df6:	f0 91 73 01 	lds	r31, 0x0173
    2dfa:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2dfc:	10 92 73 01 	sts	0x0173, r1
    2e00:	10 92 72 01 	sts	0x0172, r1
			Command_State = Sending_Second_Nibble;
    2e04:	83 e0       	ldi	r24, 0x03	; 3
    2e06:	80 93 64 01 	sts	0x0164, r24
    2e0a:	6d c0       	rjmp	.+218    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    2e0c:	80 91 72 01 	lds	r24, 0x0172
    2e10:	90 91 73 01 	lds	r25, 0x0173
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	49 f4       	brne	.+18     	; 0x2e2a <LCD_SendCommand+0x22c>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2e18:	80 e6       	ldi	r24, 0x60	; 96
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	61 e0       	ldi	r22, 0x01	; 1
    2e1e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2e22:	90 93 73 01 	sts	0x0173, r25
    2e26:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2e2a:	e0 91 72 01 	lds	r30, 0x0172
    2e2e:	f0 91 73 01 	lds	r31, 0x0173
    2e32:	80 81       	ld	r24, Z
    2e34:	82 30       	cpi	r24, 0x02	; 2
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <LCD_SendCommand+0x23c>
    2e38:	56 c0       	rjmp	.+172    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2e3a:	a8 e3       	ldi	r26, 0x38	; 56
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e8 e3       	ldi	r30, 0x38	; 56
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	28 2f       	mov	r18, r24
    2e46:	2f 70       	andi	r18, 0x0F	; 15
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	88 2f       	mov	r24, r24
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	82 95       	swap	r24
    2e50:	92 95       	swap	r25
    2e52:	90 7f       	andi	r25, 0xF0	; 240
    2e54:	98 27       	eor	r25, r24
    2e56:	80 7f       	andi	r24, 0xF0	; 240
    2e58:	98 27       	eor	r25, r24
    2e5a:	82 2b       	or	r24, r18
    2e5c:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2e5e:	e0 91 72 01 	lds	r30, 0x0172
    2e62:	f0 91 73 01 	lds	r31, 0x0173
    2e66:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2e68:	10 92 73 01 	sts	0x0173, r1
    2e6c:	10 92 72 01 	sts	0x0172, r1
			Command_State = Sending_Second_Nibble_SET_ENABLE;
    2e70:	89 e1       	ldi	r24, 0x19	; 25
    2e72:	80 93 64 01 	sts	0x0164, r24
    2e76:	37 c0       	rjmp	.+110    	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	case Sending_Second_Nibble_SET_ENABLE:
		if(TimerRetVal1==NULL_PTR)
    2e78:	80 91 72 01 	lds	r24, 0x0172
    2e7c:	90 91 73 01 	lds	r25, 0x0173
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	49 f4       	brne	.+18     	; 0x2e96 <LCD_SendCommand+0x298>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2e84:	80 e6       	ldi	r24, 0x60	; 96
    2e86:	91 e0       	ldi	r25, 0x01	; 1
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2e8e:	90 93 73 01 	sts	0x0173, r25
    2e92:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2e96:	e0 91 72 01 	lds	r30, 0x0172
    2e9a:	f0 91 73 01 	lds	r31, 0x0173
    2e9e:	80 81       	ld	r24, Z
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	09 f5       	brne	.+66     	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2ea4:	a8 e3       	ldi	r26, 0x38	; 56
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e8 e3       	ldi	r30, 0x38	; 56
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	87 7f       	andi	r24, 0xF7	; 247
    2eb0:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2eb2:	e0 91 72 01 	lds	r30, 0x0172
    2eb6:	f0 91 73 01 	lds	r31, 0x0173
    2eba:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2ebc:	10 92 73 01 	sts	0x0173, r1
    2ec0:	10 92 72 01 	sts	0x0172, r1
			Command_State = CMD_Sending;
    2ec4:	84 e1       	ldi	r24, 0x14	; 20
    2ec6:	80 93 64 01 	sts	0x0164, r24
    2eca:	0d c0       	rjmp	.+26     	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	case CMD_Sending:
		if(TimerRetVal1 == NULL_PTR)
    2ecc:	80 91 72 01 	lds	r24, 0x0172
    2ed0:	90 91 73 01 	lds	r25, 0x0173
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	39 f4       	brne	.+14     	; 0x2ee6 <LCD_SendCommand+0x2e8>
		{
			/*reset the function's state*/
			Command_State = OperationStarted;
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	80 93 64 01 	sts	0x0164, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
    2ede:	19 82       	std	Y+1, r1	; 0x01
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <LCD_SendCommand+0x2e8>
		}
		break;
	default:
		ErrRetVal = OperationFail;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	89 83       	std	Y+1, r24	; 0x01
	}
#endif
	/*return from function*/
	return ErrRetVal;
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <LCD_displayCharacter>:
 * @param [in]  Data     -  Character to send to LCD.
 *
 * @return function error state.
 */
LCD_ERROR_state_t LCD_displayCharacter(uint8_t command)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <LCD_displayCharacter+0x6>
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <LCD_displayCharacter+0x8>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	8a 83       	std	Y+2, r24	; 0x02
	/*function starting*/
	uint8_t ErrRetVal = OperationStarted;
    2f04:	8f ef       	ldi	r24, 0xFF	; 255
    2f06:	89 83       	std	Y+1, r24	; 0x01
	/*setting the functions state*/
	uint8_t static Data_State = OperationStarted;
	/*declaring a variable for the timer return*/
#if (DATA_BITS_MODE == 4)
	switch(Data_State)
    2f08:	80 91 65 01 	lds	r24, 0x0165
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	3c 83       	std	Y+4, r19	; 0x04
    2f12:	2b 83       	std	Y+3, r18	; 0x03
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	9c 81       	ldd	r25, Y+4	; 0x04
    2f18:	86 31       	cpi	r24, 0x16	; 22
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <LCD_displayCharacter+0x2a>
    2f1e:	42 c0       	rjmp	.+132    	; 0x2fa4 <LCD_displayCharacter+0xae>
    2f20:	2b 81       	ldd	r18, Y+3	; 0x03
    2f22:	3c 81       	ldd	r19, Y+4	; 0x04
    2f24:	27 31       	cpi	r18, 0x17	; 23
    2f26:	31 05       	cpc	r19, r1
    2f28:	9c f4       	brge	.+38     	; 0x2f50 <LCD_displayCharacter+0x5a>
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	83 30       	cpi	r24, 0x03	; 3
    2f30:	91 05       	cpc	r25, r1
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <LCD_displayCharacter+0x40>
    2f34:	e7 c0       	rjmp	.+462    	; 0x3104 <LCD_displayCharacter+0x20e>
    2f36:	2b 81       	ldd	r18, Y+3	; 0x03
    2f38:	3c 81       	ldd	r19, Y+4	; 0x04
    2f3a:	24 31       	cpi	r18, 0x14	; 20
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <LCD_displayCharacter+0x4c>
    2f40:	41 c1       	rjmp	.+642    	; 0x31c4 <LCD_displayCharacter+0x2ce>
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	91 05       	cpc	r25, r1
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <LCD_displayCharacter+0x58>
    2f4c:	56 c0       	rjmp	.+172    	; 0x2ffa <LCD_displayCharacter+0x104>
    2f4e:	44 c1       	rjmp	.+648    	; 0x31d8 <LCD_displayCharacter+0x2e2>
    2f50:	2b 81       	ldd	r18, Y+3	; 0x03
    2f52:	3c 81       	ldd	r19, Y+4	; 0x04
    2f54:	28 31       	cpi	r18, 0x18	; 24
    2f56:	31 05       	cpc	r19, r1
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <LCD_displayCharacter+0x66>
    2f5a:	a9 c0       	rjmp	.+338    	; 0x30ae <LCD_displayCharacter+0x1b8>
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f60:	88 31       	cpi	r24, 0x18	; 24
    2f62:	91 05       	cpc	r25, r1
    2f64:	0c f4       	brge	.+2      	; 0x2f68 <LCD_displayCharacter+0x72>
    2f66:	78 c0       	rjmp	.+240    	; 0x3058 <LCD_displayCharacter+0x162>
    2f68:	2b 81       	ldd	r18, Y+3	; 0x03
    2f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f6c:	29 31       	cpi	r18, 0x19	; 25
    2f6e:	31 05       	cpc	r19, r1
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <LCD_displayCharacter+0x7e>
    2f72:	fe c0       	rjmp	.+508    	; 0x3170 <LCD_displayCharacter+0x27a>
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <LCD_displayCharacter+0x8a>
    2f7e:	2c c1       	rjmp	.+600    	; 0x31d8 <LCD_displayCharacter+0x2e2>
	{
	case OperationStarted:
		SET_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2f80:	a8 e3       	ldi	r26, 0x38	; 56
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e8 e3       	ldi	r30, 0x38	; 56
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	82 60       	ori	r24, 0x02	; 2
    2f8c:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2f8e:	a8 e3       	ldi	r26, 0x38	; 56
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e8 e3       	ldi	r30, 0x38	; 56
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8b 7f       	andi	r24, 0xFB	; 251
    2f9a:	8c 93       	st	X, r24
		Data_State = Sending_First_Nibble_E;
    2f9c:	86 e1       	ldi	r24, 0x16	; 22
    2f9e:	80 93 65 01 	sts	0x0165, r24
    2fa2:	1a c1       	rjmp	.+564    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		break;
	case Sending_First_Nibble_E:
		if(TimerRetVal1==NULL_PTR)
    2fa4:	80 91 72 01 	lds	r24, 0x0172
    2fa8:	90 91 73 01 	lds	r25, 0x0173
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	49 f4       	brne	.+18     	; 0x2fc2 <LCD_displayCharacter+0xcc>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    2fb0:	80 e6       	ldi	r24, 0x60	; 96
    2fb2:	91 e0       	ldi	r25, 0x01	; 1
    2fb4:	61 e0       	ldi	r22, 0x01	; 1
    2fb6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    2fba:	90 93 73 01 	sts	0x0173, r25
    2fbe:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    2fc2:	e0 91 72 01 	lds	r30, 0x0172
    2fc6:	f0 91 73 01 	lds	r31, 0x0173
    2fca:	80 81       	ld	r24, Z
    2fcc:	82 30       	cpi	r24, 0x02	; 2
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <LCD_displayCharacter+0xdc>
    2fd0:	03 c1       	rjmp	.+518    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2fd2:	a8 e3       	ldi	r26, 0x38	; 56
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e8 e3       	ldi	r30, 0x38	; 56
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 60       	ori	r24, 0x08	; 8
    2fde:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    2fe0:	e0 91 72 01 	lds	r30, 0x0172
    2fe4:	f0 91 73 01 	lds	r31, 0x0173
    2fe8:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    2fea:	10 92 73 01 	sts	0x0173, r1
    2fee:	10 92 72 01 	sts	0x0172, r1
			Data_State = Sending_First_Nibble;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	80 93 65 01 	sts	0x0165, r24
    2ff8:	ef c0       	rjmp	.+478    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		}
		break;
	case Sending_First_Nibble:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    2ffa:	80 91 72 01 	lds	r24, 0x0172
    2ffe:	90 91 73 01 	lds	r25, 0x0173
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	49 f4       	brne	.+18     	; 0x3018 <LCD_displayCharacter+0x122>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    3006:	80 e6       	ldi	r24, 0x60	; 96
    3008:	91 e0       	ldi	r25, 0x01	; 1
    300a:	61 e0       	ldi	r22, 0x01	; 1
    300c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    3010:	90 93 73 01 	sts	0x0173, r25
    3014:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    3018:	e0 91 72 01 	lds	r30, 0x0172
    301c:	f0 91 73 01 	lds	r31, 0x0173
    3020:	80 81       	ld	r24, Z
    3022:	82 30       	cpi	r24, 0x02	; 2
    3024:	09 f0       	breq	.+2      	; 0x3028 <LCD_displayCharacter+0x132>
    3026:	d8 c0       	rjmp	.+432    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    3028:	a8 e3       	ldi	r26, 0x38	; 56
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e8 e3       	ldi	r30, 0x38	; 56
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	98 2f       	mov	r25, r24
    3034:	9f 70       	andi	r25, 0x0F	; 15
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	80 7f       	andi	r24, 0xF0	; 240
    303a:	89 2b       	or	r24, r25
    303c:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    303e:	e0 91 72 01 	lds	r30, 0x0172
    3042:	f0 91 73 01 	lds	r31, 0x0173
    3046:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    3048:	10 92 73 01 	sts	0x0173, r1
    304c:	10 92 72 01 	sts	0x0172, r1
			Data_State = Sending_Second_Nibble_E;
    3050:	87 e1       	ldi	r24, 0x17	; 23
    3052:	80 93 65 01 	sts	0x0165, r24
    3056:	c0 c0       	rjmp	.+384    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		}
		break;
	case Sending_Second_Nibble_E:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    3058:	80 91 72 01 	lds	r24, 0x0172
    305c:	90 91 73 01 	lds	r25, 0x0173
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	49 f4       	brne	.+18     	; 0x3076 <LCD_displayCharacter+0x180>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    3064:	80 e6       	ldi	r24, 0x60	; 96
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    306e:	90 93 73 01 	sts	0x0173, r25
    3072:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    3076:	e0 91 72 01 	lds	r30, 0x0172
    307a:	f0 91 73 01 	lds	r31, 0x0173
    307e:	80 81       	ld	r24, Z
    3080:	82 30       	cpi	r24, 0x02	; 2
    3082:	09 f0       	breq	.+2      	; 0x3086 <LCD_displayCharacter+0x190>
    3084:	a9 c0       	rjmp	.+338    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    3086:	a8 e3       	ldi	r26, 0x38	; 56
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e8 e3       	ldi	r30, 0x38	; 56
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	87 7f       	andi	r24, 0xF7	; 247
    3092:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    3094:	e0 91 72 01 	lds	r30, 0x0172
    3098:	f0 91 73 01 	lds	r31, 0x0173
    309c:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    309e:	10 92 73 01 	sts	0x0173, r1
    30a2:	10 92 72 01 	sts	0x0172, r1
			Data_State = Sending_Second_Nibble_SET_E;
    30a6:	88 e1       	ldi	r24, 0x18	; 24
    30a8:	80 93 65 01 	sts	0x0165, r24
    30ac:	95 c0       	rjmp	.+298    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		}
		break;
	case Sending_Second_Nibble_SET_E:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    30ae:	80 91 72 01 	lds	r24, 0x0172
    30b2:	90 91 73 01 	lds	r25, 0x0173
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	49 f4       	brne	.+18     	; 0x30cc <LCD_displayCharacter+0x1d6>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    30ba:	80 e6       	ldi	r24, 0x60	; 96
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	61 e0       	ldi	r22, 0x01	; 1
    30c0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    30c4:	90 93 73 01 	sts	0x0173, r25
    30c8:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    30cc:	e0 91 72 01 	lds	r30, 0x0172
    30d0:	f0 91 73 01 	lds	r31, 0x0173
    30d4:	80 81       	ld	r24, Z
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	09 f0       	breq	.+2      	; 0x30dc <LCD_displayCharacter+0x1e6>
    30da:	7e c0       	rjmp	.+252    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    30dc:	a8 e3       	ldi	r26, 0x38	; 56
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e8 e3       	ldi	r30, 0x38	; 56
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	88 60       	ori	r24, 0x08	; 8
    30e8:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    30ea:	e0 91 72 01 	lds	r30, 0x0172
    30ee:	f0 91 73 01 	lds	r31, 0x0173
    30f2:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    30f4:	10 92 73 01 	sts	0x0173, r1
    30f8:	10 92 72 01 	sts	0x0172, r1
			Data_State = Sending_Second_Nibble;
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	80 93 65 01 	sts	0x0165, r24
    3102:	6a c0       	rjmp	.+212    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		}
		break;
	case Sending_Second_Nibble:
		/*start timer delay in background*/
		if(TimerRetVal1==NULL_PTR)
    3104:	80 91 72 01 	lds	r24, 0x0172
    3108:	90 91 73 01 	lds	r25, 0x0173
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	49 f4       	brne	.+18     	; 0x3122 <LCD_displayCharacter+0x22c>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    3110:	80 e6       	ldi	r24, 0x60	; 96
    3112:	91 e0       	ldi	r25, 0x01	; 1
    3114:	61 e0       	ldi	r22, 0x01	; 1
    3116:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    311a:	90 93 73 01 	sts	0x0173, r25
    311e:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    3122:	e0 91 72 01 	lds	r30, 0x0172
    3126:	f0 91 73 01 	lds	r31, 0x0173
    312a:	80 81       	ld	r24, Z
    312c:	82 30       	cpi	r24, 0x02	; 2
    312e:	09 f0       	breq	.+2      	; 0x3132 <LCD_displayCharacter+0x23c>
    3130:	53 c0       	rjmp	.+166    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    3132:	a8 e3       	ldi	r26, 0x38	; 56
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e8 e3       	ldi	r30, 0x38	; 56
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	28 2f       	mov	r18, r24
    313e:	2f 70       	andi	r18, 0x0F	; 15
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	82 95       	swap	r24
    3148:	92 95       	swap	r25
    314a:	90 7f       	andi	r25, 0xF0	; 240
    314c:	98 27       	eor	r25, r24
    314e:	80 7f       	andi	r24, 0xF0	; 240
    3150:	98 27       	eor	r25, r24
    3152:	82 2b       	or	r24, r18
    3154:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    3156:	e0 91 72 01 	lds	r30, 0x0172
    315a:	f0 91 73 01 	lds	r31, 0x0173
    315e:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    3160:	10 92 73 01 	sts	0x0173, r1
    3164:	10 92 72 01 	sts	0x0172, r1
			Data_State = Sending_Second_Nibble_SET_ENABLE;
    3168:	89 e1       	ldi	r24, 0x19	; 25
    316a:	80 93 65 01 	sts	0x0165, r24
    316e:	34 c0       	rjmp	.+104    	; 0x31d8 <LCD_displayCharacter+0x2e2>
		}
		break;
	case Sending_Second_Nibble_SET_ENABLE:
		if(TimerRetVal1==NULL_PTR)
    3170:	80 91 72 01 	lds	r24, 0x0172
    3174:	90 91 73 01 	lds	r25, 0x0173
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	49 f4       	brne	.+18     	; 0x318e <LCD_displayCharacter+0x298>
		{
			TimerRetVal1=TIMER_Get_Status(&timer_config,1);
    317c:	80 e6       	ldi	r24, 0x60	; 96
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	61 e0       	ldi	r22, 0x01	; 1
    3182:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    3186:	90 93 73 01 	sts	0x0173, r25
    318a:	80 93 72 01 	sts	0x0172, r24
		}
		if(*TimerRetVal1==2)
    318e:	e0 91 72 01 	lds	r30, 0x0172
    3192:	f0 91 73 01 	lds	r31, 0x0173
    3196:	80 81       	ld	r24, Z
    3198:	82 30       	cpi	r24, 0x02	; 2
    319a:	f1 f4       	brne	.+60     	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    319c:	a8 e3       	ldi	r26, 0x38	; 56
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e8 e3       	ldi	r30, 0x38	; 56
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	87 7f       	andi	r24, 0xF7	; 247
    31a8:	8c 93       	st	X, r24
			*TimerRetVal1=0;
    31aa:	e0 91 72 01 	lds	r30, 0x0172
    31ae:	f0 91 73 01 	lds	r31, 0x0173
    31b2:	10 82       	st	Z, r1
			TimerRetVal1=NULL_PTR;
    31b4:	10 92 73 01 	sts	0x0173, r1
    31b8:	10 92 72 01 	sts	0x0172, r1
			Data_State = CMD_Sending;
    31bc:	84 e1       	ldi	r24, 0x14	; 20
    31be:	80 93 65 01 	sts	0x0165, r24
    31c2:	0a c0       	rjmp	.+20     	; 0x31d8 <LCD_displayCharacter+0x2e2>
		}
		break;
	case CMD_Sending:
		if(TimerRetVal1 == NULL_PTR)
    31c4:	80 91 72 01 	lds	r24, 0x0172
    31c8:	90 91 73 01 	lds	r25, 0x0173
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	21 f4       	brne	.+8      	; 0x31d8 <LCD_displayCharacter+0x2e2>
		{
			/*reset the function's state*/
			Data_State = OperationStarted;
    31d0:	8f ef       	ldi	r24, 0xFF	; 255
    31d2:	80 93 65 01 	sts	0x0165, r24
			/*process finished successfully*/
			ErrRetVal = OperationSuccess;
    31d6:	19 82       	std	Y+1, r1	; 0x01
	default:
		break;
	}
#endif
	/*return from function*/
	return ErrRetVal;
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <LCD_displayString>:
 * @param [in]  Str     -  String to send to LCD.
 *
 * @return function error state.
 */
LCD_ERROR_state_t  LCD_displayString(const char *Str)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <LCD_displayString+0x6>
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <LCD_displayString+0x8>
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	9b 83       	std	Y+3, r25	; 0x03
    31f6:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL_PTR == Str)
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	19 f4       	brne	.+6      	; 0x3206 <LCD_displayString+0x1e>
	{
		return E_LCD_NULL_PTR;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	8c 83       	std	Y+4, r24	; 0x04
    3204:	1c c0       	rjmp	.+56     	; 0x323e <LCD_displayString+0x56>
	}
	uint8_t i = 0;
    3206:	19 82       	std	Y+1, r1	; 0x01
    3208:	0e c0       	rjmp	.+28     	; 0x3226 <LCD_displayString+0x3e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	28 2f       	mov	r18, r24
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	fc 01       	movw	r30, r24
    3216:	e2 0f       	add	r30, r18
    3218:	f3 1f       	adc	r31, r19
    321a:	80 81       	ld	r24, Z
    321c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_displayCharacter>
		i++;
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	8f 5f       	subi	r24, 0xFF	; 255
    3224:	89 83       	std	Y+1, r24	; 0x01
	if(NULL_PTR == Str)
	{
		return E_LCD_NULL_PTR;
	}
	uint8_t i = 0;
	while(Str[i] != '\0')
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	9b 81       	ldd	r25, Y+3	; 0x03
    3230:	fc 01       	movw	r30, r24
    3232:	e2 0f       	add	r30, r18
    3234:	f3 1f       	adc	r31, r19
    3236:	80 81       	ld	r24, Z
    3238:	88 23       	and	r24, r24
    323a:	39 f7       	brne	.-50     	; 0x320a <LCD_displayString+0x22>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	 *********************************************************/
	return E_LCD_SUCCESS;
    323c:	1c 82       	std	Y+4, r1	; 0x04
    323e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <LCD_goToRowColumn>:
 * @param [in]  Col      -  Column position.
 *
 * @return function error state.
 */
LCD_ERROR_state_t  LCD_goToRowColumn(uint8_t row,uint8_t col)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	00 d0       	rcall	.+0      	; 0x3254 <LCD_goToRowColumn+0x6>
    3254:	00 d0       	rcall	.+0      	; 0x3256 <LCD_goToRowColumn+0x8>
    3256:	0f 92       	push	r0
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	8a 83       	std	Y+2, r24	; 0x02
    325e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address=0;
    3260:	19 82       	std	Y+1, r1	; 0x01

	/* first of all calculate the required address */
	switch(row)
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	28 2f       	mov	r18, r24
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	3d 83       	std	Y+5, r19	; 0x05
    326a:	2c 83       	std	Y+4, r18	; 0x04
    326c:	8c 81       	ldd	r24, Y+4	; 0x04
    326e:	9d 81       	ldd	r25, Y+5	; 0x05
    3270:	81 30       	cpi	r24, 0x01	; 1
    3272:	91 05       	cpc	r25, r1
    3274:	c1 f0       	breq	.+48     	; 0x32a6 <LCD_goToRowColumn+0x58>
    3276:	2c 81       	ldd	r18, Y+4	; 0x04
    3278:	3d 81       	ldd	r19, Y+5	; 0x05
    327a:	22 30       	cpi	r18, 0x02	; 2
    327c:	31 05       	cpc	r19, r1
    327e:	2c f4       	brge	.+10     	; 0x328a <LCD_goToRowColumn+0x3c>
    3280:	8c 81       	ldd	r24, Y+4	; 0x04
    3282:	9d 81       	ldd	r25, Y+5	; 0x05
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	61 f0       	breq	.+24     	; 0x32a0 <LCD_goToRowColumn+0x52>
    3288:	19 c0       	rjmp	.+50     	; 0x32bc <LCD_goToRowColumn+0x6e>
    328a:	2c 81       	ldd	r18, Y+4	; 0x04
    328c:	3d 81       	ldd	r19, Y+5	; 0x05
    328e:	22 30       	cpi	r18, 0x02	; 2
    3290:	31 05       	cpc	r19, r1
    3292:	69 f0       	breq	.+26     	; 0x32ae <LCD_goToRowColumn+0x60>
    3294:	8c 81       	ldd	r24, Y+4	; 0x04
    3296:	9d 81       	ldd	r25, Y+5	; 0x05
    3298:	83 30       	cpi	r24, 0x03	; 3
    329a:	91 05       	cpc	r25, r1
    329c:	61 f0       	breq	.+24     	; 0x32b6 <LCD_goToRowColumn+0x68>
    329e:	0e c0       	rjmp	.+28     	; 0x32bc <LCD_goToRowColumn+0x6e>
	{
	case 0:
		Address=col;
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	0b c0       	rjmp	.+22     	; 0x32bc <LCD_goToRowColumn+0x6e>
		break;
	case 1:
		Address=col+0x40;
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	80 5c       	subi	r24, 0xC0	; 192
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	07 c0       	rjmp	.+14     	; 0x32bc <LCD_goToRowColumn+0x6e>
		break;
	case 2:
		Address=col+0x10;
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	80 5f       	subi	r24, 0xF0	; 240
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <LCD_goToRowColumn+0x6e>
		break;
	case 3:
		Address=col+0x50;
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	80 5b       	subi	r24, 0xB0	; 176
    32ba:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_SendCommand(Address | SET_CURSOR_LOCATION);
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	80 68       	ori	r24, 0x80	; 128
    32c0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_SendCommand>

	return E_LCD_SUCCESS;
    32c4:	80 e0       	ldi	r24, 0x00	; 0
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <LCD_displayStringRowColumn>:
 * @param [in]  Str      -  String to send to LCD.
 *
 * @return function error state.
 */
LCD_ERROR_state_t LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	00 d0       	rcall	.+0      	; 0x32dc <LCD_displayStringRowColumn+0x6>
    32dc:	00 d0       	rcall	.+0      	; 0x32de <LCD_displayStringRowColumn+0x8>
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	6a 83       	std	Y+2, r22	; 0x02
    32e6:	5c 83       	std	Y+4, r21	; 0x04
    32e8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	6a 81       	ldd	r22, Y+2	; 0x02
    32ee:	0e 94 27 19 	call	0x324e	; 0x324e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	9c 81       	ldd	r25, Y+4	; 0x04
    32f6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_displayString>
	return E_LCD_SUCCESS;
    32fa:	80 e0       	ldi	r24, 0x00	; 0

}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <LCD_VidWriteNumber>:
 * @param [in]  a-Number     -  Number to send to LCD.
 *
 * @return function error state.
 */
LCD_ERROR_state_t LCD_VidWriteNumber (uint64_t a_Number)
{
    330a:	af 92       	push	r10
    330c:	bf 92       	push	r11
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	c6 56       	subi	r28, 0x66	; 102
    3324:	d0 40       	sbci	r29, 0x00	; 0
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	29 87       	std	Y+9, r18	; 0x09
    3332:	3a 87       	std	Y+10, r19	; 0x0a
    3334:	4b 87       	std	Y+11, r20	; 0x0b
    3336:	5c 87       	std	Y+12, r21	; 0x0c
    3338:	6d 87       	std	Y+13, r22	; 0x0d
    333a:	7e 87       	std	Y+14, r23	; 0x0e
    333c:	8f 87       	std	Y+15, r24	; 0x0f
    333e:	98 8b       	std	Y+16, r25	; 0x10
	uint64_t reversed=1;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	89 83       	std	Y+1, r24	; 0x01
    3344:	1a 82       	std	Y+2, r1	; 0x02
    3346:	1b 82       	std	Y+3, r1	; 0x03
    3348:	1c 82       	std	Y+4, r1	; 0x04
    334a:	1d 82       	std	Y+5, r1	; 0x05
    334c:	1e 82       	std	Y+6, r1	; 0x06
    334e:	1f 82       	std	Y+7, r1	; 0x07
    3350:	18 86       	std	Y+8, r1	; 0x08
	if(a_Number==0)
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	89 2b       	or	r24, r25
    3358:	9b 85       	ldd	r25, Y+11	; 0x0b
    335a:	89 2b       	or	r24, r25
    335c:	9c 85       	ldd	r25, Y+12	; 0x0c
    335e:	89 2b       	or	r24, r25
    3360:	9d 85       	ldd	r25, Y+13	; 0x0d
    3362:	89 2b       	or	r24, r25
    3364:	9e 85       	ldd	r25, Y+14	; 0x0e
    3366:	89 2b       	or	r24, r25
    3368:	9f 85       	ldd	r25, Y+15	; 0x0f
    336a:	89 2b       	or	r24, r25
    336c:	98 89       	ldd	r25, Y+16	; 0x10
    336e:	89 2b       	or	r24, r25
    3370:	88 23       	and	r24, r24
    3372:	09 f0       	breq	.+2      	; 0x3376 <LCD_VidWriteNumber+0x6c>
    3374:	62 c3       	rjmp	.+1732   	; 0x3a3a <LCD_VidWriteNumber+0x730>
	{
		LCD_displayCharacter('0');
    3376:	80 e3       	ldi	r24, 0x30	; 48
    3378:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_displayCharacter>
    337c:	5e c3       	rjmp	.+1724   	; 0x3a3a <LCD_VidWriteNumber+0x730>
	}
	while(a_Number != 0)
	{
		reversed = (reversed * 10)+(a_Number%10);
    337e:	29 81       	ldd	r18, Y+1	; 0x01
    3380:	3a 81       	ldd	r19, Y+2	; 0x02
    3382:	4b 81       	ldd	r20, Y+3	; 0x03
    3384:	5c 81       	ldd	r21, Y+4	; 0x04
    3386:	6d 81       	ldd	r22, Y+5	; 0x05
    3388:	7e 81       	ldd	r23, Y+6	; 0x06
    338a:	8f 81       	ldd	r24, Y+7	; 0x07
    338c:	98 85       	ldd	r25, Y+8	; 0x08
    338e:	a2 2e       	mov	r10, r18
    3390:	b3 2e       	mov	r11, r19
    3392:	c4 2e       	mov	r12, r20
    3394:	d5 2e       	mov	r13, r21
    3396:	e6 2e       	mov	r14, r22
    3398:	f7 2e       	mov	r15, r23
    339a:	08 2f       	mov	r16, r24
    339c:	19 2f       	mov	r17, r25
    339e:	2a 2d       	mov	r18, r10
    33a0:	3b 2d       	mov	r19, r11
    33a2:	4c 2d       	mov	r20, r12
    33a4:	5d 2d       	mov	r21, r13
    33a6:	6e 2d       	mov	r22, r14
    33a8:	7f 2d       	mov	r23, r15
    33aa:	80 2f       	mov	r24, r16
    33ac:	91 2f       	mov	r25, r17
    33ae:	01 e0       	ldi	r16, 0x01	; 1
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    33b4:	29 a3       	std	Y+33, r18	; 0x21
    33b6:	3a a3       	std	Y+34, r19	; 0x22
    33b8:	4b a3       	std	Y+35, r20	; 0x23
    33ba:	5c a3       	std	Y+36, r21	; 0x24
    33bc:	6d a3       	std	Y+37, r22	; 0x25
    33be:	7e a3       	std	Y+38, r23	; 0x26
    33c0:	8f a3       	std	Y+39, r24	; 0x27
    33c2:	98 a7       	std	Y+40, r25	; 0x28
    33c4:	29 a1       	ldd	r18, Y+33	; 0x21
    33c6:	3a a1       	ldd	r19, Y+34	; 0x22
    33c8:	4b a1       	ldd	r20, Y+35	; 0x23
    33ca:	5c a1       	ldd	r21, Y+36	; 0x24
    33cc:	6d a1       	ldd	r22, Y+37	; 0x25
    33ce:	7e a1       	ldd	r23, Y+38	; 0x26
    33d0:	8f a1       	ldd	r24, Y+39	; 0x27
    33d2:	98 a5       	ldd	r25, Y+40	; 0x28
    33d4:	02 e0       	ldi	r16, 0x02	; 2
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    33da:	29 a7       	std	Y+41, r18	; 0x29
    33dc:	3a a7       	std	Y+42, r19	; 0x2a
    33de:	4b a7       	std	Y+43, r20	; 0x2b
    33e0:	5c a7       	std	Y+44, r21	; 0x2c
    33e2:	6d a7       	std	Y+45, r22	; 0x2d
    33e4:	7e a7       	std	Y+46, r23	; 0x2e
    33e6:	8f a7       	std	Y+47, r24	; 0x2f
    33e8:	98 ab       	std	Y+48, r25	; 0x30
    33ea:	89 a1       	ldd	r24, Y+33	; 0x21
    33ec:	99 a5       	ldd	r25, Y+41	; 0x29
    33ee:	89 0f       	add	r24, r25
    33f0:	89 ab       	std	Y+49, r24	; 0x31
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	89 af       	std	Y+57, r24	; 0x39
    33f6:	99 a9       	ldd	r25, Y+49	; 0x31
    33f8:	89 a1       	ldd	r24, Y+33	; 0x21
    33fa:	98 17       	cp	r25, r24
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <LCD_VidWriteNumber+0xf6>
    33fe:	19 ae       	std	Y+57, r1	; 0x39
    3400:	9a a1       	ldd	r25, Y+34	; 0x22
    3402:	8a a5       	ldd	r24, Y+42	; 0x2a
    3404:	98 0f       	add	r25, r24
    3406:	9a ab       	std	Y+50, r25	; 0x32
    3408:	91 e0       	ldi	r25, 0x01	; 1
    340a:	9a af       	std	Y+58, r25	; 0x3a
    340c:	8a a9       	ldd	r24, Y+50	; 0x32
    340e:	9a a1       	ldd	r25, Y+34	; 0x22
    3410:	89 17       	cp	r24, r25
    3412:	08 f0       	brcs	.+2      	; 0x3416 <LCD_VidWriteNumber+0x10c>
    3414:	1a ae       	std	Y+58, r1	; 0x3a
    3416:	89 ad       	ldd	r24, Y+57	; 0x39
    3418:	9a a9       	ldd	r25, Y+50	; 0x32
    341a:	89 0f       	add	r24, r25
    341c:	8b af       	std	Y+59, r24	; 0x3b
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	8c af       	std	Y+60, r24	; 0x3c
    3422:	9b ad       	ldd	r25, Y+59	; 0x3b
    3424:	8a a9       	ldd	r24, Y+50	; 0x32
    3426:	98 17       	cp	r25, r24
    3428:	08 f0       	brcs	.+2      	; 0x342c <LCD_VidWriteNumber+0x122>
    342a:	1c ae       	std	Y+60, r1	; 0x3c
    342c:	9a ad       	ldd	r25, Y+58	; 0x3a
    342e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3430:	98 2b       	or	r25, r24
    3432:	9a af       	std	Y+58, r25	; 0x3a
    3434:	9b ad       	ldd	r25, Y+59	; 0x3b
    3436:	9a ab       	std	Y+50, r25	; 0x32
    3438:	8b a1       	ldd	r24, Y+35	; 0x23
    343a:	9b a5       	ldd	r25, Y+43	; 0x2b
    343c:	89 0f       	add	r24, r25
    343e:	8b ab       	std	Y+51, r24	; 0x33
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	8d af       	std	Y+61, r24	; 0x3d
    3444:	9b a9       	ldd	r25, Y+51	; 0x33
    3446:	8b a1       	ldd	r24, Y+35	; 0x23
    3448:	98 17       	cp	r25, r24
    344a:	08 f0       	brcs	.+2      	; 0x344e <LCD_VidWriteNumber+0x144>
    344c:	1d ae       	std	Y+61, r1	; 0x3d
    344e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3450:	8b a9       	ldd	r24, Y+51	; 0x33
    3452:	98 0f       	add	r25, r24
    3454:	9e af       	std	Y+62, r25	; 0x3e
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9f af       	std	Y+63, r25	; 0x3f
    345a:	8e ad       	ldd	r24, Y+62	; 0x3e
    345c:	9b a9       	ldd	r25, Y+51	; 0x33
    345e:	89 17       	cp	r24, r25
    3460:	08 f0       	brcs	.+2      	; 0x3464 <LCD_VidWriteNumber+0x15a>
    3462:	1f ae       	std	Y+63, r1	; 0x3f
    3464:	8d ad       	ldd	r24, Y+61	; 0x3d
    3466:	9f ad       	ldd	r25, Y+63	; 0x3f
    3468:	89 2b       	or	r24, r25
    346a:	8d af       	std	Y+61, r24	; 0x3d
    346c:	8e ad       	ldd	r24, Y+62	; 0x3e
    346e:	8b ab       	std	Y+51, r24	; 0x33
    3470:	9c a1       	ldd	r25, Y+36	; 0x24
    3472:	8c a5       	ldd	r24, Y+44	; 0x2c
    3474:	98 0f       	add	r25, r24
    3476:	9c ab       	std	Y+52, r25	; 0x34
    3478:	91 e0       	ldi	r25, 0x01	; 1
    347a:	21 96       	adiw	r28, 0x01	; 1
    347c:	9f af       	std	Y+63, r25	; 0x3f
    347e:	21 97       	sbiw	r28, 0x01	; 1
    3480:	8c a9       	ldd	r24, Y+52	; 0x34
    3482:	9c a1       	ldd	r25, Y+36	; 0x24
    3484:	89 17       	cp	r24, r25
    3486:	18 f0       	brcs	.+6      	; 0x348e <LCD_VidWriteNumber+0x184>
    3488:	21 96       	adiw	r28, 0x01	; 1
    348a:	1f ae       	std	Y+63, r1	; 0x3f
    348c:	21 97       	sbiw	r28, 0x01	; 1
    348e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3490:	9c a9       	ldd	r25, Y+52	; 0x34
    3492:	89 0f       	add	r24, r25
    3494:	22 96       	adiw	r28, 0x02	; 2
    3496:	8f af       	std	Y+63, r24	; 0x3f
    3498:	22 97       	sbiw	r28, 0x02	; 2
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	23 96       	adiw	r28, 0x03	; 3
    349e:	8f af       	std	Y+63, r24	; 0x3f
    34a0:	23 97       	sbiw	r28, 0x03	; 3
    34a2:	22 96       	adiw	r28, 0x02	; 2
    34a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    34a6:	22 97       	sbiw	r28, 0x02	; 2
    34a8:	8c a9       	ldd	r24, Y+52	; 0x34
    34aa:	98 17       	cp	r25, r24
    34ac:	18 f0       	brcs	.+6      	; 0x34b4 <LCD_VidWriteNumber+0x1aa>
    34ae:	23 96       	adiw	r28, 0x03	; 3
    34b0:	1f ae       	std	Y+63, r1	; 0x3f
    34b2:	23 97       	sbiw	r28, 0x03	; 3
    34b4:	21 96       	adiw	r28, 0x01	; 1
    34b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    34b8:	21 97       	sbiw	r28, 0x01	; 1
    34ba:	23 96       	adiw	r28, 0x03	; 3
    34bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    34be:	23 97       	sbiw	r28, 0x03	; 3
    34c0:	98 2b       	or	r25, r24
    34c2:	21 96       	adiw	r28, 0x01	; 1
    34c4:	9f af       	std	Y+63, r25	; 0x3f
    34c6:	21 97       	sbiw	r28, 0x01	; 1
    34c8:	22 96       	adiw	r28, 0x02	; 2
    34ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    34cc:	22 97       	sbiw	r28, 0x02	; 2
    34ce:	9c ab       	std	Y+52, r25	; 0x34
    34d0:	8d a1       	ldd	r24, Y+37	; 0x25
    34d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    34d4:	89 0f       	add	r24, r25
    34d6:	8d ab       	std	Y+53, r24	; 0x35
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	24 96       	adiw	r28, 0x04	; 4
    34dc:	8f af       	std	Y+63, r24	; 0x3f
    34de:	24 97       	sbiw	r28, 0x04	; 4
    34e0:	9d a9       	ldd	r25, Y+53	; 0x35
    34e2:	8d a1       	ldd	r24, Y+37	; 0x25
    34e4:	98 17       	cp	r25, r24
    34e6:	18 f0       	brcs	.+6      	; 0x34ee <LCD_VidWriteNumber+0x1e4>
    34e8:	24 96       	adiw	r28, 0x04	; 4
    34ea:	1f ae       	std	Y+63, r1	; 0x3f
    34ec:	24 97       	sbiw	r28, 0x04	; 4
    34ee:	21 96       	adiw	r28, 0x01	; 1
    34f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    34f2:	21 97       	sbiw	r28, 0x01	; 1
    34f4:	8d a9       	ldd	r24, Y+53	; 0x35
    34f6:	98 0f       	add	r25, r24
    34f8:	25 96       	adiw	r28, 0x05	; 5
    34fa:	9f af       	std	Y+63, r25	; 0x3f
    34fc:	25 97       	sbiw	r28, 0x05	; 5
    34fe:	91 e0       	ldi	r25, 0x01	; 1
    3500:	26 96       	adiw	r28, 0x06	; 6
    3502:	9f af       	std	Y+63, r25	; 0x3f
    3504:	26 97       	sbiw	r28, 0x06	; 6
    3506:	25 96       	adiw	r28, 0x05	; 5
    3508:	8f ad       	ldd	r24, Y+63	; 0x3f
    350a:	25 97       	sbiw	r28, 0x05	; 5
    350c:	9d a9       	ldd	r25, Y+53	; 0x35
    350e:	89 17       	cp	r24, r25
    3510:	18 f0       	brcs	.+6      	; 0x3518 <LCD_VidWriteNumber+0x20e>
    3512:	26 96       	adiw	r28, 0x06	; 6
    3514:	1f ae       	std	Y+63, r1	; 0x3f
    3516:	26 97       	sbiw	r28, 0x06	; 6
    3518:	24 96       	adiw	r28, 0x04	; 4
    351a:	8f ad       	ldd	r24, Y+63	; 0x3f
    351c:	24 97       	sbiw	r28, 0x04	; 4
    351e:	26 96       	adiw	r28, 0x06	; 6
    3520:	9f ad       	ldd	r25, Y+63	; 0x3f
    3522:	26 97       	sbiw	r28, 0x06	; 6
    3524:	89 2b       	or	r24, r25
    3526:	24 96       	adiw	r28, 0x04	; 4
    3528:	8f af       	std	Y+63, r24	; 0x3f
    352a:	24 97       	sbiw	r28, 0x04	; 4
    352c:	25 96       	adiw	r28, 0x05	; 5
    352e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3530:	25 97       	sbiw	r28, 0x05	; 5
    3532:	8d ab       	std	Y+53, r24	; 0x35
    3534:	9e a1       	ldd	r25, Y+38	; 0x26
    3536:	8e a5       	ldd	r24, Y+46	; 0x2e
    3538:	98 0f       	add	r25, r24
    353a:	9e ab       	std	Y+54, r25	; 0x36
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	27 96       	adiw	r28, 0x07	; 7
    3540:	9f af       	std	Y+63, r25	; 0x3f
    3542:	27 97       	sbiw	r28, 0x07	; 7
    3544:	8e a9       	ldd	r24, Y+54	; 0x36
    3546:	9e a1       	ldd	r25, Y+38	; 0x26
    3548:	89 17       	cp	r24, r25
    354a:	18 f0       	brcs	.+6      	; 0x3552 <LCD_VidWriteNumber+0x248>
    354c:	27 96       	adiw	r28, 0x07	; 7
    354e:	1f ae       	std	Y+63, r1	; 0x3f
    3550:	27 97       	sbiw	r28, 0x07	; 7
    3552:	24 96       	adiw	r28, 0x04	; 4
    3554:	8f ad       	ldd	r24, Y+63	; 0x3f
    3556:	24 97       	sbiw	r28, 0x04	; 4
    3558:	9e a9       	ldd	r25, Y+54	; 0x36
    355a:	89 0f       	add	r24, r25
    355c:	28 96       	adiw	r28, 0x08	; 8
    355e:	8f af       	std	Y+63, r24	; 0x3f
    3560:	28 97       	sbiw	r28, 0x08	; 8
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	29 96       	adiw	r28, 0x09	; 9
    3566:	8f af       	std	Y+63, r24	; 0x3f
    3568:	29 97       	sbiw	r28, 0x09	; 9
    356a:	28 96       	adiw	r28, 0x08	; 8
    356c:	9f ad       	ldd	r25, Y+63	; 0x3f
    356e:	28 97       	sbiw	r28, 0x08	; 8
    3570:	8e a9       	ldd	r24, Y+54	; 0x36
    3572:	98 17       	cp	r25, r24
    3574:	18 f0       	brcs	.+6      	; 0x357c <LCD_VidWriteNumber+0x272>
    3576:	29 96       	adiw	r28, 0x09	; 9
    3578:	1f ae       	std	Y+63, r1	; 0x3f
    357a:	29 97       	sbiw	r28, 0x09	; 9
    357c:	27 96       	adiw	r28, 0x07	; 7
    357e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3580:	27 97       	sbiw	r28, 0x07	; 7
    3582:	29 96       	adiw	r28, 0x09	; 9
    3584:	8f ad       	ldd	r24, Y+63	; 0x3f
    3586:	29 97       	sbiw	r28, 0x09	; 9
    3588:	98 2b       	or	r25, r24
    358a:	27 96       	adiw	r28, 0x07	; 7
    358c:	9f af       	std	Y+63, r25	; 0x3f
    358e:	27 97       	sbiw	r28, 0x07	; 7
    3590:	28 96       	adiw	r28, 0x08	; 8
    3592:	9f ad       	ldd	r25, Y+63	; 0x3f
    3594:	28 97       	sbiw	r28, 0x08	; 8
    3596:	9e ab       	std	Y+54, r25	; 0x36
    3598:	8f a1       	ldd	r24, Y+39	; 0x27
    359a:	9f a5       	ldd	r25, Y+47	; 0x2f
    359c:	89 0f       	add	r24, r25
    359e:	8f ab       	std	Y+55, r24	; 0x37
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	2a 96       	adiw	r28, 0x0a	; 10
    35a4:	8f af       	std	Y+63, r24	; 0x3f
    35a6:	2a 97       	sbiw	r28, 0x0a	; 10
    35a8:	9f a9       	ldd	r25, Y+55	; 0x37
    35aa:	8f a1       	ldd	r24, Y+39	; 0x27
    35ac:	98 17       	cp	r25, r24
    35ae:	18 f0       	brcs	.+6      	; 0x35b6 <LCD_VidWriteNumber+0x2ac>
    35b0:	2a 96       	adiw	r28, 0x0a	; 10
    35b2:	1f ae       	std	Y+63, r1	; 0x3f
    35b4:	2a 97       	sbiw	r28, 0x0a	; 10
    35b6:	27 96       	adiw	r28, 0x07	; 7
    35b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ba:	27 97       	sbiw	r28, 0x07	; 7
    35bc:	8f a9       	ldd	r24, Y+55	; 0x37
    35be:	98 0f       	add	r25, r24
    35c0:	2b 96       	adiw	r28, 0x0b	; 11
    35c2:	9f af       	std	Y+63, r25	; 0x3f
    35c4:	2b 97       	sbiw	r28, 0x0b	; 11
    35c6:	91 e0       	ldi	r25, 0x01	; 1
    35c8:	2c 96       	adiw	r28, 0x0c	; 12
    35ca:	9f af       	std	Y+63, r25	; 0x3f
    35cc:	2c 97       	sbiw	r28, 0x0c	; 12
    35ce:	2b 96       	adiw	r28, 0x0b	; 11
    35d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    35d2:	2b 97       	sbiw	r28, 0x0b	; 11
    35d4:	9f a9       	ldd	r25, Y+55	; 0x37
    35d6:	89 17       	cp	r24, r25
    35d8:	18 f0       	brcs	.+6      	; 0x35e0 <LCD_VidWriteNumber+0x2d6>
    35da:	2c 96       	adiw	r28, 0x0c	; 12
    35dc:	1f ae       	std	Y+63, r1	; 0x3f
    35de:	2c 97       	sbiw	r28, 0x0c	; 12
    35e0:	2a 96       	adiw	r28, 0x0a	; 10
    35e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    35e4:	2a 97       	sbiw	r28, 0x0a	; 10
    35e6:	2c 96       	adiw	r28, 0x0c	; 12
    35e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ea:	2c 97       	sbiw	r28, 0x0c	; 12
    35ec:	89 2b       	or	r24, r25
    35ee:	2a 96       	adiw	r28, 0x0a	; 10
    35f0:	8f af       	std	Y+63, r24	; 0x3f
    35f2:	2a 97       	sbiw	r28, 0x0a	; 10
    35f4:	2b 96       	adiw	r28, 0x0b	; 11
    35f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    35f8:	2b 97       	sbiw	r28, 0x0b	; 11
    35fa:	8f ab       	std	Y+55, r24	; 0x37
    35fc:	98 a5       	ldd	r25, Y+40	; 0x28
    35fe:	88 a9       	ldd	r24, Y+48	; 0x30
    3600:	98 0f       	add	r25, r24
    3602:	98 af       	std	Y+56, r25	; 0x38
    3604:	2a 96       	adiw	r28, 0x0a	; 10
    3606:	8f ad       	ldd	r24, Y+63	; 0x3f
    3608:	2a 97       	sbiw	r28, 0x0a	; 10
    360a:	98 ad       	ldd	r25, Y+56	; 0x38
    360c:	89 0f       	add	r24, r25
    360e:	88 af       	std	Y+56, r24	; 0x38
    3610:	89 a9       	ldd	r24, Y+49	; 0x31
    3612:	89 8f       	std	Y+25, r24	; 0x19
    3614:	9a a9       	ldd	r25, Y+50	; 0x32
    3616:	9a 8f       	std	Y+26, r25	; 0x1a
    3618:	8b a9       	ldd	r24, Y+51	; 0x33
    361a:	8b 8f       	std	Y+27, r24	; 0x1b
    361c:	9c a9       	ldd	r25, Y+52	; 0x34
    361e:	9c 8f       	std	Y+28, r25	; 0x1c
    3620:	8d a9       	ldd	r24, Y+53	; 0x35
    3622:	8d 8f       	std	Y+29, r24	; 0x1d
    3624:	9e a9       	ldd	r25, Y+54	; 0x36
    3626:	9e 8f       	std	Y+30, r25	; 0x1e
    3628:	8f a9       	ldd	r24, Y+55	; 0x37
    362a:	8f 8f       	std	Y+31, r24	; 0x1f
    362c:	98 ad       	ldd	r25, Y+56	; 0x38
    362e:	98 a3       	std	Y+32, r25	; 0x20
    3630:	a9 84       	ldd	r10, Y+9	; 0x09
    3632:	ba 84       	ldd	r11, Y+10	; 0x0a
    3634:	cb 84       	ldd	r12, Y+11	; 0x0b
    3636:	dc 84       	ldd	r13, Y+12	; 0x0c
    3638:	ed 84       	ldd	r14, Y+13	; 0x0d
    363a:	fe 84       	ldd	r15, Y+14	; 0x0e
    363c:	0f 85       	ldd	r16, Y+15	; 0x0f
    363e:	18 89       	ldd	r17, Y+16	; 0x10
    3640:	2a 2d       	mov	r18, r10
    3642:	3b 2d       	mov	r19, r11
    3644:	4c 2d       	mov	r20, r12
    3646:	5d 2d       	mov	r21, r13
    3648:	6e 2d       	mov	r22, r14
    364a:	7f 2d       	mov	r23, r15
    364c:	80 2f       	mov	r24, r16
    364e:	91 2f       	mov	r25, r17
    3650:	0f 2e       	mov	r0, r31
    3652:	fa e0       	ldi	r31, 0x0A	; 10
    3654:	af 2e       	mov	r10, r31
    3656:	f0 2d       	mov	r31, r0
    3658:	bb 24       	eor	r11, r11
    365a:	cc 24       	eor	r12, r12
    365c:	dd 24       	eor	r13, r13
    365e:	ee 24       	eor	r14, r14
    3660:	ff 24       	eor	r15, r15
    3662:	00 e0       	ldi	r16, 0x00	; 0
    3664:	10 e0       	ldi	r17, 0x00	; 0
    3666:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    366a:	a2 2e       	mov	r10, r18
    366c:	b3 2e       	mov	r11, r19
    366e:	c4 2e       	mov	r12, r20
    3670:	d5 2e       	mov	r13, r21
    3672:	e6 2e       	mov	r14, r22
    3674:	f7 2e       	mov	r15, r23
    3676:	08 2f       	mov	r16, r24
    3678:	19 2f       	mov	r17, r25
    367a:	a9 8a       	std	Y+17, r10	; 0x11
    367c:	ba 8a       	std	Y+18, r11	; 0x12
    367e:	cb 8a       	std	Y+19, r12	; 0x13
    3680:	dc 8a       	std	Y+20, r13	; 0x14
    3682:	ed 8a       	std	Y+21, r14	; 0x15
    3684:	fe 8a       	std	Y+22, r15	; 0x16
    3686:	0f 8b       	std	Y+23, r16	; 0x17
    3688:	18 8f       	std	Y+24, r17	; 0x18
    368a:	89 8d       	ldd	r24, Y+25	; 0x19
    368c:	99 89       	ldd	r25, Y+17	; 0x11
    368e:	89 0f       	add	r24, r25
    3690:	2d 96       	adiw	r28, 0x0d	; 13
    3692:	8f af       	std	Y+63, r24	; 0x3f
    3694:	2d 97       	sbiw	r28, 0x0d	; 13
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	65 96       	adiw	r28, 0x15	; 21
    369a:	8f af       	std	Y+63, r24	; 0x3f
    369c:	65 97       	sbiw	r28, 0x15	; 21
    369e:	2d 96       	adiw	r28, 0x0d	; 13
    36a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36a2:	2d 97       	sbiw	r28, 0x0d	; 13
    36a4:	89 8d       	ldd	r24, Y+25	; 0x19
    36a6:	98 17       	cp	r25, r24
    36a8:	18 f0       	brcs	.+6      	; 0x36b0 <LCD_VidWriteNumber+0x3a6>
    36aa:	65 96       	adiw	r28, 0x15	; 21
    36ac:	1f ae       	std	Y+63, r1	; 0x3f
    36ae:	65 97       	sbiw	r28, 0x15	; 21
    36b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36b2:	8a 89       	ldd	r24, Y+18	; 0x12
    36b4:	98 0f       	add	r25, r24
    36b6:	2e 96       	adiw	r28, 0x0e	; 14
    36b8:	9f af       	std	Y+63, r25	; 0x3f
    36ba:	2e 97       	sbiw	r28, 0x0e	; 14
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	66 96       	adiw	r28, 0x16	; 22
    36c0:	9f af       	std	Y+63, r25	; 0x3f
    36c2:	66 97       	sbiw	r28, 0x16	; 22
    36c4:	2e 96       	adiw	r28, 0x0e	; 14
    36c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    36c8:	2e 97       	sbiw	r28, 0x0e	; 14
    36ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36cc:	89 17       	cp	r24, r25
    36ce:	18 f0       	brcs	.+6      	; 0x36d6 <LCD_VidWriteNumber+0x3cc>
    36d0:	66 96       	adiw	r28, 0x16	; 22
    36d2:	1f ae       	std	Y+63, r1	; 0x3f
    36d4:	66 97       	sbiw	r28, 0x16	; 22
    36d6:	65 96       	adiw	r28, 0x15	; 21
    36d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    36da:	65 97       	sbiw	r28, 0x15	; 21
    36dc:	2e 96       	adiw	r28, 0x0e	; 14
    36de:	9f ad       	ldd	r25, Y+63	; 0x3f
    36e0:	2e 97       	sbiw	r28, 0x0e	; 14
    36e2:	89 0f       	add	r24, r25
    36e4:	67 96       	adiw	r28, 0x17	; 23
    36e6:	8f af       	std	Y+63, r24	; 0x3f
    36e8:	67 97       	sbiw	r28, 0x17	; 23
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	68 96       	adiw	r28, 0x18	; 24
    36ee:	8f af       	std	Y+63, r24	; 0x3f
    36f0:	68 97       	sbiw	r28, 0x18	; 24
    36f2:	67 96       	adiw	r28, 0x17	; 23
    36f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    36f6:	67 97       	sbiw	r28, 0x17	; 23
    36f8:	2e 96       	adiw	r28, 0x0e	; 14
    36fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    36fc:	2e 97       	sbiw	r28, 0x0e	; 14
    36fe:	98 17       	cp	r25, r24
    3700:	18 f0       	brcs	.+6      	; 0x3708 <LCD_VidWriteNumber+0x3fe>
    3702:	68 96       	adiw	r28, 0x18	; 24
    3704:	1f ae       	std	Y+63, r1	; 0x3f
    3706:	68 97       	sbiw	r28, 0x18	; 24
    3708:	66 96       	adiw	r28, 0x16	; 22
    370a:	9f ad       	ldd	r25, Y+63	; 0x3f
    370c:	66 97       	sbiw	r28, 0x16	; 22
    370e:	68 96       	adiw	r28, 0x18	; 24
    3710:	8f ad       	ldd	r24, Y+63	; 0x3f
    3712:	68 97       	sbiw	r28, 0x18	; 24
    3714:	98 2b       	or	r25, r24
    3716:	66 96       	adiw	r28, 0x16	; 22
    3718:	9f af       	std	Y+63, r25	; 0x3f
    371a:	66 97       	sbiw	r28, 0x16	; 22
    371c:	67 96       	adiw	r28, 0x17	; 23
    371e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3720:	67 97       	sbiw	r28, 0x17	; 23
    3722:	2e 96       	adiw	r28, 0x0e	; 14
    3724:	9f af       	std	Y+63, r25	; 0x3f
    3726:	2e 97       	sbiw	r28, 0x0e	; 14
    3728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372a:	9b 89       	ldd	r25, Y+19	; 0x13
    372c:	89 0f       	add	r24, r25
    372e:	2f 96       	adiw	r28, 0x0f	; 15
    3730:	8f af       	std	Y+63, r24	; 0x3f
    3732:	2f 97       	sbiw	r28, 0x0f	; 15
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	69 96       	adiw	r28, 0x19	; 25
    3738:	8f af       	std	Y+63, r24	; 0x3f
    373a:	69 97       	sbiw	r28, 0x19	; 25
    373c:	2f 96       	adiw	r28, 0x0f	; 15
    373e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3740:	2f 97       	sbiw	r28, 0x0f	; 15
    3742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3744:	98 17       	cp	r25, r24
    3746:	18 f0       	brcs	.+6      	; 0x374e <LCD_VidWriteNumber+0x444>
    3748:	69 96       	adiw	r28, 0x19	; 25
    374a:	1f ae       	std	Y+63, r1	; 0x3f
    374c:	69 97       	sbiw	r28, 0x19	; 25
    374e:	66 96       	adiw	r28, 0x16	; 22
    3750:	9f ad       	ldd	r25, Y+63	; 0x3f
    3752:	66 97       	sbiw	r28, 0x16	; 22
    3754:	2f 96       	adiw	r28, 0x0f	; 15
    3756:	8f ad       	ldd	r24, Y+63	; 0x3f
    3758:	2f 97       	sbiw	r28, 0x0f	; 15
    375a:	98 0f       	add	r25, r24
    375c:	6a 96       	adiw	r28, 0x1a	; 26
    375e:	9f af       	std	Y+63, r25	; 0x3f
    3760:	6a 97       	sbiw	r28, 0x1a	; 26
    3762:	91 e0       	ldi	r25, 0x01	; 1
    3764:	6b 96       	adiw	r28, 0x1b	; 27
    3766:	9f af       	std	Y+63, r25	; 0x3f
    3768:	6b 97       	sbiw	r28, 0x1b	; 27
    376a:	6a 96       	adiw	r28, 0x1a	; 26
    376c:	8f ad       	ldd	r24, Y+63	; 0x3f
    376e:	6a 97       	sbiw	r28, 0x1a	; 26
    3770:	2f 96       	adiw	r28, 0x0f	; 15
    3772:	9f ad       	ldd	r25, Y+63	; 0x3f
    3774:	2f 97       	sbiw	r28, 0x0f	; 15
    3776:	89 17       	cp	r24, r25
    3778:	18 f0       	brcs	.+6      	; 0x3780 <LCD_VidWriteNumber+0x476>
    377a:	6b 96       	adiw	r28, 0x1b	; 27
    377c:	1f ae       	std	Y+63, r1	; 0x3f
    377e:	6b 97       	sbiw	r28, 0x1b	; 27
    3780:	69 96       	adiw	r28, 0x19	; 25
    3782:	8f ad       	ldd	r24, Y+63	; 0x3f
    3784:	69 97       	sbiw	r28, 0x19	; 25
    3786:	6b 96       	adiw	r28, 0x1b	; 27
    3788:	9f ad       	ldd	r25, Y+63	; 0x3f
    378a:	6b 97       	sbiw	r28, 0x1b	; 27
    378c:	89 2b       	or	r24, r25
    378e:	69 96       	adiw	r28, 0x19	; 25
    3790:	8f af       	std	Y+63, r24	; 0x3f
    3792:	69 97       	sbiw	r28, 0x19	; 25
    3794:	6a 96       	adiw	r28, 0x1a	; 26
    3796:	8f ad       	ldd	r24, Y+63	; 0x3f
    3798:	6a 97       	sbiw	r28, 0x1a	; 26
    379a:	2f 96       	adiw	r28, 0x0f	; 15
    379c:	8f af       	std	Y+63, r24	; 0x3f
    379e:	2f 97       	sbiw	r28, 0x0f	; 15
    37a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a2:	8c 89       	ldd	r24, Y+20	; 0x14
    37a4:	98 0f       	add	r25, r24
    37a6:	60 96       	adiw	r28, 0x10	; 16
    37a8:	9f af       	std	Y+63, r25	; 0x3f
    37aa:	60 97       	sbiw	r28, 0x10	; 16
    37ac:	91 e0       	ldi	r25, 0x01	; 1
    37ae:	6c 96       	adiw	r28, 0x1c	; 28
    37b0:	9f af       	std	Y+63, r25	; 0x3f
    37b2:	6c 97       	sbiw	r28, 0x1c	; 28
    37b4:	60 96       	adiw	r28, 0x10	; 16
    37b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    37b8:	60 97       	sbiw	r28, 0x10	; 16
    37ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37bc:	89 17       	cp	r24, r25
    37be:	18 f0       	brcs	.+6      	; 0x37c6 <LCD_VidWriteNumber+0x4bc>
    37c0:	6c 96       	adiw	r28, 0x1c	; 28
    37c2:	1f ae       	std	Y+63, r1	; 0x3f
    37c4:	6c 97       	sbiw	r28, 0x1c	; 28
    37c6:	69 96       	adiw	r28, 0x19	; 25
    37c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    37ca:	69 97       	sbiw	r28, 0x19	; 25
    37cc:	60 96       	adiw	r28, 0x10	; 16
    37ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    37d0:	60 97       	sbiw	r28, 0x10	; 16
    37d2:	89 0f       	add	r24, r25
    37d4:	6d 96       	adiw	r28, 0x1d	; 29
    37d6:	8f af       	std	Y+63, r24	; 0x3f
    37d8:	6d 97       	sbiw	r28, 0x1d	; 29
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	6e 96       	adiw	r28, 0x1e	; 30
    37de:	8f af       	std	Y+63, r24	; 0x3f
    37e0:	6e 97       	sbiw	r28, 0x1e	; 30
    37e2:	6d 96       	adiw	r28, 0x1d	; 29
    37e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    37e6:	6d 97       	sbiw	r28, 0x1d	; 29
    37e8:	60 96       	adiw	r28, 0x10	; 16
    37ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    37ec:	60 97       	sbiw	r28, 0x10	; 16
    37ee:	98 17       	cp	r25, r24
    37f0:	18 f0       	brcs	.+6      	; 0x37f8 <LCD_VidWriteNumber+0x4ee>
    37f2:	6e 96       	adiw	r28, 0x1e	; 30
    37f4:	1f ae       	std	Y+63, r1	; 0x3f
    37f6:	6e 97       	sbiw	r28, 0x1e	; 30
    37f8:	6c 96       	adiw	r28, 0x1c	; 28
    37fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    37fc:	6c 97       	sbiw	r28, 0x1c	; 28
    37fe:	6e 96       	adiw	r28, 0x1e	; 30
    3800:	8f ad       	ldd	r24, Y+63	; 0x3f
    3802:	6e 97       	sbiw	r28, 0x1e	; 30
    3804:	98 2b       	or	r25, r24
    3806:	6c 96       	adiw	r28, 0x1c	; 28
    3808:	9f af       	std	Y+63, r25	; 0x3f
    380a:	6c 97       	sbiw	r28, 0x1c	; 28
    380c:	6d 96       	adiw	r28, 0x1d	; 29
    380e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3810:	6d 97       	sbiw	r28, 0x1d	; 29
    3812:	60 96       	adiw	r28, 0x10	; 16
    3814:	9f af       	std	Y+63, r25	; 0x3f
    3816:	60 97       	sbiw	r28, 0x10	; 16
    3818:	8d 8d       	ldd	r24, Y+29	; 0x1d
    381a:	9d 89       	ldd	r25, Y+21	; 0x15
    381c:	89 0f       	add	r24, r25
    381e:	61 96       	adiw	r28, 0x11	; 17
    3820:	8f af       	std	Y+63, r24	; 0x3f
    3822:	61 97       	sbiw	r28, 0x11	; 17
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	6f 96       	adiw	r28, 0x1f	; 31
    3828:	8f af       	std	Y+63, r24	; 0x3f
    382a:	6f 97       	sbiw	r28, 0x1f	; 31
    382c:	61 96       	adiw	r28, 0x11	; 17
    382e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3830:	61 97       	sbiw	r28, 0x11	; 17
    3832:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3834:	98 17       	cp	r25, r24
    3836:	18 f0       	brcs	.+6      	; 0x383e <LCD_VidWriteNumber+0x534>
    3838:	6f 96       	adiw	r28, 0x1f	; 31
    383a:	1f ae       	std	Y+63, r1	; 0x3f
    383c:	6f 97       	sbiw	r28, 0x1f	; 31
    383e:	6c 96       	adiw	r28, 0x1c	; 28
    3840:	9f ad       	ldd	r25, Y+63	; 0x3f
    3842:	6c 97       	sbiw	r28, 0x1c	; 28
    3844:	61 96       	adiw	r28, 0x11	; 17
    3846:	8f ad       	ldd	r24, Y+63	; 0x3f
    3848:	61 97       	sbiw	r28, 0x11	; 17
    384a:	98 0f       	add	r25, r24
    384c:	a0 96       	adiw	r28, 0x20	; 32
    384e:	9f af       	std	Y+63, r25	; 0x3f
    3850:	a0 97       	sbiw	r28, 0x20	; 32
    3852:	91 e0       	ldi	r25, 0x01	; 1
    3854:	a1 96       	adiw	r28, 0x21	; 33
    3856:	9f af       	std	Y+63, r25	; 0x3f
    3858:	a1 97       	sbiw	r28, 0x21	; 33
    385a:	a0 96       	adiw	r28, 0x20	; 32
    385c:	8f ad       	ldd	r24, Y+63	; 0x3f
    385e:	a0 97       	sbiw	r28, 0x20	; 32
    3860:	61 96       	adiw	r28, 0x11	; 17
    3862:	9f ad       	ldd	r25, Y+63	; 0x3f
    3864:	61 97       	sbiw	r28, 0x11	; 17
    3866:	89 17       	cp	r24, r25
    3868:	18 f0       	brcs	.+6      	; 0x3870 <LCD_VidWriteNumber+0x566>
    386a:	a1 96       	adiw	r28, 0x21	; 33
    386c:	1f ae       	std	Y+63, r1	; 0x3f
    386e:	a1 97       	sbiw	r28, 0x21	; 33
    3870:	6f 96       	adiw	r28, 0x1f	; 31
    3872:	8f ad       	ldd	r24, Y+63	; 0x3f
    3874:	6f 97       	sbiw	r28, 0x1f	; 31
    3876:	a1 96       	adiw	r28, 0x21	; 33
    3878:	9f ad       	ldd	r25, Y+63	; 0x3f
    387a:	a1 97       	sbiw	r28, 0x21	; 33
    387c:	89 2b       	or	r24, r25
    387e:	6f 96       	adiw	r28, 0x1f	; 31
    3880:	8f af       	std	Y+63, r24	; 0x3f
    3882:	6f 97       	sbiw	r28, 0x1f	; 31
    3884:	a0 96       	adiw	r28, 0x20	; 32
    3886:	8f ad       	ldd	r24, Y+63	; 0x3f
    3888:	a0 97       	sbiw	r28, 0x20	; 32
    388a:	61 96       	adiw	r28, 0x11	; 17
    388c:	8f af       	std	Y+63, r24	; 0x3f
    388e:	61 97       	sbiw	r28, 0x11	; 17
    3890:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3892:	8e 89       	ldd	r24, Y+22	; 0x16
    3894:	98 0f       	add	r25, r24
    3896:	62 96       	adiw	r28, 0x12	; 18
    3898:	9f af       	std	Y+63, r25	; 0x3f
    389a:	62 97       	sbiw	r28, 0x12	; 18
    389c:	91 e0       	ldi	r25, 0x01	; 1
    389e:	a2 96       	adiw	r28, 0x22	; 34
    38a0:	9f af       	std	Y+63, r25	; 0x3f
    38a2:	a2 97       	sbiw	r28, 0x22	; 34
    38a4:	62 96       	adiw	r28, 0x12	; 18
    38a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    38a8:	62 97       	sbiw	r28, 0x12	; 18
    38aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38ac:	89 17       	cp	r24, r25
    38ae:	18 f0       	brcs	.+6      	; 0x38b6 <LCD_VidWriteNumber+0x5ac>
    38b0:	a2 96       	adiw	r28, 0x22	; 34
    38b2:	1f ae       	std	Y+63, r1	; 0x3f
    38b4:	a2 97       	sbiw	r28, 0x22	; 34
    38b6:	6f 96       	adiw	r28, 0x1f	; 31
    38b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    38ba:	6f 97       	sbiw	r28, 0x1f	; 31
    38bc:	62 96       	adiw	r28, 0x12	; 18
    38be:	9f ad       	ldd	r25, Y+63	; 0x3f
    38c0:	62 97       	sbiw	r28, 0x12	; 18
    38c2:	89 0f       	add	r24, r25
    38c4:	a3 96       	adiw	r28, 0x23	; 35
    38c6:	8f af       	std	Y+63, r24	; 0x3f
    38c8:	a3 97       	sbiw	r28, 0x23	; 35
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	a4 96       	adiw	r28, 0x24	; 36
    38ce:	8f af       	std	Y+63, r24	; 0x3f
    38d0:	a4 97       	sbiw	r28, 0x24	; 36
    38d2:	a3 96       	adiw	r28, 0x23	; 35
    38d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    38d6:	a3 97       	sbiw	r28, 0x23	; 35
    38d8:	62 96       	adiw	r28, 0x12	; 18
    38da:	8f ad       	ldd	r24, Y+63	; 0x3f
    38dc:	62 97       	sbiw	r28, 0x12	; 18
    38de:	98 17       	cp	r25, r24
    38e0:	18 f0       	brcs	.+6      	; 0x38e8 <LCD_VidWriteNumber+0x5de>
    38e2:	a4 96       	adiw	r28, 0x24	; 36
    38e4:	1f ae       	std	Y+63, r1	; 0x3f
    38e6:	a4 97       	sbiw	r28, 0x24	; 36
    38e8:	a2 96       	adiw	r28, 0x22	; 34
    38ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    38ec:	a2 97       	sbiw	r28, 0x22	; 34
    38ee:	a4 96       	adiw	r28, 0x24	; 36
    38f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    38f2:	a4 97       	sbiw	r28, 0x24	; 36
    38f4:	98 2b       	or	r25, r24
    38f6:	a2 96       	adiw	r28, 0x22	; 34
    38f8:	9f af       	std	Y+63, r25	; 0x3f
    38fa:	a2 97       	sbiw	r28, 0x22	; 34
    38fc:	a3 96       	adiw	r28, 0x23	; 35
    38fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3900:	a3 97       	sbiw	r28, 0x23	; 35
    3902:	62 96       	adiw	r28, 0x12	; 18
    3904:	9f af       	std	Y+63, r25	; 0x3f
    3906:	62 97       	sbiw	r28, 0x12	; 18
    3908:	8f 8d       	ldd	r24, Y+31	; 0x1f
    390a:	9f 89       	ldd	r25, Y+23	; 0x17
    390c:	89 0f       	add	r24, r25
    390e:	63 96       	adiw	r28, 0x13	; 19
    3910:	8f af       	std	Y+63, r24	; 0x3f
    3912:	63 97       	sbiw	r28, 0x13	; 19
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	a5 96       	adiw	r28, 0x25	; 37
    3918:	8f af       	std	Y+63, r24	; 0x3f
    391a:	a5 97       	sbiw	r28, 0x25	; 37
    391c:	63 96       	adiw	r28, 0x13	; 19
    391e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3920:	63 97       	sbiw	r28, 0x13	; 19
    3922:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3924:	98 17       	cp	r25, r24
    3926:	18 f0       	brcs	.+6      	; 0x392e <LCD_VidWriteNumber+0x624>
    3928:	a5 96       	adiw	r28, 0x25	; 37
    392a:	1f ae       	std	Y+63, r1	; 0x3f
    392c:	a5 97       	sbiw	r28, 0x25	; 37
    392e:	a2 96       	adiw	r28, 0x22	; 34
    3930:	9f ad       	ldd	r25, Y+63	; 0x3f
    3932:	a2 97       	sbiw	r28, 0x22	; 34
    3934:	63 96       	adiw	r28, 0x13	; 19
    3936:	8f ad       	ldd	r24, Y+63	; 0x3f
    3938:	63 97       	sbiw	r28, 0x13	; 19
    393a:	98 0f       	add	r25, r24
    393c:	a6 96       	adiw	r28, 0x26	; 38
    393e:	9f af       	std	Y+63, r25	; 0x3f
    3940:	a6 97       	sbiw	r28, 0x26	; 38
    3942:	91 e0       	ldi	r25, 0x01	; 1
    3944:	a7 96       	adiw	r28, 0x27	; 39
    3946:	9f af       	std	Y+63, r25	; 0x3f
    3948:	a7 97       	sbiw	r28, 0x27	; 39
    394a:	a6 96       	adiw	r28, 0x26	; 38
    394c:	8f ad       	ldd	r24, Y+63	; 0x3f
    394e:	a6 97       	sbiw	r28, 0x26	; 38
    3950:	63 96       	adiw	r28, 0x13	; 19
    3952:	9f ad       	ldd	r25, Y+63	; 0x3f
    3954:	63 97       	sbiw	r28, 0x13	; 19
    3956:	89 17       	cp	r24, r25
    3958:	18 f0       	brcs	.+6      	; 0x3960 <LCD_VidWriteNumber+0x656>
    395a:	a7 96       	adiw	r28, 0x27	; 39
    395c:	1f ae       	std	Y+63, r1	; 0x3f
    395e:	a7 97       	sbiw	r28, 0x27	; 39
    3960:	a5 96       	adiw	r28, 0x25	; 37
    3962:	8f ad       	ldd	r24, Y+63	; 0x3f
    3964:	a5 97       	sbiw	r28, 0x25	; 37
    3966:	a7 96       	adiw	r28, 0x27	; 39
    3968:	9f ad       	ldd	r25, Y+63	; 0x3f
    396a:	a7 97       	sbiw	r28, 0x27	; 39
    396c:	89 2b       	or	r24, r25
    396e:	a5 96       	adiw	r28, 0x25	; 37
    3970:	8f af       	std	Y+63, r24	; 0x3f
    3972:	a5 97       	sbiw	r28, 0x25	; 37
    3974:	a6 96       	adiw	r28, 0x26	; 38
    3976:	8f ad       	ldd	r24, Y+63	; 0x3f
    3978:	a6 97       	sbiw	r28, 0x26	; 38
    397a:	63 96       	adiw	r28, 0x13	; 19
    397c:	8f af       	std	Y+63, r24	; 0x3f
    397e:	63 97       	sbiw	r28, 0x13	; 19
    3980:	98 a1       	ldd	r25, Y+32	; 0x20
    3982:	88 8d       	ldd	r24, Y+24	; 0x18
    3984:	98 0f       	add	r25, r24
    3986:	64 96       	adiw	r28, 0x14	; 20
    3988:	9f af       	std	Y+63, r25	; 0x3f
    398a:	64 97       	sbiw	r28, 0x14	; 20
    398c:	a5 96       	adiw	r28, 0x25	; 37
    398e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3990:	a5 97       	sbiw	r28, 0x25	; 37
    3992:	64 96       	adiw	r28, 0x14	; 20
    3994:	9f ad       	ldd	r25, Y+63	; 0x3f
    3996:	64 97       	sbiw	r28, 0x14	; 20
    3998:	89 0f       	add	r24, r25
    399a:	64 96       	adiw	r28, 0x14	; 20
    399c:	8f af       	std	Y+63, r24	; 0x3f
    399e:	64 97       	sbiw	r28, 0x14	; 20
    39a0:	2d 96       	adiw	r28, 0x0d	; 13
    39a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    39a4:	2d 97       	sbiw	r28, 0x0d	; 13
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	2e 96       	adiw	r28, 0x0e	; 14
    39aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    39ac:	2e 97       	sbiw	r28, 0x0e	; 14
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	2f 96       	adiw	r28, 0x0f	; 15
    39b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    39b4:	2f 97       	sbiw	r28, 0x0f	; 15
    39b6:	8b 83       	std	Y+3, r24	; 0x03
    39b8:	60 96       	adiw	r28, 0x10	; 16
    39ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    39bc:	60 97       	sbiw	r28, 0x10	; 16
    39be:	9c 83       	std	Y+4, r25	; 0x04
    39c0:	61 96       	adiw	r28, 0x11	; 17
    39c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    39c4:	61 97       	sbiw	r28, 0x11	; 17
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	62 96       	adiw	r28, 0x12	; 18
    39ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    39cc:	62 97       	sbiw	r28, 0x12	; 18
    39ce:	9e 83       	std	Y+6, r25	; 0x06
    39d0:	63 96       	adiw	r28, 0x13	; 19
    39d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    39d4:	63 97       	sbiw	r28, 0x13	; 19
    39d6:	8f 83       	std	Y+7, r24	; 0x07
    39d8:	64 96       	adiw	r28, 0x14	; 20
    39da:	9f ad       	ldd	r25, Y+63	; 0x3f
    39dc:	64 97       	sbiw	r28, 0x14	; 20
    39de:	98 87       	std	Y+8, r25	; 0x08

		a_Number/=10;
    39e0:	a9 84       	ldd	r10, Y+9	; 0x09
    39e2:	ba 84       	ldd	r11, Y+10	; 0x0a
    39e4:	cb 84       	ldd	r12, Y+11	; 0x0b
    39e6:	dc 84       	ldd	r13, Y+12	; 0x0c
    39e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    39ea:	fe 84       	ldd	r15, Y+14	; 0x0e
    39ec:	0f 85       	ldd	r16, Y+15	; 0x0f
    39ee:	18 89       	ldd	r17, Y+16	; 0x10
    39f0:	2a 2d       	mov	r18, r10
    39f2:	3b 2d       	mov	r19, r11
    39f4:	4c 2d       	mov	r20, r12
    39f6:	5d 2d       	mov	r21, r13
    39f8:	6e 2d       	mov	r22, r14
    39fa:	7f 2d       	mov	r23, r15
    39fc:	80 2f       	mov	r24, r16
    39fe:	91 2f       	mov	r25, r17
    3a00:	0f 2e       	mov	r0, r31
    3a02:	fa e0       	ldi	r31, 0x0A	; 10
    3a04:	af 2e       	mov	r10, r31
    3a06:	f0 2d       	mov	r31, r0
    3a08:	bb 24       	eor	r11, r11
    3a0a:	cc 24       	eor	r12, r12
    3a0c:	dd 24       	eor	r13, r13
    3a0e:	ee 24       	eor	r14, r14
    3a10:	ff 24       	eor	r15, r15
    3a12:	00 e0       	ldi	r16, 0x00	; 0
    3a14:	10 e0       	ldi	r17, 0x00	; 0
    3a16:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    3a1a:	a2 2e       	mov	r10, r18
    3a1c:	b3 2e       	mov	r11, r19
    3a1e:	c4 2e       	mov	r12, r20
    3a20:	d5 2e       	mov	r13, r21
    3a22:	e6 2e       	mov	r14, r22
    3a24:	f7 2e       	mov	r15, r23
    3a26:	08 2f       	mov	r16, r24
    3a28:	19 2f       	mov	r17, r25
    3a2a:	a9 86       	std	Y+9, r10	; 0x09
    3a2c:	ba 86       	std	Y+10, r11	; 0x0a
    3a2e:	cb 86       	std	Y+11, r12	; 0x0b
    3a30:	dc 86       	std	Y+12, r13	; 0x0c
    3a32:	ed 86       	std	Y+13, r14	; 0x0d
    3a34:	fe 86       	std	Y+14, r15	; 0x0e
    3a36:	0f 87       	std	Y+15, r16	; 0x0f
    3a38:	18 8b       	std	Y+16, r17	; 0x10
	uint64_t reversed=1;
	if(a_Number==0)
	{
		LCD_displayCharacter('0');
	}
	while(a_Number != 0)
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3e:	89 2b       	or	r24, r25
    3a40:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a42:	89 2b       	or	r24, r25
    3a44:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a46:	89 2b       	or	r24, r25
    3a48:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4a:	89 2b       	or	r24, r25
    3a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4e:	89 2b       	or	r24, r25
    3a50:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a52:	89 2b       	or	r24, r25
    3a54:	98 89       	ldd	r25, Y+16	; 0x10
    3a56:	89 2b       	or	r24, r25
    3a58:	88 23       	and	r24, r24
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <LCD_VidWriteNumber+0x754>
    3a5c:	90 cc       	rjmp	.-1760   	; 0x337e <LCD_VidWriteNumber+0x74>
    3a5e:	5e c0       	rjmp	.+188    	; 0x3b1c <LCD_VidWriteNumber+0x812>

		a_Number/=10;
	}
	while(reversed != 1)
	{
		LCD_displayCharacter((reversed%10)+48);
    3a60:	a9 80       	ldd	r10, Y+1	; 0x01
    3a62:	ba 80       	ldd	r11, Y+2	; 0x02
    3a64:	cb 80       	ldd	r12, Y+3	; 0x03
    3a66:	dc 80       	ldd	r13, Y+4	; 0x04
    3a68:	ed 80       	ldd	r14, Y+5	; 0x05
    3a6a:	fe 80       	ldd	r15, Y+6	; 0x06
    3a6c:	0f 81       	ldd	r16, Y+7	; 0x07
    3a6e:	18 85       	ldd	r17, Y+8	; 0x08
    3a70:	2a 2d       	mov	r18, r10
    3a72:	3b 2d       	mov	r19, r11
    3a74:	4c 2d       	mov	r20, r12
    3a76:	5d 2d       	mov	r21, r13
    3a78:	6e 2d       	mov	r22, r14
    3a7a:	7f 2d       	mov	r23, r15
    3a7c:	80 2f       	mov	r24, r16
    3a7e:	91 2f       	mov	r25, r17
    3a80:	0f 2e       	mov	r0, r31
    3a82:	fa e0       	ldi	r31, 0x0A	; 10
    3a84:	af 2e       	mov	r10, r31
    3a86:	f0 2d       	mov	r31, r0
    3a88:	bb 24       	eor	r11, r11
    3a8a:	cc 24       	eor	r12, r12
    3a8c:	dd 24       	eor	r13, r13
    3a8e:	ee 24       	eor	r14, r14
    3a90:	ff 24       	eor	r15, r15
    3a92:	00 e0       	ldi	r16, 0x00	; 0
    3a94:	10 e0       	ldi	r17, 0x00	; 0
    3a96:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    3a9a:	a2 2e       	mov	r10, r18
    3a9c:	b3 2e       	mov	r11, r19
    3a9e:	c4 2e       	mov	r12, r20
    3aa0:	d5 2e       	mov	r13, r21
    3aa2:	e6 2e       	mov	r14, r22
    3aa4:	f7 2e       	mov	r15, r23
    3aa6:	08 2f       	mov	r16, r24
    3aa8:	19 2f       	mov	r17, r25
    3aaa:	2a 2d       	mov	r18, r10
    3aac:	3b 2d       	mov	r19, r11
    3aae:	4c 2d       	mov	r20, r12
    3ab0:	5d 2d       	mov	r21, r13
    3ab2:	6e 2d       	mov	r22, r14
    3ab4:	7f 2d       	mov	r23, r15
    3ab6:	80 2f       	mov	r24, r16
    3ab8:	91 2f       	mov	r25, r17
    3aba:	82 2f       	mov	r24, r18
    3abc:	80 5d       	subi	r24, 0xD0	; 208
    3abe:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_displayCharacter>
		reversed /= 10;
    3ac2:	a9 80       	ldd	r10, Y+1	; 0x01
    3ac4:	ba 80       	ldd	r11, Y+2	; 0x02
    3ac6:	cb 80       	ldd	r12, Y+3	; 0x03
    3ac8:	dc 80       	ldd	r13, Y+4	; 0x04
    3aca:	ed 80       	ldd	r14, Y+5	; 0x05
    3acc:	fe 80       	ldd	r15, Y+6	; 0x06
    3ace:	0f 81       	ldd	r16, Y+7	; 0x07
    3ad0:	18 85       	ldd	r17, Y+8	; 0x08
    3ad2:	2a 2d       	mov	r18, r10
    3ad4:	3b 2d       	mov	r19, r11
    3ad6:	4c 2d       	mov	r20, r12
    3ad8:	5d 2d       	mov	r21, r13
    3ada:	6e 2d       	mov	r22, r14
    3adc:	7f 2d       	mov	r23, r15
    3ade:	80 2f       	mov	r24, r16
    3ae0:	91 2f       	mov	r25, r17
    3ae2:	0f 2e       	mov	r0, r31
    3ae4:	fa e0       	ldi	r31, 0x0A	; 10
    3ae6:	af 2e       	mov	r10, r31
    3ae8:	f0 2d       	mov	r31, r0
    3aea:	bb 24       	eor	r11, r11
    3aec:	cc 24       	eor	r12, r12
    3aee:	dd 24       	eor	r13, r13
    3af0:	ee 24       	eor	r14, r14
    3af2:	ff 24       	eor	r15, r15
    3af4:	00 e0       	ldi	r16, 0x00	; 0
    3af6:	10 e0       	ldi	r17, 0x00	; 0
    3af8:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    3afc:	a2 2e       	mov	r10, r18
    3afe:	b3 2e       	mov	r11, r19
    3b00:	c4 2e       	mov	r12, r20
    3b02:	d5 2e       	mov	r13, r21
    3b04:	e6 2e       	mov	r14, r22
    3b06:	f7 2e       	mov	r15, r23
    3b08:	08 2f       	mov	r16, r24
    3b0a:	19 2f       	mov	r17, r25
    3b0c:	a9 82       	std	Y+1, r10	; 0x01
    3b0e:	ba 82       	std	Y+2, r11	; 0x02
    3b10:	cb 82       	std	Y+3, r12	; 0x03
    3b12:	dc 82       	std	Y+4, r13	; 0x04
    3b14:	ed 82       	std	Y+5, r14	; 0x05
    3b16:	fe 82       	std	Y+6, r15	; 0x06
    3b18:	0f 83       	std	Y+7, r16	; 0x07
    3b1a:	18 87       	std	Y+8, r17	; 0x08
	{
		reversed = (reversed * 10)+(a_Number%10);

		a_Number/=10;
	}
	while(reversed != 1)
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	81 30       	cpi	r24, 0x01	; 1
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <LCD_VidWriteNumber+0x81a>
    3b22:	9e cf       	rjmp	.-196    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b24:	8a 81       	ldd	r24, Y+2	; 0x02
    3b26:	88 23       	and	r24, r24
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <LCD_VidWriteNumber+0x822>
    3b2a:	9a cf       	rjmp	.-204    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	88 23       	and	r24, r24
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <LCD_VidWriteNumber+0x82a>
    3b32:	96 cf       	rjmp	.-212    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b34:	8c 81       	ldd	r24, Y+4	; 0x04
    3b36:	88 23       	and	r24, r24
    3b38:	09 f0       	breq	.+2      	; 0x3b3c <LCD_VidWriteNumber+0x832>
    3b3a:	92 cf       	rjmp	.-220    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3e:	88 23       	and	r24, r24
    3b40:	09 f0       	breq	.+2      	; 0x3b44 <LCD_VidWriteNumber+0x83a>
    3b42:	8e cf       	rjmp	.-228    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b44:	8e 81       	ldd	r24, Y+6	; 0x06
    3b46:	88 23       	and	r24, r24
    3b48:	09 f0       	breq	.+2      	; 0x3b4c <LCD_VidWriteNumber+0x842>
    3b4a:	8a cf       	rjmp	.-236    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b4c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b4e:	88 23       	and	r24, r24
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <LCD_VidWriteNumber+0x84a>
    3b52:	86 cf       	rjmp	.-244    	; 0x3a60 <LCD_VidWriteNumber+0x756>
    3b54:	88 85       	ldd	r24, Y+8	; 0x08
    3b56:	88 23       	and	r24, r24
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <LCD_VidWriteNumber+0x852>
    3b5a:	82 cf       	rjmp	.-252    	; 0x3a60 <LCD_VidWriteNumber+0x756>
	{
		LCD_displayCharacter((reversed%10)+48);
		reversed /= 10;
	}
	return E_LCD_SUCCESS;
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
}
    3b5e:	ca 59       	subi	r28, 0x9A	; 154
    3b60:	df 4f       	sbci	r29, 0xFF	; 255
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	cf 91       	pop	r28
    3b6e:	df 91       	pop	r29
    3b70:	1f 91       	pop	r17
    3b72:	0f 91       	pop	r16
    3b74:	ff 90       	pop	r15
    3b76:	ef 90       	pop	r14
    3b78:	df 90       	pop	r13
    3b7a:	cf 90       	pop	r12
    3b7c:	bf 90       	pop	r11
    3b7e:	af 90       	pop	r10
    3b80:	08 95       	ret

00003b82 <LCD_clearScreen>:



void LCD_clearScreen(void)
{
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND); //clear display
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <LCD_SendCommand>
}
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <KEYPAD_CheckDebounce>:
/*******************************************************************************
 *                      Interrupt Service Routines                             *
 *******************************************************************************/

void KEYPAD_CheckDebounce(void)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
	debounce_Status = TRUE;	/* Rise the denounce flag */
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	80 93 74 01 	sts	0x0174, r24

}
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <KEYPAD_Init>:
 * @return function error state.
*
 * Description: Function to Initialize the KEYPAD
 ********************************************************************************/
ERROR_STATE_t KEYPAD_Init(void)
{
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	0f 92       	push	r0
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_counter;

	/* Timer configurations */

	/* Timer driver initialization */
	TIMER_VidInit(&timer1_config,0,250);
    3bb4:	86 e6       	ldi	r24, 0x66	; 102
    3bb6:	91 e0       	ldi	r25, 0x01	; 1
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	4a ef       	ldi	r20, 0xFA	; 250
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TIMER_VidInit>

	/* Function to be called when the interrupt is fired
	TIMER_setCallBack(KEYPAD_CheckDebounce, TIMER_1);
	 */
	/* Set columns pins to output initially High */
	for(au8_counter = 0; au8_counter < N_col; au8_counter++)
    3bc4:	19 82       	std	Y+1, r1	; 0x01
    3bc6:	13 c0       	rjmp	.+38     	; 0x3bee <KEYPAD_Init+0x44>
	{
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_counter), DIO_u8_OUTPUT);
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	98 2f       	mov	r25, r24
    3bcc:	94 60       	ori	r25, 0x04	; 4
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	69 2f       	mov	r22, r25
    3bd2:	41 e0       	ldi	r20, 0x01	; 1
    3bd4:	0e 94 a2 10 	call	0x2144	; 0x2144 <DIO_setPinDirection>
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_counter), DIO_u8_HIGH);
    3bd8:	89 81       	ldd	r24, Y+1	; 0x01
    3bda:	98 2f       	mov	r25, r24
    3bdc:	94 60       	ori	r25, 0x04	; 4
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	69 2f       	mov	r22, r25
    3be2:	41 e0       	ldi	r20, 0x01	; 1
    3be4:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_writePinValue>

	/* Function to be called when the interrupt is fired
	TIMER_setCallBack(KEYPAD_CheckDebounce, TIMER_1);
	 */
	/* Set columns pins to output initially High */
	for(au8_counter = 0; au8_counter < N_col; au8_counter++)
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	8f 5f       	subi	r24, 0xFF	; 255
    3bec:	89 83       	std	Y+1, r24	; 0x01
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	83 30       	cpi	r24, 0x03	; 3
    3bf2:	50 f3       	brcs	.-44     	; 0x3bc8 <KEYPAD_Init+0x1e>
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_counter), DIO_u8_OUTPUT);
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_counter), DIO_u8_HIGH);
	}

	/* Set rows pins to input and set pull up resistors */
	for(au8_counter = 0; au8_counter < N_row; au8_counter++)
    3bf4:	19 82       	std	Y+1, r1	; 0x01
    3bf6:	0d c0       	rjmp	.+26     	; 0x3c12 <KEYPAD_Init+0x68>
	{
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_ROW_PIN | au8_counter), DIO_u8_INPUT);
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	69 81       	ldd	r22, Y+1	; 0x01
    3bfc:	40 e0       	ldi	r20, 0x00	; 0
    3bfe:	0e 94 a2 10 	call	0x2144	; 0x2144 <DIO_setPinDirection>
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_ROW_PIN | au8_counter), DIO_u8_HIGH);
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	69 81       	ldd	r22, Y+1	; 0x01
    3c06:	41 e0       	ldi	r20, 0x01	; 1
    3c08:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_writePinValue>
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_counter), DIO_u8_OUTPUT);
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_counter), DIO_u8_HIGH);
	}

	/* Set rows pins to input and set pull up resistors */
	for(au8_counter = 0; au8_counter < N_row; au8_counter++)
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	8f 5f       	subi	r24, 0xFF	; 255
    3c10:	89 83       	std	Y+1, r24	; 0x01
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	84 30       	cpi	r24, 0x04	; 4
    3c16:	80 f3       	brcs	.-32     	; 0x3bf8 <KEYPAD_Init+0x4e>
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_ROW_PIN | au8_counter), DIO_u8_INPUT);
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_ROW_PIN | au8_counter), DIO_u8_HIGH);
	}

	/* return success status */
	return E_OK;
    3c18:	80 e0       	ldi	r24, 0x00	; 0
}
    3c1a:	0f 90       	pop	r0
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <KEYPAD_getStatus>:
 * @return function error state.
*
 * Description: Function responsible for getting the status of the KEYPAD
 ********************************************************************************/
ERROR_STATE_t KEYPAD_getStatus(uint8_t * data)
{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	00 d0       	rcall	.+0      	; 0x3c28 <KEYPAD_getStatus+0x6>
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <KEYPAD_getStatus+0x8>
    3c2a:	0f 92       	push	r0
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	9b 83       	std	Y+3, r25	; 0x03
    3c32:	8a 83       	std	Y+2, r24	; 0x02

	static uint8_t au8_keypad_Status = NOT_PRESSED;	/* Static variable to retain the state of the keypad */
	uint8_t au8_keypad_RetValue = NOT_PRESSED;	/* Local variable to return the keypad status */
    3c34:	19 82       	std	Y+1, r1	; 0x01

	au8_keypad_RetValue = KEYPAD_getPressedKey(data);
    3c36:	8a 81       	ldd	r24, Y+2	; 0x02
    3c38:	9b 81       	ldd	r25, Y+3	; 0x03
    3c3a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <KEYPAD_getPressedKey>
    3c3e:	89 83       	std	Y+1, r24	; 0x01

	switch(au8_keypad_Status)
    3c40:	80 91 79 01 	lds	r24, 0x0179
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	3d 83       	std	Y+5, r19	; 0x05
    3c4a:	2c 83       	std	Y+4, r18	; 0x04
    3c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c50:	81 30       	cpi	r24, 0x01	; 1
    3c52:	91 05       	cpc	r25, r1
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <KEYPAD_getStatus+0x36>
    3c56:	48 c0       	rjmp	.+144    	; 0x3ce8 <KEYPAD_getStatus+0xc6>
    3c58:	2c 81       	ldd	r18, Y+4	; 0x04
    3c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c5c:	22 30       	cpi	r18, 0x02	; 2
    3c5e:	31 05       	cpc	r19, r1
    3c60:	b9 f1       	breq	.+110    	; 0x3cd0 <KEYPAD_getStatus+0xae>
    3c62:	8c 81       	ldd	r24, Y+4	; 0x04
    3c64:	9d 81       	ldd	r25, Y+5	; 0x05
    3c66:	00 97       	sbiw	r24, 0x00	; 0
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <KEYPAD_getStatus+0x4a>
    3c6a:	45 c0       	rjmp	.+138    	; 0x3cf6 <KEYPAD_getStatus+0xd4>
	{
	case NOT_PRESSED:
						if(au8_keypad_RetValue == PRESSED)
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	81 30       	cpi	r24, 0x01	; 1
    3c70:	69 f5       	brne	.+90     	; 0x3ccc <KEYPAD_getStatus+0xaa>
						{
							if(LCDRetVal==NULL_PTR)
    3c72:	80 91 75 01 	lds	r24, 0x0175
    3c76:	90 91 76 01 	lds	r25, 0x0176
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	91 f4       	brne	.+36     	; 0x3ca2 <KEYPAD_getStatus+0x80>
							{
								TIMER_Start(TIMER2_F_CLK_8,TIMER_2 );	/* Start timer */
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	62 e0       	ldi	r22, 0x02	; 2
    3c82:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TIMER_Start>
								LCDRetVal=TIMER_Get_Status(&timer1_config,2);
    3c86:	86 e6       	ldi	r24, 0x66	; 102
    3c88:	91 e0       	ldi	r25, 0x01	; 1
    3c8a:	62 e0       	ldi	r22, 0x02	; 2
    3c8c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
    3c90:	90 93 76 01 	sts	0x0176, r25
    3c94:	80 93 75 01 	sts	0x0175, r24
								Data_Store = *data ;
    3c98:	ea 81       	ldd	r30, Y+2	; 0x02
    3c9a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c9c:	80 81       	ld	r24, Z
    3c9e:	80 93 77 01 	sts	0x0177, r24
							}
							if(*LCDRetVal==2)
    3ca2:	e0 91 75 01 	lds	r30, 0x0175
    3ca6:	f0 91 76 01 	lds	r31, 0x0176
    3caa:	80 81       	ld	r24, Z
    3cac:	82 30       	cpi	r24, 0x02	; 2
    3cae:	71 f4       	brne	.+28     	; 0x3ccc <KEYPAD_getStatus+0xaa>
							{
								KEYPAD_CheckDebounce();
    3cb0:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <KEYPAD_CheckDebounce>
								*LCDRetVal=0;
    3cb4:	e0 91 75 01 	lds	r30, 0x0175
    3cb8:	f0 91 76 01 	lds	r31, 0x0176
    3cbc:	10 82       	st	Z, r1
								LCDRetVal=NULL_PTR;
    3cbe:	10 92 76 01 	sts	0x0176, r1
    3cc2:	10 92 75 01 	sts	0x0175, r1
								au8_keypad_Status = DEBOUNCING;	/* Update the KEYPAD state */
    3cc6:	82 e0       	ldi	r24, 0x02	; 2
    3cc8:	80 93 79 01 	sts	0x0179, r24
							}
						}
						au8_keypad_RetValue = NOT_PRESSED;	/* Update the return value of the keypad */
    3ccc:	19 82       	std	Y+1, r1	; 0x01
    3cce:	13 c0       	rjmp	.+38     	; 0x3cf6 <KEYPAD_getStatus+0xd4>
						break;

	case DEBOUNCING:	if(debounce_Status == TRUE)
    3cd0:	80 91 74 01 	lds	r24, 0x0174
    3cd4:	81 30       	cpi	r24, 0x01	; 1
    3cd6:	79 f4       	brne	.+30     	; 0x3cf6 <KEYPAD_getStatus+0xd4>
						{
							debounce_Status = FALSE;	/* Reset the denounce flag */
    3cd8:	10 92 74 01 	sts	0x0174, r1
							au8_keypad_Status = PRESSED;/* Update the KEYPAD state */
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	80 93 79 01 	sts	0x0179, r24
							au8_keypad_RetValue = PRESSED;/* Update the return value of the keypad */
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	89 83       	std	Y+1, r24	; 0x01
    3ce6:	07 c0       	rjmp	.+14     	; 0x3cf6 <KEYPAD_getStatus+0xd4>
						}
						break;

	case PRESSED:

						if(au8_keypad_RetValue == PRESSED)
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	81 30       	cpi	r24, 0x01	; 1
    3cec:	11 f4       	brne	.+4      	; 0x3cf2 <KEYPAD_getStatus+0xd0>
						{
							/* Reset the state machine of the keypad only if the key is released */
							au8_keypad_Status = NOT_PRESSED;
    3cee:	10 92 79 01 	sts	0x0179, r1
						}
						au8_keypad_RetValue = Operation_Success;	/* Update the return value of the keypad */
    3cf2:	88 ec       	ldi	r24, 0xC8	; 200
    3cf4:	89 83       	std	Y+1, r24	; 0x01
						break;
						}

	return au8_keypad_RetValue;	/* Return the keypad status if it is (PRESSED, NOT PRESSED) */
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <KEYPAD_getPressedKey>:
 *
 * @return function error state.
 */

ERROR_STATE_t KEYPAD_getPressedKey(uint8_t * au8_data)
{
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <KEYPAD_getPressedKey+0x6>
    3d0e:	00 d0       	rcall	.+0      	; 0x3d10 <KEYPAD_getPressedKey+0x8>
    3d10:	00 d0       	rcall	.+0      	; 0x3d12 <KEYPAD_getPressedKey+0xa>
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
    3d16:	9e 83       	std	Y+6, r25	; 0x06
    3d18:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t au8_ColumnCounter;
	uint8_t au8_RowCounter;
	uint8_t au8_KeyStatus;
	uint8_t au8_Keyflag = NOT_PRESSED;
    3d1a:	19 82       	std	Y+1, r1	; 0x01

	/* Loops on every column */
	for(au8_ColumnCounter = 0; au8_ColumnCounter < N_col; au8_ColumnCounter++)
    3d1c:	1b 82       	std	Y+3, r1	; 0x03
    3d1e:	39 c0       	rjmp	.+114    	; 0x3d92 <KEYPAD_getPressedKey+0x8a>
	{

		/* Set column value to low */
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_ColumnCounter) , DIO_u8_LOW);
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	98 2f       	mov	r25, r24
    3d24:	94 60       	ori	r25, 0x04	; 4
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	69 2f       	mov	r22, r25
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_writePinValue>

		/* Loops on every row */
		for(au8_RowCounter = 0; au8_RowCounter < N_row; au8_RowCounter++)
    3d30:	1a 82       	std	Y+2, r1	; 0x02
    3d32:	21 c0       	rjmp	.+66     	; 0x3d76 <KEYPAD_getPressedKey+0x6e>
		{
			/* Read row value */
			DIO_readPin(KEYPAD_PORT, (KEYPAD_ROW_PIN | au8_RowCounter), &au8_KeyStatus);
    3d34:	9e 01       	movw	r18, r28
    3d36:	2c 5f       	subi	r18, 0xFC	; 252
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	6a 81       	ldd	r22, Y+2	; 0x02
    3d3e:	a9 01       	movw	r20, r18
    3d40:	0e 94 67 13 	call	0x26ce	; 0x26ce <DIO_readPin>
			/* Check if row is pressed */
			if(au8_KeyStatus == NOT_PRESSED)
    3d44:	8c 81       	ldd	r24, Y+4	; 0x04
    3d46:	88 23       	and	r24, r24
    3d48:	99 f4       	brne	.+38     	; 0x3d70 <KEYPAD_getPressedKey+0x68>
			{
				*au8_data = KeyPad_4x3_adjustKeyNumber((au8_RowCounter * N_col) + (au8_ColumnCounter+1));
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	c9 01       	movw	r24, r18
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	82 0f       	add	r24, r18
    3d58:	93 1f       	adc	r25, r19
    3d5a:	98 2f       	mov	r25, r24
    3d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5e:	89 0f       	add	r24, r25
    3d60:	8f 5f       	subi	r24, 0xFF	; 255
    3d62:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <KeyPad_4x3_adjustKeyNumber>
    3d66:	ed 81       	ldd	r30, Y+5	; 0x05
    3d68:	fe 81       	ldd	r31, Y+6	; 0x06
    3d6a:	80 83       	st	Z, r24
				/* Return column value to HIGH */
				au8_Keyflag = PRESSED;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	89 83       	std	Y+1, r24	; 0x01

		/* Set column value to low */
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_ColumnCounter) , DIO_u8_LOW);

		/* Loops on every row */
		for(au8_RowCounter = 0; au8_RowCounter < N_row; au8_RowCounter++)
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	8f 5f       	subi	r24, 0xFF	; 255
    3d74:	8a 83       	std	Y+2, r24	; 0x02
    3d76:	8a 81       	ldd	r24, Y+2	; 0x02
    3d78:	84 30       	cpi	r24, 0x04	; 4
    3d7a:	e0 f2       	brcs	.-72     	; 0x3d34 <KEYPAD_getPressedKey+0x2c>
				/* Return column value to HIGH */
				au8_Keyflag = PRESSED;

			}
		}
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_ColumnCounter), DIO_u8_HIGH);
    3d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7e:	98 2f       	mov	r25, r24
    3d80:	94 60       	ori	r25, 0x04	; 4
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	69 2f       	mov	r22, r25
    3d86:	41 e0       	ldi	r20, 0x01	; 1
    3d88:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <DIO_writePinValue>
	uint8_t au8_RowCounter;
	uint8_t au8_KeyStatus;
	uint8_t au8_Keyflag = NOT_PRESSED;

	/* Loops on every column */
	for(au8_ColumnCounter = 0; au8_ColumnCounter < N_col; au8_ColumnCounter++)
    3d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8e:	8f 5f       	subi	r24, 0xFF	; 255
    3d90:	8b 83       	std	Y+3, r24	; 0x03
    3d92:	8b 81       	ldd	r24, Y+3	; 0x03
    3d94:	83 30       	cpi	r24, 0x03	; 3
    3d96:	20 f2       	brcs	.-120    	; 0x3d20 <KEYPAD_getPressedKey+0x18>
			}
		}
		DIO_writePinValue(KEYPAD_PORT, (KEYPAD_COL_PIN | au8_ColumnCounter), DIO_u8_HIGH);
	}

	return au8_Keyflag;	/* Return the key flag if it is (PRESSED, NOT_PRESSED) */
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d9a:	26 96       	adiw	r28, 0x06	; 6
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <KeyPad_4x3_adjustKeyNumber>:
 * @return function error state.
*
 * Description: Function responsible for getting the actual number pressed
 ********************************************************************************/
static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t au8_button_number)
{
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <KeyPad_4x3_adjustKeyNumber+0x6>
    3db2:	00 d0       	rcall	.+0      	; 0x3db4 <KeyPad_4x3_adjustKeyNumber+0x8>
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_button_number)
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	3c 83       	std	Y+4, r19	; 0x04
    3dc2:	2b 83       	std	Y+3, r18	; 0x03
    3dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc8:	8a 30       	cpi	r24, 0x0A	; 10
    3dca:	91 05       	cpc	r25, r1
    3dcc:	81 f0       	breq	.+32     	; 0x3dee <KeyPad_4x3_adjustKeyNumber+0x42>
    3dce:	2b 81       	ldd	r18, Y+3	; 0x03
    3dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    3dd2:	2a 30       	cpi	r18, 0x0A	; 10
    3dd4:	31 05       	cpc	r19, r1
    3dd6:	9c f0       	brlt	.+38     	; 0x3dfe <KeyPad_4x3_adjustKeyNumber+0x52>
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	9c 81       	ldd	r25, Y+4	; 0x04
    3ddc:	8b 30       	cpi	r24, 0x0B	; 11
    3dde:	91 05       	cpc	r25, r1
    3de0:	49 f0       	breq	.+18     	; 0x3df4 <KeyPad_4x3_adjustKeyNumber+0x48>
    3de2:	2b 81       	ldd	r18, Y+3	; 0x03
    3de4:	3c 81       	ldd	r19, Y+4	; 0x04
    3de6:	2c 30       	cpi	r18, 0x0C	; 12
    3de8:	31 05       	cpc	r19, r1
    3dea:	31 f0       	breq	.+12     	; 0x3df8 <KeyPad_4x3_adjustKeyNumber+0x4c>
    3dec:	08 c0       	rjmp	.+16     	; 0x3dfe <KeyPad_4x3_adjustKeyNumber+0x52>
	{
	case 10: return '*'; /* ASCII Code of = */
    3dee:	3a e2       	ldi	r19, 0x2A	; 42
    3df0:	3a 83       	std	Y+2, r19	; 0x02
    3df2:	07 c0       	rjmp	.+14     	; 0x3e02 <KeyPad_4x3_adjustKeyNumber+0x56>
	break;
	case 11: return 0;
    3df4:	1a 82       	std	Y+2, r1	; 0x02
    3df6:	05 c0       	rjmp	.+10     	; 0x3e02 <KeyPad_4x3_adjustKeyNumber+0x56>
	break;
	case 12: return '#'; /* ASCII Code of + */
    3df8:	83 e2       	ldi	r24, 0x23	; 35
    3dfa:	8a 83       	std	Y+2, r24	; 0x02
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <KeyPad_4x3_adjustKeyNumber+0x56>
	break;
	default: return au8_button_number;
    3dfe:	99 81       	ldd	r25, Y+1	; 0x01
    3e00:	9a 83       	std	Y+2, r25	; 0x02
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	cf 91       	pop	r28
    3e0e:	df 91       	pop	r29
    3e10:	08 95       	ret

00003e12 <data_return>:
 * @return function Date .
*
 * Description: Function To send the data from Keypad
 ********************************************************************************/
uint8_t data_return(void)
{
    3e12:	df 93       	push	r29
    3e14:	cf 93       	push	r28
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
	return Data_Store;
    3e1a:	80 91 77 01 	lds	r24, 0x0177
}
    3e1e:	cf 91       	pop	r28
    3e20:	df 91       	pop	r29
    3e22:	08 95       	ret

00003e24 <App_init_Without_Looping>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init_Without_Looping(void)
{
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
	DIO_setPortDirection(PORTc,DIO_u8_OUTPUT_PORT);
    3e2c:	82 e0       	ldi	r24, 0x02	; 2
    3e2e:	6f ef       	ldi	r22, 0xFF	; 255
    3e30:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <DIO_setPortDirection>

	KEYPAD_Init();	/* KEYPAD Initialization */
    3e34:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <KEYPAD_Init>
}
    3e38:	cf 91       	pop	r28
    3e3a:	df 91       	pop	r29
    3e3c:	08 95       	ret

00003e3e <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	0f 92       	push	r0
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
	uint8_t Flag=0;
    3e48:	19 82       	std	Y+1, r1	; 0x01
	static uint8_t Last_Data=0;
	static uint8_t New_Data=0;
	TIMER_Get_Status(&tim_config,Flag);
    3e4a:	89 e6       	ldi	r24, 0x69	; 105
    3e4c:	91 e0       	ldi	r25, 0x01	; 1
    3e4e:	69 81       	ldd	r22, Y+1	; 0x01
    3e50:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>
	TIMER_Get_Status(&tim1_config,Flag);
    3e54:	8c e6       	ldi	r24, 0x6C	; 108
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	69 81       	ldd	r22, Y+1	; 0x01
    3e5a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>

	gu8_flag = KEYPAD_getStatus(&gu8_key);/* get the pressed key number */
    3e5e:	87 e7       	ldi	r24, 0x77	; 119
    3e60:	92 e0       	ldi	r25, 0x02	; 2
    3e62:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <KEYPAD_getStatus>
    3e66:	80 93 78 02 	sts	0x0278, r24
	New_Data=data_return();
    3e6a:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <data_return>
    3e6e:	80 93 7b 02 	sts	0x027B, r24


	if (Last_Data != New_Data)
    3e72:	90 91 7c 02 	lds	r25, 0x027C
    3e76:	80 91 7b 02 	lds	r24, 0x027B
    3e7a:	98 17       	cp	r25, r24
    3e7c:	19 f0       	breq	.+6      	; 0x3e84 <App_Update+0x46>
	{
		Check_Data=1;
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	80 93 79 02 	sts	0x0279, r24
	}

	if(Check_Data==1)
    3e84:	80 91 79 02 	lds	r24, 0x0279
    3e88:	81 30       	cpi	r24, 0x01	; 1
    3e8a:	f9 f4       	brne	.+62     	; 0x3eca <App_Update+0x8c>
	{
		if(LCD_Flag == TRUE)
    3e8c:	80 91 74 02 	lds	r24, 0x0274
    3e90:	81 30       	cpi	r24, 0x01	; 1
    3e92:	d9 f4       	brne	.+54     	; 0x3eca <App_Update+0x8c>
		{
			if(Update_Flag==FALSE)
    3e94:	80 91 75 02 	lds	r24, 0x0275
    3e98:	88 23       	and	r24, r24
    3e9a:	b9 f4       	brne	.+46     	; 0x3eca <App_Update+0x8c>
			{
				LCD_PrintStatus = LCD_displayCharacter(New_Data+'0');
    3e9c:	80 91 7b 02 	lds	r24, 0x027B
    3ea0:	80 5d       	subi	r24, 0xD0	; 208
    3ea2:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_displayCharacter>
    3ea6:	80 93 7a 02 	sts	0x027A, r24
				if (LCD_PrintStatus == OperationSuccess)
    3eaa:	80 91 7a 02 	lds	r24, 0x027A
    3eae:	88 23       	and	r24, r24
    3eb0:	61 f4       	brne	.+24     	; 0x3eca <App_Update+0x8c>
				{
					DIO_writePortValue(PORTc,New_Data);
    3eb2:	90 91 7b 02 	lds	r25, 0x027B
    3eb6:	82 e0       	ldi	r24, 0x02	; 2
    3eb8:	69 2f       	mov	r22, r25
    3eba:	0e 94 b4 11 	call	0x2368	; 0x2368 <DIO_writePortValue>
					Last_Data=New_Data;
    3ebe:	80 91 7b 02 	lds	r24, 0x027B
    3ec2:	80 93 7c 02 	sts	0x027C, r24
					Check_Data=0;
    3ec6:	10 92 79 02 	sts	0x0279, r1



	/* Check if the key is pressed or not */

}
    3eca:	0f 90       	pop	r0
    3ecc:	cf 91       	pop	r28
    3ece:	df 91       	pop	r29
    3ed0:	08 95       	ret

00003ed2 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    3ed2:	df 93       	push	r29
    3ed4:	cf 93       	push	r28
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62

	if (LCD_Flag == FALSE && (LCD_init()==OperationSuccess))
    3eda:	80 91 74 02 	lds	r24, 0x0274
    3ede:	88 23       	and	r24, r24
    3ee0:	39 f4       	brne	.+14     	; 0x3ef0 <App_init+0x1e>
    3ee2:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <LCD_init>
    3ee6:	88 23       	and	r24, r24
    3ee8:	19 f4       	brne	.+6      	; 0x3ef0 <App_init+0x1e>
	{
		LCD_Flag=TRUE;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	80 93 74 02 	sts	0x0274, r24
	}
	TIMER_Get_Status(&tim1_config,0);
    3ef0:	8c e6       	ldi	r24, 0x6C	; 108
    3ef2:	91 e0       	ldi	r25, 0x01	; 1
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER_Get_Status>

}
    3efa:	cf 91       	pop	r28
    3efc:	df 91       	pop	r29
    3efe:	08 95       	ret

00003f00 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    3f00:	df 93       	push	r29
    3f02:	cf 93       	push	r28
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init_Without_Looping();	/* Test KEYPAD in simple application */
    3f08:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <App_init_Without_Looping>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_init();
    3f0c:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <App_init>
		App_Update();
    3f10:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <App_Update>
    3f14:	fb cf       	rjmp	.-10     	; 0x3f0c <main+0xc>

00003f16 <__mulsi3>:
    3f16:	62 9f       	mul	r22, r18
    3f18:	d0 01       	movw	r26, r0
    3f1a:	73 9f       	mul	r23, r19
    3f1c:	f0 01       	movw	r30, r0
    3f1e:	82 9f       	mul	r24, r18
    3f20:	e0 0d       	add	r30, r0
    3f22:	f1 1d       	adc	r31, r1
    3f24:	64 9f       	mul	r22, r20
    3f26:	e0 0d       	add	r30, r0
    3f28:	f1 1d       	adc	r31, r1
    3f2a:	92 9f       	mul	r25, r18
    3f2c:	f0 0d       	add	r31, r0
    3f2e:	83 9f       	mul	r24, r19
    3f30:	f0 0d       	add	r31, r0
    3f32:	74 9f       	mul	r23, r20
    3f34:	f0 0d       	add	r31, r0
    3f36:	65 9f       	mul	r22, r21
    3f38:	f0 0d       	add	r31, r0
    3f3a:	99 27       	eor	r25, r25
    3f3c:	72 9f       	mul	r23, r18
    3f3e:	b0 0d       	add	r27, r0
    3f40:	e1 1d       	adc	r30, r1
    3f42:	f9 1f       	adc	r31, r25
    3f44:	63 9f       	mul	r22, r19
    3f46:	b0 0d       	add	r27, r0
    3f48:	e1 1d       	adc	r30, r1
    3f4a:	f9 1f       	adc	r31, r25
    3f4c:	bd 01       	movw	r22, r26
    3f4e:	cf 01       	movw	r24, r30
    3f50:	11 24       	eor	r1, r1
    3f52:	08 95       	ret

00003f54 <__udivmodsi4>:
    3f54:	a1 e2       	ldi	r26, 0x21	; 33
    3f56:	1a 2e       	mov	r1, r26
    3f58:	aa 1b       	sub	r26, r26
    3f5a:	bb 1b       	sub	r27, r27
    3f5c:	fd 01       	movw	r30, r26
    3f5e:	0d c0       	rjmp	.+26     	; 0x3f7a <__udivmodsi4_ep>

00003f60 <__udivmodsi4_loop>:
    3f60:	aa 1f       	adc	r26, r26
    3f62:	bb 1f       	adc	r27, r27
    3f64:	ee 1f       	adc	r30, r30
    3f66:	ff 1f       	adc	r31, r31
    3f68:	a2 17       	cp	r26, r18
    3f6a:	b3 07       	cpc	r27, r19
    3f6c:	e4 07       	cpc	r30, r20
    3f6e:	f5 07       	cpc	r31, r21
    3f70:	20 f0       	brcs	.+8      	; 0x3f7a <__udivmodsi4_ep>
    3f72:	a2 1b       	sub	r26, r18
    3f74:	b3 0b       	sbc	r27, r19
    3f76:	e4 0b       	sbc	r30, r20
    3f78:	f5 0b       	sbc	r31, r21

00003f7a <__udivmodsi4_ep>:
    3f7a:	66 1f       	adc	r22, r22
    3f7c:	77 1f       	adc	r23, r23
    3f7e:	88 1f       	adc	r24, r24
    3f80:	99 1f       	adc	r25, r25
    3f82:	1a 94       	dec	r1
    3f84:	69 f7       	brne	.-38     	; 0x3f60 <__udivmodsi4_loop>
    3f86:	60 95       	com	r22
    3f88:	70 95       	com	r23
    3f8a:	80 95       	com	r24
    3f8c:	90 95       	com	r25
    3f8e:	9b 01       	movw	r18, r22
    3f90:	ac 01       	movw	r20, r24
    3f92:	bd 01       	movw	r22, r26
    3f94:	cf 01       	movw	r24, r30
    3f96:	08 95       	ret

00003f98 <__prologue_saves__>:
    3f98:	2f 92       	push	r2
    3f9a:	3f 92       	push	r3
    3f9c:	4f 92       	push	r4
    3f9e:	5f 92       	push	r5
    3fa0:	6f 92       	push	r6
    3fa2:	7f 92       	push	r7
    3fa4:	8f 92       	push	r8
    3fa6:	9f 92       	push	r9
    3fa8:	af 92       	push	r10
    3faa:	bf 92       	push	r11
    3fac:	cf 92       	push	r12
    3fae:	df 92       	push	r13
    3fb0:	ef 92       	push	r14
    3fb2:	ff 92       	push	r15
    3fb4:	0f 93       	push	r16
    3fb6:	1f 93       	push	r17
    3fb8:	cf 93       	push	r28
    3fba:	df 93       	push	r29
    3fbc:	cd b7       	in	r28, 0x3d	; 61
    3fbe:	de b7       	in	r29, 0x3e	; 62
    3fc0:	ca 1b       	sub	r28, r26
    3fc2:	db 0b       	sbc	r29, r27
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	de bf       	out	0x3e, r29	; 62
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	cd bf       	out	0x3d, r28	; 61
    3fce:	09 94       	ijmp

00003fd0 <__epilogue_restores__>:
    3fd0:	2a 88       	ldd	r2, Y+18	; 0x12
    3fd2:	39 88       	ldd	r3, Y+17	; 0x11
    3fd4:	48 88       	ldd	r4, Y+16	; 0x10
    3fd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fda:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fde:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fe0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fe2:	b9 84       	ldd	r11, Y+9	; 0x09
    3fe4:	c8 84       	ldd	r12, Y+8	; 0x08
    3fe6:	df 80       	ldd	r13, Y+7	; 0x07
    3fe8:	ee 80       	ldd	r14, Y+6	; 0x06
    3fea:	fd 80       	ldd	r15, Y+5	; 0x05
    3fec:	0c 81       	ldd	r16, Y+4	; 0x04
    3fee:	1b 81       	ldd	r17, Y+3	; 0x03
    3ff0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ff2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ff4:	ce 0f       	add	r28, r30
    3ff6:	d1 1d       	adc	r29, r1
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	ed 01       	movw	r28, r26
    4004:	08 95       	ret

00004006 <_exit>:
    4006:	f8 94       	cli

00004008 <__stop_program>:
    4008:	ff cf       	rjmp	.-2      	; 0x4008 <__stop_program>
