
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00001388  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ac  008000ac  00001468  2**0
                  ALLOC
  3 .stab         00001d10  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e5  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 09 	call	0x131c	; 0x131c <main>
      8a:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_VidInit>:
 *
 * @return function error state.
 *
 */
UART_ERROR_state_t  UART_VidInit(UART_Config *a_ptr,uint16_t a_BoudRate)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_VidInit+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <UART_VidInit+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	9a 83       	std	Y+2, r25	; 0x02
      a2:	89 83       	std	Y+1, r24	; 0x01
      a4:	7c 83       	std	Y+4, r23	; 0x04
      a6:	6b 83       	std	Y+3, r22	; 0x03
	if(NULL_PTR == a_ptr)
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	9a 81       	ldd	r25, Y+2	; 0x02
      ac:	00 97       	sbiw	r24, 0x00	; 0
      ae:	19 f4       	brne	.+6      	; 0xb6 <UART_VidInit+0x24>
	{
		return E_UART_NULL_PTR;
      b0:	84 e0       	ldi	r24, 0x04	; 4
      b2:	8d 83       	std	Y+5, r24	; 0x05
      b4:	0c c1       	rjmp	.+536    	; 0x2ce <UART_VidInit+0x23c>
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	// Enable Transmit
	SET_BIT(UCSRB,TXEN);
      b6:	aa e2       	ldi	r26, 0x2A	; 42
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	ea e2       	ldi	r30, 0x2A	; 42
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 60       	ori	r24, 0x08	; 8
      c2:	8c 93       	st	X, r24
	//Enable Receive
	SET_BIT(UCSRB,RXEN);
      c4:	aa e2       	ldi	r26, 0x2A	; 42
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	ea e2       	ldi	r30, 0x2A	; 42
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	80 61       	ori	r24, 0x10	; 16
      d0:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL); //To Write in Register UCSRC
      d2:	e0 e4       	ldi	r30, 0x40	; 64
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	80 83       	st	Z, r24

	if (a_ptr->Mode==UART_AsyncDouble)
      da:	e9 81       	ldd	r30, Y+1	; 0x01
      dc:	fa 81       	ldd	r31, Y+2	; 0x02
      de:	82 81       	ldd	r24, Z+2	; 0x02
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	69 f5       	brne	.+90     	; 0x13e <UART_VidInit+0xac>
	{
		UCSRA |=  (1<<U2X);
      e4:	ab e2       	ldi	r26, 0x2B	; 43
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	eb e2       	ldi	r30, 0x2B	; 43
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	82 60       	ori	r24, 0x02	; 2
      f0:	8c 93       	st	X, r24
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
      f2:	a0 e4       	ldi	r26, 0x40	; 64
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e0 e4       	ldi	r30, 0x40	; 64
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	28 2f       	mov	r18, r24
      fe:	29 7f       	andi	r18, 0xF9	; 249
     100:	e9 81       	ldd	r30, Y+1	; 0x01
     102:	fa 81       	ldd	r31, Y+2	; 0x02
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	88 2f       	mov	r24, r24
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	83 70       	andi	r24, 0x03	; 3
     10c:	90 70       	andi	r25, 0x00	; 0
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	82 2b       	or	r24, r18
     114:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ1);
     116:	aa e2       	ldi	r26, 0x2A	; 42
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	ea e2       	ldi	r30, 0x2A	; 42
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	28 2f       	mov	r18, r24
     122:	2b 7f       	andi	r18, 0xFB	; 251
     124:	e9 81       	ldd	r30, Y+1	; 0x01
     126:	fa 81       	ldd	r31, Y+2	; 0x02
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	88 2f       	mov	r24, r24
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	84 70       	andi	r24, 0x04	; 4
     130:	90 70       	andi	r25, 0x00	; 0
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	82 2b       	or	r24, r18
     13c:	8c 93       	st	X, r24
	}

	if (a_ptr->Mode != UART_Sync)
     13e:	e9 81       	ldd	r30, Y+1	; 0x01
     140:	fa 81       	ldd	r31, Y+2	; 0x02
     142:	82 81       	ldd	r24, Z+2	; 0x02
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	09 f4       	brne	.+2      	; 0x14a <UART_VidInit+0xb8>
     148:	4d c0       	rjmp	.+154    	; 0x1e4 <UART_VidInit+0x152>
	{
		//parity
		UCSRC=(UCSRC & 0xCF)|((a_ptr->Parity)<<UPM0);
     14a:	a0 e4       	ldi	r26, 0x40	; 64
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	e0 e4       	ldi	r30, 0x40	; 64
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	28 2f       	mov	r18, r24
     156:	2f 7c       	andi	r18, 0xCF	; 207
     158:	e9 81       	ldd	r30, Y+1	; 0x01
     15a:	fa 81       	ldd	r31, Y+2	; 0x02
     15c:	83 81       	ldd	r24, Z+3	; 0x03
     15e:	88 2f       	mov	r24, r24
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	82 95       	swap	r24
     164:	92 95       	swap	r25
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	98 27       	eor	r25, r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	98 27       	eor	r25, r24
     16e:	82 2b       	or	r24, r18
     170:	8c 93       	st	X, r24
		//StopBit
		UCSRC|=(a_ptr->StopBit)<<USBS;
     172:	a0 e4       	ldi	r26, 0x40	; 64
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	28 2f       	mov	r18, r24
     17e:	e9 81       	ldd	r30, Y+1	; 0x01
     180:	fa 81       	ldd	r31, Y+2	; 0x02
     182:	80 81       	ld	r24, Z
     184:	88 2f       	mov	r24, r24
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	82 2b       	or	r24, r18
     196:	8c 93       	st	X, r24
		// Character Size
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
     198:	a0 e4       	ldi	r26, 0x40	; 64
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	e0 e4       	ldi	r30, 0x40	; 64
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	28 2f       	mov	r18, r24
     1a4:	29 7f       	andi	r18, 0xF9	; 249
     1a6:	e9 81       	ldd	r30, Y+1	; 0x01
     1a8:	fa 81       	ldd	r31, Y+2	; 0x02
     1aa:	81 81       	ldd	r24, Z+1	; 0x01
     1ac:	88 2f       	mov	r24, r24
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	83 70       	andi	r24, 0x03	; 3
     1b2:	90 70       	andi	r25, 0x00	; 0
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	82 2b       	or	r24, r18
     1ba:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ2);
     1bc:	aa e2       	ldi	r26, 0x2A	; 42
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	ea e2       	ldi	r30, 0x2A	; 42
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	28 2f       	mov	r18, r24
     1c8:	2b 7f       	andi	r18, 0xFB	; 251
     1ca:	e9 81       	ldd	r30, Y+1	; 0x01
     1cc:	fa 81       	ldd	r31, Y+2	; 0x02
     1ce:	81 81       	ldd	r24, Z+1	; 0x01
     1d0:	88 2f       	mov	r24, r24
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	84 70       	andi	r24, 0x04	; 4
     1d6:	90 70       	andi	r25, 0x00	; 0
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	82 2b       	or	r24, r18
     1e2:	8c 93       	st	X, r24
	}
	//BoudRate
	if (a_ptr->Mode == UART_AsyncNormal)
     1e4:	e9 81       	ldd	r30, Y+1	; 0x01
     1e6:	fa 81       	ldd	r31, Y+2	; 0x02
     1e8:	82 81       	ldd	r24, Z+2	; 0x02
     1ea:	88 23       	and	r24, r24
     1ec:	29 f5       	brne	.+74     	; 0x238 <UART_VidInit+0x1a6>
	{
		a_BoudRate= (((F_CPU / (a_BoudRate * 16UL))) - 1);
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	9c 81       	ldd	r25, Y+4	; 0x04
     1f2:	cc 01       	movw	r24, r24
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	aa 1f       	adc	r26, r26
     1fe:	bb 1f       	adc	r27, r27
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	aa 1f       	adc	r26, r26
     206:	bb 1f       	adc	r27, r27
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	aa 1f       	adc	r26, r26
     20e:	bb 1f       	adc	r27, r27
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	aa 1f       	adc	r26, r26
     216:	bb 1f       	adc	r27, r27
     218:	9c 01       	movw	r18, r24
     21a:	ad 01       	movw	r20, r26
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	92 e1       	ldi	r25, 0x12	; 18
     220:	aa e7       	ldi	r26, 0x7A	; 122
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodsi4>
     22c:	da 01       	movw	r26, r20
     22e:	c9 01       	movw	r24, r18
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	9c 83       	std	Y+4, r25	; 0x04
     234:	8b 83       	std	Y+3, r24	; 0x03
     236:	3f c0       	rjmp	.+126    	; 0x2b6 <UART_VidInit+0x224>
	}
	else if (a_ptr->Mode == UART_AsyncDouble)
     238:	e9 81       	ldd	r30, Y+1	; 0x01
     23a:	fa 81       	ldd	r31, Y+2	; 0x02
     23c:	82 81       	ldd	r24, Z+2	; 0x02
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	09 f5       	brne	.+66     	; 0x284 <UART_VidInit+0x1f2>
	{
		a_BoudRate= (((F_CPU / (a_BoudRate * 8UL))) - 1);
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	cc 01       	movw	r24, r24
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	aa 1f       	adc	r26, r26
     252:	bb 1f       	adc	r27, r27
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	aa 1f       	adc	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	9c 01       	movw	r18, r24
     266:	ad 01       	movw	r20, r26
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	92 e1       	ldi	r25, 0x12	; 18
     26c:	aa e7       	ldi	r26, 0x7A	; 122
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	bc 01       	movw	r22, r24
     272:	cd 01       	movw	r24, r26
     274:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodsi4>
     278:	da 01       	movw	r26, r20
     27a:	c9 01       	movw	r24, r18
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	9c 83       	std	Y+4, r25	; 0x04
     280:	8b 83       	std	Y+3, r24	; 0x03
     282:	19 c0       	rjmp	.+50     	; 0x2b6 <UART_VidInit+0x224>
	}
	else if (a_ptr->Mode == UART_Sync)
     284:	e9 81       	ldd	r30, Y+1	; 0x01
     286:	fa 81       	ldd	r31, Y+2	; 0x02
     288:	82 81       	ldd	r24, Z+2	; 0x02
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	a1 f4       	brne	.+40     	; 0x2b6 <UART_VidInit+0x224>
	{
		a_BoudRate= ((F_CPU/(2*a_BoudRate))-1);
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	9c 01       	movw	r18, r24
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	92 e1       	ldi	r25, 0x12	; 18
     2a0:	aa e7       	ldi	r26, 0x7A	; 122
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodsi4>
     2ac:	da 01       	movw	r26, r20
     2ae:	c9 01       	movw	r24, r18
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	9c 83       	std	Y+4, r25	; 0x04
     2b4:	8b 83       	std	Y+3, r24	; 0x03
	}
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL=a_BoudRate;
     2b6:	e9 e2       	ldi	r30, 0x29	; 41
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	80 83       	st	Z, r24
	UBRRH=(a_BoudRate>>8);
     2be:	e0 e4       	ldi	r30, 0x40	; 64
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
     2c4:	9c 81       	ldd	r25, Y+4	; 0x04
     2c6:	89 2f       	mov	r24, r25
     2c8:	99 27       	eor	r25, r25
     2ca:	80 83       	st	Z, r24


	return E_UART_SUCCESS;
     2cc:	1d 82       	std	Y+5, r1	; 0x05
     2ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <UART_recieveByte>:
 * @brief: This function Receive a character in the UART buffer.
 *
 * @return function uint8_t.
 */
uint8_t UART_recieveByte(void)
{
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(!(UCSRA & (1<<RXC)));
     2e8:	eb e2       	ldi	r30, 0x2B	; 43
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	88 23       	and	r24, r24
     2f0:	dc f7       	brge	.-10     	; 0x2e8 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
     2f2:	ec e2       	ldi	r30, 0x2C	; 44
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
}
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <UART_sendByte>:
 * @param [in]  a_Data      -  character to be send through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t UART_sendByte(const uint8_t a_Data)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	0f 92       	push	r0
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	89 83       	std	Y+1, r24	; 0x01

	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR=a_Data;
     30a:	ec e2       	ldi	r30, 0x2C	; 44
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	80 83       	st	Z, r24
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(!(UCSRA & (1<<UDRE)));
     312:	eb e2       	ldi	r30, 0x2B	; 43
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	80 72       	andi	r24, 0x20	; 32
     31e:	90 70       	andi	r25, 0x00	; 0
     320:	00 97       	sbiw	r24, 0x00	; 0
     322:	b9 f3       	breq	.-18     	; 0x312 <UART_sendByte+0x14>

	return E_UART_SUCCESS;
     324:	80 e0       	ldi	r24, 0x00	; 0

}
     326:	0f 90       	pop	r0
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	08 95       	ret

0000032e <UART_sendString>:
 * @param [in]  Str    -  pointer to string to send through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t  UART_sendString(const uint8_t *Str)
{
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	00 d0       	rcall	.+0      	; 0x334 <UART_sendString+0x6>
     334:	00 d0       	rcall	.+0      	; 0x336 <UART_sendString+0x8>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	9b 83       	std	Y+3, r25	; 0x03
     33c:	8a 83       	std	Y+2, r24	; 0x02
	/* making sure an initialized pointer is sent to the function */

	if(NULL_PTR == Str)
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	9b 81       	ldd	r25, Y+3	; 0x03
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	19 f4       	brne	.+6      	; 0x34c <UART_sendString+0x1e>
	{
		return E_UART_NULL_PTR;
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	8c 83       	std	Y+4, r24	; 0x04
     34a:	1c c0       	rjmp	.+56     	; 0x384 <UART_sendString+0x56>
	}
	uint8_t i = 0;
     34c:	19 82       	std	Y+1, r1	; 0x01
     34e:	0e c0       	rjmp	.+28     	; 0x36c <UART_sendString+0x3e>
	/* keeps sending data until it finds an end of string character in the string */

	while(Str[i] != '\0')
	{
		/* Put data into Str, sends the data */
		UART_sendByte(Str[i]);
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	9b 81       	ldd	r25, Y+3	; 0x03
     35a:	fc 01       	movw	r30, r24
     35c:	e2 0f       	add	r30, r18
     35e:	f3 1f       	adc	r31, r19
     360:	80 81       	ld	r24, Z
     362:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_sendByte>
		i++;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	89 83       	std	Y+1, r24	; 0x01
		return E_UART_NULL_PTR;
	}
	uint8_t i = 0;
	/* keeps sending data until it finds an end of string character in the string */

	while(Str[i] != '\0')
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	28 2f       	mov	r18, r24
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	9b 81       	ldd	r25, Y+3	; 0x03
     376:	fc 01       	movw	r30, r24
     378:	e2 0f       	add	r30, r18
     37a:	f3 1f       	adc	r31, r19
     37c:	80 81       	ld	r24, Z
     37e:	88 23       	and	r24, r24
     380:	39 f7       	brne	.-50     	; 0x350 <UART_sendString+0x22>
		/* Put data into Str, sends the data */
		UART_sendByte(Str[i]);
		i++;
	}
	/* return success status */
	return E_UART_SUCCESS;
     382:	1c 82       	std	Y+4, r1	; 0x04
     384:	8c 81       	ldd	r24, Y+4	; 0x04
}
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	cf 91       	pop	r28
     390:	df 91       	pop	r29
     392:	08 95       	ret

00000394 <UART_receiveString>:
 * @param [out] Str    -  pointer to string to save the string through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t  UART_receiveString(uint8_t *Str)
{
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <UART_receiveString+0xa>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <UART_receiveString+0xc>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	9b 83       	std	Y+3, r25	; 0x03
     3a6:	8a 83       	std	Y+2, r24	; 0x02

	/* making sure an initialized pointer is sent to the function */
	if(NULL_PTR == Str)
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	19 f4       	brne	.+6      	; 0x3b6 <UART_receiveString+0x22>
	{
		return E_UART_NULL_PTR;
     3b0:	84 e0       	ldi	r24, 0x04	; 4
     3b2:	8c 83       	std	Y+4, r24	; 0x04
     3b4:	32 c0       	rjmp	.+100    	; 0x41a <UART_receiveString+0x86>
	}
	uint8_t i = 0;
     3b6:	19 82       	std	Y+1, r1	; 0x01
	/* Wait for data to be received it */
	Str[i] = UART_recieveByte();
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	9b 81       	ldd	r25, Y+3	; 0x03
     3c2:	8c 01       	movw	r16, r24
     3c4:	02 0f       	add	r16, r18
     3c6:	13 1f       	adc	r17, r19
     3c8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_recieveByte>
     3cc:	f8 01       	movw	r30, r16
     3ce:	80 83       	st	Z, r24
     3d0:	0f c0       	rjmp	.+30     	; 0x3f0 <UART_receiveString+0x5c>
	while(Str[i] != NEW_LINE)
	{
		i++;
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for data to be received it */
		Str[i] = UART_recieveByte();
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	28 2f       	mov	r18, r24
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	9b 81       	ldd	r25, Y+3	; 0x03
     3e2:	8c 01       	movw	r16, r24
     3e4:	02 0f       	add	r16, r18
     3e6:	13 1f       	adc	r17, r19
     3e8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_recieveByte>
     3ec:	f8 01       	movw	r30, r16
     3ee:	80 83       	st	Z, r24
		return E_UART_NULL_PTR;
	}
	uint8_t i = 0;
	/* Wait for data to be received it */
	Str[i] = UART_recieveByte();
	while(Str[i] != NEW_LINE)
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	9b 81       	ldd	r25, Y+3	; 0x03
     3fa:	fc 01       	movw	r30, r24
     3fc:	e2 0f       	add	r30, r18
     3fe:	f3 1f       	adc	r31, r19
     400:	80 81       	ld	r24, Z
     402:	8d 30       	cpi	r24, 0x0D	; 13
     404:	31 f7       	brne	.-52     	; 0x3d2 <UART_receiveString+0x3e>
	{
		i++;
		/* Wait for data to be received it */
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	9b 81       	ldd	r25, Y+3	; 0x03
     410:	fc 01       	movw	r30, r24
     412:	e2 0f       	add	r30, r18
     414:	f3 1f       	adc	r31, r19
     416:	10 82       	st	Z, r1

	/* return success status */
	return E_UART_SUCCESS;
     418:	1c 82       	std	Y+4, r1	; 0x04
     41a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <DIO_setPortDirection>:
 *******************************************************************************/

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	00 d0       	rcall	.+0      	; 0x434 <DIO_setPortDirection+0x6>
     434:	00 d0       	rcall	.+0      	; 0x436 <DIO_setPortDirection+0x8>
     436:	0f 92       	push	r0
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	8a 83       	std	Y+2, r24	; 0x02
     43e:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     440:	19 82       	std	Y+1, r1	; 0x01
	//Check for the ports if it is between 0 to 3
    switch (PortID)
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	3d 83       	std	Y+5, r19	; 0x05
     44a:	2c 83       	std	Y+4, r18	; 0x04
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	9d 81       	ldd	r25, Y+5	; 0x05
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	91 05       	cpc	r25, r1
     454:	d1 f0       	breq	.+52     	; 0x48a <DIO_setPortDirection+0x5c>
     456:	2c 81       	ldd	r18, Y+4	; 0x04
     458:	3d 81       	ldd	r19, Y+5	; 0x05
     45a:	22 30       	cpi	r18, 0x02	; 2
     45c:	31 05       	cpc	r19, r1
     45e:	2c f4       	brge	.+10     	; 0x46a <DIO_setPortDirection+0x3c>
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	9d 81       	ldd	r25, Y+5	; 0x05
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	61 f0       	breq	.+24     	; 0x480 <DIO_setPortDirection+0x52>
     468:	1f c0       	rjmp	.+62     	; 0x4a8 <DIO_setPortDirection+0x7a>
     46a:	2c 81       	ldd	r18, Y+4	; 0x04
     46c:	3d 81       	ldd	r19, Y+5	; 0x05
     46e:	22 30       	cpi	r18, 0x02	; 2
     470:	31 05       	cpc	r19, r1
     472:	81 f0       	breq	.+32     	; 0x494 <DIO_setPortDirection+0x66>
     474:	8c 81       	ldd	r24, Y+4	; 0x04
     476:	9d 81       	ldd	r25, Y+5	; 0x05
     478:	83 30       	cpi	r24, 0x03	; 3
     47a:	91 05       	cpc	r25, r1
     47c:	81 f0       	breq	.+32     	; 0x49e <DIO_setPortDirection+0x70>
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <DIO_setPortDirection+0x7a>
    {
    case PORTa :
        DDRA = PortDirection;
     480:	ea e3       	ldi	r30, 0x3A	; 58
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	80 83       	st	Z, r24
     488:	11 c0       	rjmp	.+34     	; 0x4ac <DIO_setPortDirection+0x7e>
        break;
    case PORTb :
        DDRB = PortDirection;
     48a:	e7 e3       	ldi	r30, 0x37	; 55
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	80 83       	st	Z, r24
     492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_setPortDirection+0x7e>
        break;
    case PORTc :
        DDRC = PortDirection;
     494:	e4 e3       	ldi	r30, 0x34	; 52
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	80 83       	st	Z, r24
     49c:	07 c0       	rjmp	.+14     	; 0x4ac <DIO_setPortDirection+0x7e>
        break;
    case PORTd :
        DDRD = PortDirection;
     49e:	e1 e3       	ldi	r30, 0x31	; 49
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	80 83       	st	Z, r24
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_setPortDirection+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPortDirection
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	cf 91       	pop	r28
     4ba:	df 91       	pop	r29
     4bc:	08 95       	ret

000004be <DIO_setPinDirection>:

/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	28 97       	sbiw	r28, 0x08	; 8
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	8a 83       	std	Y+2, r24	; 0x02
     4d4:	6b 83       	std	Y+3, r22	; 0x03
     4d6:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     4d8:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	88 30       	cpi	r24, 0x08	; 8
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <DIO_setPinDirection+0x24>
     4e0:	f4 c0       	rjmp	.+488    	; 0x6ca <DIO_setPinDirection+0x20c>
	{
		if (DIO_u8_OUTPUT==PinDirection)
     4e2:	8c 81       	ldd	r24, Y+4	; 0x04
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	09 f0       	breq	.+2      	; 0x4ea <DIO_setPinDirection+0x2c>
     4e8:	72 c0       	rjmp	.+228    	; 0x5ce <DIO_setPinDirection+0x110>
		{
			switch (PortID)
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	38 87       	std	Y+8, r19	; 0x08
     4f2:	2f 83       	std	Y+7, r18	; 0x07
     4f4:	8f 81       	ldd	r24, Y+7	; 0x07
     4f6:	98 85       	ldd	r25, Y+8	; 0x08
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	91 05       	cpc	r25, r1
     4fc:	49 f1       	breq	.+82     	; 0x550 <DIO_setPinDirection+0x92>
     4fe:	2f 81       	ldd	r18, Y+7	; 0x07
     500:	38 85       	ldd	r19, Y+8	; 0x08
     502:	22 30       	cpi	r18, 0x02	; 2
     504:	31 05       	cpc	r19, r1
     506:	2c f4       	brge	.+10     	; 0x512 <DIO_setPinDirection+0x54>
     508:	8f 81       	ldd	r24, Y+7	; 0x07
     50a:	98 85       	ldd	r25, Y+8	; 0x08
     50c:	00 97       	sbiw	r24, 0x00	; 0
     50e:	61 f0       	breq	.+24     	; 0x528 <DIO_setPinDirection+0x6a>
     510:	5b c0       	rjmp	.+182    	; 0x5c8 <DIO_setPinDirection+0x10a>
     512:	2f 81       	ldd	r18, Y+7	; 0x07
     514:	38 85       	ldd	r19, Y+8	; 0x08
     516:	22 30       	cpi	r18, 0x02	; 2
     518:	31 05       	cpc	r19, r1
     51a:	71 f1       	breq	.+92     	; 0x578 <DIO_setPinDirection+0xba>
     51c:	8f 81       	ldd	r24, Y+7	; 0x07
     51e:	98 85       	ldd	r25, Y+8	; 0x08
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	91 05       	cpc	r25, r1
     524:	e9 f1       	breq	.+122    	; 0x5a0 <DIO_setPinDirection+0xe2>
     526:	50 c0       	rjmp	.+160    	; 0x5c8 <DIO_setPinDirection+0x10a>
			{
			case PORTa :
				SET_BIT(DDRA, PinNumber);
     528:	aa e3       	ldi	r26, 0x3A	; 58
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e3       	ldi	r30, 0x3A	; 58
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	48 2f       	mov	r20, r24
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 2e       	mov	r0, r18
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_setPinDirection+0x88>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	0a 94       	dec	r0
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_setPinDirection+0x84>
     54a:	84 2b       	or	r24, r20
     54c:	8c 93       	st	X, r24
     54e:	bf c0       	rjmp	.+382    	; 0x6ce <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				SET_BIT(DDRB, PinNumber);
     550:	a7 e3       	ldi	r26, 0x37	; 55
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	e7 e3       	ldi	r30, 0x37	; 55
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	48 2f       	mov	r20, r24
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	28 2f       	mov	r18, r24
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	02 2e       	mov	r0, r18
     568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_setPinDirection+0xb0>
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	0a 94       	dec	r0
     570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_setPinDirection+0xac>
     572:	84 2b       	or	r24, r20
     574:	8c 93       	st	X, r24
     576:	ab c0       	rjmp	.+342    	; 0x6ce <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				SET_BIT(DDRC, PinNumber);
     578:	a4 e3       	ldi	r26, 0x34	; 52
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	e4 e3       	ldi	r30, 0x34	; 52
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	48 2f       	mov	r20, r24
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	28 2f       	mov	r18, r24
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	02 2e       	mov	r0, r18
     590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_setPinDirection+0xd8>
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	0a 94       	dec	r0
     598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_setPinDirection+0xd4>
     59a:	84 2b       	or	r24, r20
     59c:	8c 93       	st	X, r24
     59e:	97 c0       	rjmp	.+302    	; 0x6ce <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				SET_BIT(DDRD, PinNumber);
     5a0:	a1 e3       	ldi	r26, 0x31	; 49
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	e1 e3       	ldi	r30, 0x31	; 49
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	48 2f       	mov	r20, r24
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	28 2f       	mov	r18, r24
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 2e       	mov	r0, r18
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_setPinDirection+0x100>
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	0a 94       	dec	r0
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_setPinDirection+0xfc>
     5c2:	84 2b       	or	r24, r20
     5c4:	8c 93       	st	X, r24
     5c6:	83 c0       	rjmp	.+262    	; 0x6ce <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	80 c0       	rjmp	.+256    	; 0x6ce <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT

		else if (DIO_u8_INPUT == PinDirection)
     5ce:	8c 81       	ldd	r24, Y+4	; 0x04
     5d0:	88 23       	and	r24, r24
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <DIO_setPinDirection+0x118>
     5d4:	77 c0       	rjmp	.+238    	; 0x6c4 <DIO_setPinDirection+0x206>
		{
			switch (PortID)
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	28 2f       	mov	r18, r24
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	3e 83       	std	Y+6, r19	; 0x06
     5de:	2d 83       	std	Y+5, r18	; 0x05
     5e0:	8d 81       	ldd	r24, Y+5	; 0x05
     5e2:	9e 81       	ldd	r25, Y+6	; 0x06
     5e4:	81 30       	cpi	r24, 0x01	; 1
     5e6:	91 05       	cpc	r25, r1
     5e8:	59 f1       	breq	.+86     	; 0x640 <DIO_setPinDirection+0x182>
     5ea:	2d 81       	ldd	r18, Y+5	; 0x05
     5ec:	3e 81       	ldd	r19, Y+6	; 0x06
     5ee:	22 30       	cpi	r18, 0x02	; 2
     5f0:	31 05       	cpc	r19, r1
     5f2:	2c f4       	brge	.+10     	; 0x5fe <DIO_setPinDirection+0x140>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	69 f0       	breq	.+26     	; 0x616 <DIO_setPinDirection+0x158>
     5fc:	60 c0       	rjmp	.+192    	; 0x6be <DIO_setPinDirection+0x200>
     5fe:	2d 81       	ldd	r18, Y+5	; 0x05
     600:	3e 81       	ldd	r19, Y+6	; 0x06
     602:	22 30       	cpi	r18, 0x02	; 2
     604:	31 05       	cpc	r19, r1
     606:	89 f1       	breq	.+98     	; 0x66a <DIO_setPinDirection+0x1ac>
     608:	8d 81       	ldd	r24, Y+5	; 0x05
     60a:	9e 81       	ldd	r25, Y+6	; 0x06
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	91 05       	cpc	r25, r1
     610:	09 f4       	brne	.+2      	; 0x614 <DIO_setPinDirection+0x156>
     612:	40 c0       	rjmp	.+128    	; 0x694 <DIO_setPinDirection+0x1d6>
     614:	54 c0       	rjmp	.+168    	; 0x6be <DIO_setPinDirection+0x200>
			{
			case PORTa :
				CLEAR_BIT(DDRA, PinNumber);
     616:	aa e3       	ldi	r26, 0x3A	; 58
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	ea e3       	ldi	r30, 0x3A	; 58
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	48 2f       	mov	r20, r24
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	02 2e       	mov	r0, r18
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_setPinDirection+0x176>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_setPinDirection+0x172>
     638:	80 95       	com	r24
     63a:	84 23       	and	r24, r20
     63c:	8c 93       	st	X, r24
     63e:	47 c0       	rjmp	.+142    	; 0x6ce <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				CLEAR_BIT(DDRB, PinNumber);
     640:	a7 e3       	ldi	r26, 0x37	; 55
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	e7 e3       	ldi	r30, 0x37	; 55
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	48 2f       	mov	r20, r24
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	02 2e       	mov	r0, r18
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_setPinDirection+0x1a0>
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	0a 94       	dec	r0
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_setPinDirection+0x19c>
     662:	80 95       	com	r24
     664:	84 23       	and	r24, r20
     666:	8c 93       	st	X, r24
     668:	32 c0       	rjmp	.+100    	; 0x6ce <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				CLEAR_BIT(DDRC, PinNumber);
     66a:	a4 e3       	ldi	r26, 0x34	; 52
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	e4 e3       	ldi	r30, 0x34	; 52
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	48 2f       	mov	r20, r24
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	02 2e       	mov	r0, r18
     682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_setPinDirection+0x1ca>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_setPinDirection+0x1c6>
     68c:	80 95       	com	r24
     68e:	84 23       	and	r24, r20
     690:	8c 93       	st	X, r24
     692:	1d c0       	rjmp	.+58     	; 0x6ce <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				CLEAR_BIT(DDRD, PinNumber);
     694:	a1 e3       	ldi	r26, 0x31	; 49
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e1 e3       	ldi	r30, 0x31	; 49
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	48 2f       	mov	r20, r24
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	02 2e       	mov	r0, r18
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_setPinDirection+0x1f4>
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	0a 94       	dec	r0
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_setPinDirection+0x1f0>
     6b6:	80 95       	com	r24
     6b8:	84 23       	and	r24, r20
     6ba:	8c 93       	st	X, r24
     6bc:	08 c0       	rjmp	.+16     	; 0x6ce <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of ELSE IF that check for the direction if it is INPUT
		else
		{
			u8_ERROR_STAT = ERROR_NOK;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	89 83       	std	Y+1, r24	; 0x01
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_setPinDirection+0x210>
		} //END OF ELSE
	}	  //END of IF That checking the port and pin number
	else
	{
		u8_ERROR_STAT = ERROR_NOK;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	89 83       	std	Y+1, r24	; 0x01

	}	  //END of ELSE
	return u8_ERROR_STAT;
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPinDirection
     6d0:	28 96       	adiw	r28, 0x08	; 8
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <DIO_writePortValue>:

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <DIO_writePortValue+0x6>
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <DIO_writePortValue+0x8>
     6ea:	0f 92       	push	r0
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	8a 83       	std	Y+2, r24	; 0x02
     6f2:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     6f4:	19 82       	std	Y+1, r1	; 0x01
    switch (PortID)
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	3d 83       	std	Y+5, r19	; 0x05
     6fe:	2c 83       	std	Y+4, r18	; 0x04
     700:	8c 81       	ldd	r24, Y+4	; 0x04
     702:	9d 81       	ldd	r25, Y+5	; 0x05
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	91 05       	cpc	r25, r1
     708:	d1 f0       	breq	.+52     	; 0x73e <DIO_writePortValue+0x5c>
     70a:	2c 81       	ldd	r18, Y+4	; 0x04
     70c:	3d 81       	ldd	r19, Y+5	; 0x05
     70e:	22 30       	cpi	r18, 0x02	; 2
     710:	31 05       	cpc	r19, r1
     712:	2c f4       	brge	.+10     	; 0x71e <DIO_writePortValue+0x3c>
     714:	8c 81       	ldd	r24, Y+4	; 0x04
     716:	9d 81       	ldd	r25, Y+5	; 0x05
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	61 f0       	breq	.+24     	; 0x734 <DIO_writePortValue+0x52>
     71c:	1f c0       	rjmp	.+62     	; 0x75c <DIO_writePortValue+0x7a>
     71e:	2c 81       	ldd	r18, Y+4	; 0x04
     720:	3d 81       	ldd	r19, Y+5	; 0x05
     722:	22 30       	cpi	r18, 0x02	; 2
     724:	31 05       	cpc	r19, r1
     726:	81 f0       	breq	.+32     	; 0x748 <DIO_writePortValue+0x66>
     728:	8c 81       	ldd	r24, Y+4	; 0x04
     72a:	9d 81       	ldd	r25, Y+5	; 0x05
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	91 05       	cpc	r25, r1
     730:	81 f0       	breq	.+32     	; 0x752 <DIO_writePortValue+0x70>
     732:	14 c0       	rjmp	.+40     	; 0x75c <DIO_writePortValue+0x7a>
    {
    case PORTa :
        PORTA = PortValue;
     734:	eb e3       	ldi	r30, 0x3B	; 59
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	8b 81       	ldd	r24, Y+3	; 0x03
     73a:	80 83       	st	Z, r24
     73c:	11 c0       	rjmp	.+34     	; 0x760 <DIO_writePortValue+0x7e>
        break;
    case PORTb :
        PORTB = PortValue;
     73e:	e8 e3       	ldi	r30, 0x38	; 56
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	80 83       	st	Z, r24
     746:	0c c0       	rjmp	.+24     	; 0x760 <DIO_writePortValue+0x7e>
        break;
    case PORTc :
        PORTC = PortValue;
     748:	e5 e3       	ldi	r30, 0x35	; 53
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	80 83       	st	Z, r24
     750:	07 c0       	rjmp	.+14     	; 0x760 <DIO_writePortValue+0x7e>
        break;
    case PORTd :
        PORTD = PortValue;
     752:	e2 e3       	ldi	r30, 0x32	; 50
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	80 83       	st	Z, r24
     75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_writePortValue+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
     760:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_writePortValue
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	cf 91       	pop	r28
     76e:	df 91       	pop	r29
     770:	08 95       	ret

00000772 <DIO_writePinValue>:

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
     772:	df 93       	push	r29
     774:	cf 93       	push	r28
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	28 97       	sbiw	r28, 0x08	; 8
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	8a 83       	std	Y+2, r24	; 0x02
     788:	6b 83       	std	Y+3, r22	; 0x03
     78a:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     78c:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
	if ( (PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	88 30       	cpi	r24, 0x08	; 8
     792:	08 f0       	brcs	.+2      	; 0x796 <DIO_writePinValue+0x24>
     794:	f4 c0       	rjmp	.+488    	; 0x97e <__stack+0x11f>
	{
		if (DIO_u8_HIGH==PinDirection)
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	09 f0       	breq	.+2      	; 0x79e <DIO_writePinValue+0x2c>
     79c:	72 c0       	rjmp	.+228    	; 0x882 <__stack+0x23>
		{
			switch (PortID)
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	28 2f       	mov	r18, r24
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	38 87       	std	Y+8, r19	; 0x08
     7a6:	2f 83       	std	Y+7, r18	; 0x07
     7a8:	8f 81       	ldd	r24, Y+7	; 0x07
     7aa:	98 85       	ldd	r25, Y+8	; 0x08
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	91 05       	cpc	r25, r1
     7b0:	49 f1       	breq	.+82     	; 0x804 <DIO_writePinValue+0x92>
     7b2:	2f 81       	ldd	r18, Y+7	; 0x07
     7b4:	38 85       	ldd	r19, Y+8	; 0x08
     7b6:	22 30       	cpi	r18, 0x02	; 2
     7b8:	31 05       	cpc	r19, r1
     7ba:	2c f4       	brge	.+10     	; 0x7c6 <DIO_writePinValue+0x54>
     7bc:	8f 81       	ldd	r24, Y+7	; 0x07
     7be:	98 85       	ldd	r25, Y+8	; 0x08
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	61 f0       	breq	.+24     	; 0x7dc <DIO_writePinValue+0x6a>
     7c4:	5b c0       	rjmp	.+182    	; 0x87c <__stack+0x1d>
     7c6:	2f 81       	ldd	r18, Y+7	; 0x07
     7c8:	38 85       	ldd	r19, Y+8	; 0x08
     7ca:	22 30       	cpi	r18, 0x02	; 2
     7cc:	31 05       	cpc	r19, r1
     7ce:	71 f1       	breq	.+92     	; 0x82c <DIO_writePinValue+0xba>
     7d0:	8f 81       	ldd	r24, Y+7	; 0x07
     7d2:	98 85       	ldd	r25, Y+8	; 0x08
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	e9 f1       	breq	.+122    	; 0x854 <DIO_writePinValue+0xe2>
     7da:	50 c0       	rjmp	.+160    	; 0x87c <__stack+0x1d>
			{
			case PORTa :
				SET_BIT(PORTA, PinNumber);
     7dc:	ab e3       	ldi	r26, 0x3B	; 59
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	eb e3       	ldi	r30, 0x3B	; 59
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	48 2f       	mov	r20, r24
     7e8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	02 2e       	mov	r0, r18
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_writePinValue+0x88>
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	0a 94       	dec	r0
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_writePinValue+0x84>
     7fe:	84 2b       	or	r24, r20
     800:	8c 93       	st	X, r24
     802:	bf c0       	rjmp	.+382    	; 0x982 <__stack+0x123>
				break;
			case PORTb :
				SET_BIT(PORTB, PinNumber);
     804:	a8 e3       	ldi	r26, 0x38	; 56
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	e8 e3       	ldi	r30, 0x38	; 56
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	48 2f       	mov	r20, r24
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	28 2f       	mov	r18, r24
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	02 2e       	mov	r0, r18
     81c:	02 c0       	rjmp	.+4      	; 0x822 <DIO_writePinValue+0xb0>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	0a 94       	dec	r0
     824:	e2 f7       	brpl	.-8      	; 0x81e <DIO_writePinValue+0xac>
     826:	84 2b       	or	r24, r20
     828:	8c 93       	st	X, r24
     82a:	ab c0       	rjmp	.+342    	; 0x982 <__stack+0x123>
				break;
			case PORTc :
				SET_BIT(PORTC, PinNumber);
     82c:	a5 e3       	ldi	r26, 0x35	; 53
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	e5 e3       	ldi	r30, 0x35	; 53
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	48 2f       	mov	r20, r24
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	28 2f       	mov	r18, r24
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	02 2e       	mov	r0, r18
     844:	02 c0       	rjmp	.+4      	; 0x84a <DIO_writePinValue+0xd8>
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	0a 94       	dec	r0
     84c:	e2 f7       	brpl	.-8      	; 0x846 <DIO_writePinValue+0xd4>
     84e:	84 2b       	or	r24, r20
     850:	8c 93       	st	X, r24
     852:	97 c0       	rjmp	.+302    	; 0x982 <__stack+0x123>
				break;
			case PORTd :
				SET_BIT(PORTD, PinNumber);
     854:	a2 e3       	ldi	r26, 0x32	; 50
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	e2 e3       	ldi	r30, 0x32	; 50
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	48 2f       	mov	r20, r24
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	02 2e       	mov	r0, r18
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	0a 94       	dec	r0
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	84 2b       	or	r24, r20
     878:	8c 93       	st	X, r24
     87a:	83 c0       	rjmp	.+262    	; 0x982 <__stack+0x123>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	80 c0       	rjmp	.+256    	; 0x982 <__stack+0x123>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT
		else if (DIO_u8_LOW==PinDirection)
     882:	8c 81       	ldd	r24, Y+4	; 0x04
     884:	88 23       	and	r24, r24
     886:	09 f0       	breq	.+2      	; 0x88a <__stack+0x2b>
     888:	77 c0       	rjmp	.+238    	; 0x978 <__stack+0x119>
		{
			switch (PortID)
     88a:	8a 81       	ldd	r24, Y+2	; 0x02
     88c:	28 2f       	mov	r18, r24
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	3e 83       	std	Y+6, r19	; 0x06
     892:	2d 83       	std	Y+5, r18	; 0x05
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	9e 81       	ldd	r25, Y+6	; 0x06
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	91 05       	cpc	r25, r1
     89c:	59 f1       	breq	.+86     	; 0x8f4 <__stack+0x95>
     89e:	2d 81       	ldd	r18, Y+5	; 0x05
     8a0:	3e 81       	ldd	r19, Y+6	; 0x06
     8a2:	22 30       	cpi	r18, 0x02	; 2
     8a4:	31 05       	cpc	r19, r1
     8a6:	2c f4       	brge	.+10     	; 0x8b2 <__stack+0x53>
     8a8:	8d 81       	ldd	r24, Y+5	; 0x05
     8aa:	9e 81       	ldd	r25, Y+6	; 0x06
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	69 f0       	breq	.+26     	; 0x8ca <__stack+0x6b>
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__stack+0x113>
     8b2:	2d 81       	ldd	r18, Y+5	; 0x05
     8b4:	3e 81       	ldd	r19, Y+6	; 0x06
     8b6:	22 30       	cpi	r18, 0x02	; 2
     8b8:	31 05       	cpc	r19, r1
     8ba:	89 f1       	breq	.+98     	; 0x91e <__stack+0xbf>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	9e 81       	ldd	r25, Y+6	; 0x06
     8c0:	83 30       	cpi	r24, 0x03	; 3
     8c2:	91 05       	cpc	r25, r1
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__stack+0x69>
     8c6:	40 c0       	rjmp	.+128    	; 0x948 <__stack+0xe9>
     8c8:	54 c0       	rjmp	.+168    	; 0x972 <__stack+0x113>
			{
			case PORTa :
				CLEAR_BIT(PORTA, PinNumber);
     8ca:	ab e3       	ldi	r26, 0x3B	; 59
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	eb e3       	ldi	r30, 0x3B	; 59
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	48 2f       	mov	r20, r24
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	28 2f       	mov	r18, r24
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 2e       	mov	r0, r18
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
     8ec:	80 95       	com	r24
     8ee:	84 23       	and	r24, r20
     8f0:	8c 93       	st	X, r24
     8f2:	47 c0       	rjmp	.+142    	; 0x982 <__stack+0x123>
				break;
			case PORTb :
				CLEAR_BIT(PORTB, PinNumber);
     8f4:	a8 e3       	ldi	r26, 0x38	; 56
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e8 e3       	ldi	r30, 0x38	; 56
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	48 2f       	mov	r20, r24
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 2e       	mov	r0, r18
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0xb3>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xaf>
     916:	80 95       	com	r24
     918:	84 23       	and	r24, r20
     91a:	8c 93       	st	X, r24
     91c:	32 c0       	rjmp	.+100    	; 0x982 <__stack+0x123>
				break;
			case PORTc :
				CLEAR_BIT(PORTC, PinNumber);
     91e:	a5 e3       	ldi	r26, 0x35	; 53
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e5 e3       	ldi	r30, 0x35	; 53
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	48 2f       	mov	r20, r24
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	28 2f       	mov	r18, r24
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	02 2e       	mov	r0, r18
     936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0xdd>
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	0a 94       	dec	r0
     93e:	e2 f7       	brpl	.-8      	; 0x938 <__stack+0xd9>
     940:	80 95       	com	r24
     942:	84 23       	and	r24, r20
     944:	8c 93       	st	X, r24
     946:	1d c0       	rjmp	.+58     	; 0x982 <__stack+0x123>
				break;
			case PORTd :
				CLEAR_BIT(PORTD, PinNumber);
     948:	a2 e3       	ldi	r26, 0x32	; 50
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	e2 e3       	ldi	r30, 0x32	; 50
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	48 2f       	mov	r20, r24
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 2e       	mov	r0, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x107>
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	0a 94       	dec	r0
     968:	e2 f7       	brpl	.-8      	; 0x962 <__stack+0x103>
     96a:	80 95       	com	r24
     96c:	84 23       	and	r24, r20
     96e:	8c 93       	st	X, r24
     970:	08 c0       	rjmp	.+16     	; 0x982 <__stack+0x123>
				break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	05 c0       	rjmp	.+10     	; 0x982 <__stack+0x123>
			} //END of SWITCH
		} // END OF ELSE IF
		else
        {
            /*INVALID PIN DIRECTION*/
			u8_ERROR_STAT = ERROR_NOK;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x123>
		} //END OF ELSE
	}	  //END OF IF
	else
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	89 83       	std	Y+1, r24	; 0x01
	}	  //END of ELSE
	return u8_ERROR_STAT ;
     982:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_writePinValue
     984:	28 96       	adiw	r28, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	08 95       	ret

00000996 <DIO_readPort>:

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	00 d0       	rcall	.+0      	; 0x99c <DIO_readPort+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <DIO_readPort+0x8>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <DIO_readPort+0xa>
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	8a 83       	std	Y+2, r24	; 0x02
     9a6:	7c 83       	std	Y+4, r23	; 0x04
     9a8:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     9aa:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	19 f4       	brne	.+6      	; 0x9ba <DIO_readPort+0x24>
    {
        u8_ERROR_STAT = ERROR_NOK;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	3d c0       	rjmp	.+122    	; 0xa34 <DIO_readPort+0x9e>
	}
	else
	{
    switch (PortID)
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	28 2f       	mov	r18, r24
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	3e 83       	std	Y+6, r19	; 0x06
     9c2:	2d 83       	std	Y+5, r18	; 0x05
     9c4:	8d 81       	ldd	r24, Y+5	; 0x05
     9c6:	9e 81       	ldd	r25, Y+6	; 0x06
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	91 05       	cpc	r25, r1
     9cc:	e1 f0       	breq	.+56     	; 0xa06 <DIO_readPort+0x70>
     9ce:	2d 81       	ldd	r18, Y+5	; 0x05
     9d0:	3e 81       	ldd	r19, Y+6	; 0x06
     9d2:	22 30       	cpi	r18, 0x02	; 2
     9d4:	31 05       	cpc	r19, r1
     9d6:	2c f4       	brge	.+10     	; 0x9e2 <DIO_readPort+0x4c>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	9e 81       	ldd	r25, Y+6	; 0x06
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	61 f0       	breq	.+24     	; 0x9f8 <DIO_readPort+0x62>
     9e0:	27 c0       	rjmp	.+78     	; 0xa30 <DIO_readPort+0x9a>
     9e2:	2d 81       	ldd	r18, Y+5	; 0x05
     9e4:	3e 81       	ldd	r19, Y+6	; 0x06
     9e6:	22 30       	cpi	r18, 0x02	; 2
     9e8:	31 05       	cpc	r19, r1
     9ea:	a1 f0       	breq	.+40     	; 0xa14 <DIO_readPort+0x7e>
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	9e 81       	ldd	r25, Y+6	; 0x06
     9f0:	83 30       	cpi	r24, 0x03	; 3
     9f2:	91 05       	cpc	r25, r1
     9f4:	b1 f0       	breq	.+44     	; 0xa22 <DIO_readPort+0x8c>
     9f6:	1c c0       	rjmp	.+56     	; 0xa30 <DIO_readPort+0x9a>
    {
    case PORTa :
        *(PortState) = PINA;
     9f8:	e9 e3       	ldi	r30, 0x39	; 57
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	eb 81       	ldd	r30, Y+3	; 0x03
     a00:	fc 81       	ldd	r31, Y+4	; 0x04
     a02:	80 83       	st	Z, r24
     a04:	17 c0       	rjmp	.+46     	; 0xa34 <DIO_readPort+0x9e>
        break;
    case PORTb :
        *(PortState) = PINB;
     a06:	e6 e3       	ldi	r30, 0x36	; 54
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	eb 81       	ldd	r30, Y+3	; 0x03
     a0e:	fc 81       	ldd	r31, Y+4	; 0x04
     a10:	80 83       	st	Z, r24
     a12:	10 c0       	rjmp	.+32     	; 0xa34 <DIO_readPort+0x9e>
        break;
    case PORTc :
        *(PortState) = PINC;
     a14:	e3 e3       	ldi	r30, 0x33	; 51
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	eb 81       	ldd	r30, Y+3	; 0x03
     a1c:	fc 81       	ldd	r31, Y+4	; 0x04
     a1e:	80 83       	st	Z, r24
     a20:	09 c0       	rjmp	.+18     	; 0xa34 <DIO_readPort+0x9e>
        break;
    case PORTd :
        *(PortState) = PIND;
     a22:	e0 e3       	ldi	r30, 0x30	; 48
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	eb 81       	ldd	r30, Y+3	; 0x03
     a2a:	fc 81       	ldd	r31, Y+4	; 0x04
     a2c:	80 83       	st	Z, r24
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_readPort+0x9e>
        break;
    default:
            /*INVALID PORT NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	89 83       	std	Y+1, r24	; 0x01
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
     a34:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_readPort
     a36:	26 96       	adiw	r28, 0x06	; 6
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	08 95       	ret

00000a48 <DIO_readPin>:

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
     a48:	df 93       	push	r29
     a4a:	cf 93       	push	r28
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	27 97       	sbiw	r28, 0x07	; 7
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	8a 83       	std	Y+2, r24	; 0x02
     a5e:	6b 83       	std	Y+3, r22	; 0x03
     a60:	5d 83       	std	Y+5, r21	; 0x05
     a62:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     a64:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
     a66:	8c 81       	ldd	r24, Y+4	; 0x04
     a68:	9d 81       	ldd	r25, Y+5	; 0x05
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	19 f4       	brne	.+6      	; 0xa74 <DIO_readPin+0x2c>
    {
        u8_ERROR_STAT = ERROR_NOK;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	7a c0       	rjmp	.+244    	; 0xb68 <DIO_readPin+0x120>
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	88 30       	cpi	r24, 0x08	; 8
     a78:	08 f0       	brcs	.+2      	; 0xa7c <DIO_readPin+0x34>
     a7a:	74 c0       	rjmp	.+232    	; 0xb64 <DIO_readPin+0x11c>
        {
            switch (PortID)
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	3f 83       	std	Y+7, r19	; 0x07
     a84:	2e 83       	std	Y+6, r18	; 0x06
     a86:	4e 81       	ldd	r20, Y+6	; 0x06
     a88:	5f 81       	ldd	r21, Y+7	; 0x07
     a8a:	41 30       	cpi	r20, 0x01	; 1
     a8c:	51 05       	cpc	r21, r1
     a8e:	59 f1       	breq	.+86     	; 0xae6 <DIO_readPin+0x9e>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	9f 81       	ldd	r25, Y+7	; 0x07
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	91 05       	cpc	r25, r1
     a98:	34 f4       	brge	.+12     	; 0xaa6 <DIO_readPin+0x5e>
     a9a:	2e 81       	ldd	r18, Y+6	; 0x06
     a9c:	3f 81       	ldd	r19, Y+7	; 0x07
     a9e:	21 15       	cp	r18, r1
     aa0:	31 05       	cpc	r19, r1
     aa2:	69 f0       	breq	.+26     	; 0xabe <DIO_readPin+0x76>
     aa4:	5c c0       	rjmp	.+184    	; 0xb5e <DIO_readPin+0x116>
     aa6:	4e 81       	ldd	r20, Y+6	; 0x06
     aa8:	5f 81       	ldd	r21, Y+7	; 0x07
     aaa:	42 30       	cpi	r20, 0x02	; 2
     aac:	51 05       	cpc	r21, r1
     aae:	79 f1       	breq	.+94     	; 0xb0e <DIO_readPin+0xc6>
     ab0:	8e 81       	ldd	r24, Y+6	; 0x06
     ab2:	9f 81       	ldd	r25, Y+7	; 0x07
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	91 05       	cpc	r25, r1
     ab8:	09 f4       	brne	.+2      	; 0xabc <DIO_readPin+0x74>
     aba:	3d c0       	rjmp	.+122    	; 0xb36 <DIO_readPin+0xee>
     abc:	50 c0       	rjmp	.+160    	; 0xb5e <DIO_readPin+0x116>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
     abe:	e9 e3       	ldi	r30, 0x39	; 57
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	28 2f       	mov	r18, r24
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	8b 81       	ldd	r24, Y+3	; 0x03
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a9 01       	movw	r20, r18
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <DIO_readPin+0x8e>
     ad2:	55 95       	asr	r21
     ad4:	47 95       	ror	r20
     ad6:	8a 95       	dec	r24
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <DIO_readPin+0x8a>
     ada:	ca 01       	movw	r24, r20
     adc:	81 70       	andi	r24, 0x01	; 1
     ade:	ec 81       	ldd	r30, Y+4	; 0x04
     ae0:	fd 81       	ldd	r31, Y+5	; 0x05
     ae2:	80 83       	st	Z, r24
     ae4:	41 c0       	rjmp	.+130    	; 0xb68 <DIO_readPin+0x120>
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
     ae6:	e6 e3       	ldi	r30, 0x36	; 54
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a9 01       	movw	r20, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_readPin+0xb6>
     afa:	55 95       	asr	r21
     afc:	47 95       	ror	r20
     afe:	8a 95       	dec	r24
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_readPin+0xb2>
     b02:	ca 01       	movw	r24, r20
     b04:	81 70       	andi	r24, 0x01	; 1
     b06:	ec 81       	ldd	r30, Y+4	; 0x04
     b08:	fd 81       	ldd	r31, Y+5	; 0x05
     b0a:	80 83       	st	Z, r24
     b0c:	2d c0       	rjmp	.+90     	; 0xb68 <DIO_readPin+0x120>
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
     b0e:	e3 e3       	ldi	r30, 0x33	; 51
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	a9 01       	movw	r20, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_readPin+0xde>
     b22:	55 95       	asr	r21
     b24:	47 95       	ror	r20
     b26:	8a 95       	dec	r24
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <DIO_readPin+0xda>
     b2a:	ca 01       	movw	r24, r20
     b2c:	81 70       	andi	r24, 0x01	; 1
     b2e:	ec 81       	ldd	r30, Y+4	; 0x04
     b30:	fd 81       	ldd	r31, Y+5	; 0x05
     b32:	80 83       	st	Z, r24
     b34:	19 c0       	rjmp	.+50     	; 0xb68 <DIO_readPin+0x120>
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
     b36:	e0 e3       	ldi	r30, 0x30	; 48
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	28 2f       	mov	r18, r24
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	88 2f       	mov	r24, r24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a9 01       	movw	r20, r18
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <DIO_readPin+0x106>
     b4a:	55 95       	asr	r21
     b4c:	47 95       	ror	r20
     b4e:	8a 95       	dec	r24
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <DIO_readPin+0x102>
     b52:	ca 01       	movw	r24, r20
     b54:	81 70       	andi	r24, 0x01	; 1
     b56:	ec 81       	ldd	r30, Y+4	; 0x04
     b58:	fd 81       	ldd	r31, Y+5	; 0x05
     b5a:	80 83       	st	Z, r24
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <DIO_readPin+0x120>
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_readPin+0x120>
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	89 83       	std	Y+1, r24	; 0x01
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
     b68:	89 81       	ldd	r24, Y+1	; 0x01
}    //END of DIO_readPint
     b6a:	27 96       	adiw	r28, 0x07	; 7
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DIO_TogglePin>:
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DIO_TogglePin+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <DIO_TogglePin+0x8>
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     b8e:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	88 30       	cpi	r24, 0x08	; 8
     b94:	08 f0       	brcs	.+2      	; 0xb98 <DIO_TogglePin+0x1c>
     b96:	72 c0       	rjmp	.+228    	; 0xc7c <DIO_TogglePin+0x100>
    {
        switch (PortID)
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	3d 83       	std	Y+5, r19	; 0x05
     ba0:	2c 83       	std	Y+4, r18	; 0x04
     ba2:	8c 81       	ldd	r24, Y+4	; 0x04
     ba4:	9d 81       	ldd	r25, Y+5	; 0x05
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	91 05       	cpc	r25, r1
     baa:	49 f1       	breq	.+82     	; 0xbfe <DIO_TogglePin+0x82>
     bac:	2c 81       	ldd	r18, Y+4	; 0x04
     bae:	3d 81       	ldd	r19, Y+5	; 0x05
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <DIO_TogglePin+0x44>
     bb6:	8c 81       	ldd	r24, Y+4	; 0x04
     bb8:	9d 81       	ldd	r25, Y+5	; 0x05
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	61 f0       	breq	.+24     	; 0xbd6 <DIO_TogglePin+0x5a>
     bbe:	5b c0       	rjmp	.+182    	; 0xc76 <DIO_TogglePin+0xfa>
     bc0:	2c 81       	ldd	r18, Y+4	; 0x04
     bc2:	3d 81       	ldd	r19, Y+5	; 0x05
     bc4:	22 30       	cpi	r18, 0x02	; 2
     bc6:	31 05       	cpc	r19, r1
     bc8:	71 f1       	breq	.+92     	; 0xc26 <DIO_TogglePin+0xaa>
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	9d 81       	ldd	r25, Y+5	; 0x05
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	91 05       	cpc	r25, r1
     bd2:	e9 f1       	breq	.+122    	; 0xc4e <DIO_TogglePin+0xd2>
     bd4:	50 c0       	rjmp	.+160    	; 0xc76 <DIO_TogglePin+0xfa>
        {
        case PORTa :
            TOGGLE_BIT(PORTA, PinNumber);
     bd6:	ab e3       	ldi	r26, 0x3B	; 59
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	eb e3       	ldi	r30, 0x3B	; 59
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_TogglePin+0x78>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_TogglePin+0x74>
     bf8:	84 27       	eor	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	41 c0       	rjmp	.+130    	; 0xc80 <DIO_TogglePin+0x104>
            break;
        case PORTb :
            TOGGLE_BIT(PORTB, PinNumber);
     bfe:	a8 e3       	ldi	r26, 0x38	; 56
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e8 e3       	ldi	r30, 0x38	; 56
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_TogglePin+0xa0>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_TogglePin+0x9c>
     c20:	84 27       	eor	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	2d c0       	rjmp	.+90     	; 0xc80 <DIO_TogglePin+0x104>
            break;
        case PORTc :
            TOGGLE_BIT(PORTC, PinNumber);
     c26:	a5 e3       	ldi	r26, 0x35	; 53
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e5 e3       	ldi	r30, 0x35	; 53
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_TogglePin+0xc8>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_TogglePin+0xc4>
     c48:	84 27       	eor	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	19 c0       	rjmp	.+50     	; 0xc80 <DIO_TogglePin+0x104>
            break;
        case PORTd :
            TOGGLE_BIT(PORTD, PinNumber);
     c4e:	a2 e3       	ldi	r26, 0x32	; 50
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e2 e3       	ldi	r30, 0x32	; 50
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	48 2f       	mov	r20, r24
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 2e       	mov	r0, r18
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_TogglePin+0xf0>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_TogglePin+0xec>
     c70:	84 27       	eor	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <DIO_TogglePin+0x104>
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_TogglePin+0x104>
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	89 83       	std	Y+1, r24	; 0x01
    }	  //END of ELSE
    return u8_ERROR_STAT ;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <DIO_SetPullupRes>:
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_SetPullupRes+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <DIO_SetPullupRes+0x8>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	8a 83       	std	Y+2, r24	; 0x02
     ca2:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     ca4:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	08 f0       	brcs	.+2      	; 0xcae <DIO_SetPullupRes+0x1c>
     cac:	ce c0       	rjmp	.+412    	; 0xe4a <DIO_SetPullupRes+0x1b8>
    {
        switch (PortID)
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3d 83       	std	Y+5, r19	; 0x05
     cb6:	2c 83       	std	Y+4, r18	; 0x04
     cb8:	4c 81       	ldd	r20, Y+4	; 0x04
     cba:	5d 81       	ldd	r21, Y+5	; 0x05
     cbc:	41 30       	cpi	r20, 0x01	; 1
     cbe:	51 05       	cpc	r21, r1
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <DIO_SetPullupRes+0x32>
     cc2:	42 c0       	rjmp	.+132    	; 0xd48 <DIO_SetPullupRes+0xb6>
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	91 05       	cpc	r25, r1
     ccc:	34 f4       	brge	.+12     	; 0xcda <DIO_SetPullupRes+0x48>
     cce:	2c 81       	ldd	r18, Y+4	; 0x04
     cd0:	3d 81       	ldd	r19, Y+5	; 0x05
     cd2:	21 15       	cp	r18, r1
     cd4:	31 05       	cpc	r19, r1
     cd6:	71 f0       	breq	.+28     	; 0xcf4 <DIO_SetPullupRes+0x62>
     cd8:	b5 c0       	rjmp	.+362    	; 0xe44 <DIO_SetPullupRes+0x1b2>
     cda:	4c 81       	ldd	r20, Y+4	; 0x04
     cdc:	5d 81       	ldd	r21, Y+5	; 0x05
     cde:	42 30       	cpi	r20, 0x02	; 2
     ce0:	51 05       	cpc	r21, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <DIO_SetPullupRes+0x54>
     ce4:	5b c0       	rjmp	.+182    	; 0xd9c <DIO_SetPullupRes+0x10a>
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <DIO_SetPullupRes+0x60>
     cf0:	7f c0       	rjmp	.+254    	; 0xdf0 <DIO_SetPullupRes+0x15e>
     cf2:	a8 c0       	rjmp	.+336    	; 0xe44 <DIO_SetPullupRes+0x1b2>
        {
        case PORTa :
            if(DIO_u8_INPUT==Get_Bit(DDRA, PinNumber))
     cf4:	ea e3       	ldi	r30, 0x3A	; 58
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	a9 01       	movw	r20, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_SetPullupRes+0x7a>
     d08:	55 95       	asr	r21
     d0a:	47 95       	ror	r20
     d0c:	8a 95       	dec	r24
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_SetPullupRes+0x76>
     d10:	ca 01       	movw	r24, r20
     d12:	81 70       	andi	r24, 0x01	; 1
     d14:	90 70       	andi	r25, 0x00	; 0
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	a1 f4       	brne	.+40     	; 0xd42 <DIO_SetPullupRes+0xb0>
            {
                SET_BIT(PORTA, PinNumber);
     d1a:	ab e3       	ldi	r26, 0x3B	; 59
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	eb e3       	ldi	r30, 0x3B	; 59
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	48 2f       	mov	r20, r24
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_SetPullupRes+0xa6>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_SetPullupRes+0xa2>
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	86 c0       	rjmp	.+268    	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	83 c0       	rjmp	.+262    	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTb :
            if(DIO_u8_INPUT==Get_Bit(DDRB, PinNumber))
     d48:	e7 e3       	ldi	r30, 0x37	; 55
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a9 01       	movw	r20, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_SetPullupRes+0xce>
     d5c:	55 95       	asr	r21
     d5e:	47 95       	ror	r20
     d60:	8a 95       	dec	r24
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_SetPullupRes+0xca>
     d64:	ca 01       	movw	r24, r20
     d66:	81 70       	andi	r24, 0x01	; 1
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_SetPullupRes+0x104>
            {
                SET_BIT(PORTB, PinNumber);
     d6e:	a8 e3       	ldi	r26, 0x38	; 56
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e8 e3       	ldi	r30, 0x38	; 56
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_SetPullupRes+0xfa>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_SetPullupRes+0xf6>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	5c c0       	rjmp	.+184    	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	59 c0       	rjmp	.+178    	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTc :
            if(DIO_u8_INPUT==Get_Bit(DDRC, PinNumber))
     d9c:	e4 e3       	ldi	r30, 0x34	; 52
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a9 01       	movw	r20, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_SetPullupRes+0x122>
     db0:	55 95       	asr	r21
     db2:	47 95       	ror	r20
     db4:	8a 95       	dec	r24
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_SetPullupRes+0x11e>
     db8:	ca 01       	movw	r24, r20
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	a1 f4       	brne	.+40     	; 0xdea <DIO_SetPullupRes+0x158>
            {
                SET_BIT(PORTC, PinNumber);
     dc2:	a5 e3       	ldi	r26, 0x35	; 53
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e5 e3       	ldi	r30, 0x35	; 53
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_SetPullupRes+0x14e>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_SetPullupRes+0x14a>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	32 c0       	rjmp	.+100    	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	2f c0       	rjmp	.+94     	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTd :
            if(DIO_u8_INPUT==Get_Bit(DDRD, PinNumber))
     df0:	e1 e3       	ldi	r30, 0x31	; 49
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_SetPullupRes+0x176>
     e04:	55 95       	asr	r21
     e06:	47 95       	ror	r20
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_SetPullupRes+0x172>
     e0c:	ca 01       	movw	r24, r20
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	90 70       	andi	r25, 0x00	; 0
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	a1 f4       	brne	.+40     	; 0xe3e <DIO_SetPullupRes+0x1ac>
            {
                SET_BIT(PORTD, PinNumber);
     e16:	a2 e3       	ldi	r26, 0x32	; 50
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e2 e3       	ldi	r30, 0x32	; 50
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_SetPullupRes+0x1a2>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_SetPullupRes+0x19e>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <DIO_SetPullupRes+0x1bc>
            }
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_SetPullupRes+0x1bc>
    }	  //END OF IF

    else
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	89 83       	std	Y+1, r24	; 0x01
    } //END of ELSE
    return u8_ERROR_STAT ;
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <LED_Init>:

#include "LED.h"
/*- APIs IMPLEMENTATION
-----------------------------------*/
ERROR_STATE_t LED_Init(uint8_t LED_ID)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <LED_Init+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <LED_Init+0x8>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     e6e:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3c 83       	std	Y+4, r19	; 0x04
     e78:	2b 83       	std	Y+3, r18	; 0x03
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	91 05       	cpc	r25, r1
     e82:	d9 f0       	breq	.+54     	; 0xeba <LED_Init+0x5a>
     e84:	2b 81       	ldd	r18, Y+3	; 0x03
     e86:	3c 81       	ldd	r19, Y+4	; 0x04
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	2c f4       	brge	.+10     	; 0xe98 <LED_Init+0x38>
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	61 f0       	breq	.+24     	; 0xeae <LED_Init+0x4e>
     e96:	23 c0       	rjmp	.+70     	; 0xede <LED_Init+0x7e>
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	3c 81       	ldd	r19, Y+4	; 0x04
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	91 f0       	breq	.+36     	; 0xec6 <LED_Init+0x66>
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	91 05       	cpc	r25, r1
     eaa:	99 f0       	breq	.+38     	; 0xed2 <LED_Init+0x72>
     eac:	18 c0       	rjmp	.+48     	; 0xede <LED_Init+0x7e>
	{
	case LED0:
		DIO_setPinDirection(LED_PORT, LED_PIN4, DIO_u8_OUTPUT);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	64 e0       	ldi	r22, 0x04	; 4
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_setPinDirection>
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <LED_Init+0x82>
		break;
	case LED1:
		DIO_setPinDirection(LED_PORT, LED_PIN5, DIO_u8_OUTPUT);
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	65 e0       	ldi	r22, 0x05	; 5
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_setPinDirection>
     ec4:	0e c0       	rjmp	.+28     	; 0xee2 <LED_Init+0x82>
		break;
	case LED2:
		DIO_setPinDirection(LED_PORT, LED_PIN6, DIO_u8_OUTPUT);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	66 e0       	ldi	r22, 0x06	; 6
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_setPinDirection>
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <LED_Init+0x82>
		break;
	case LED3:
		DIO_setPinDirection(LED_PORT, LED_PIN7, DIO_u8_OUTPUT);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	67 e0       	ldi	r22, 0x07	; 7
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_setPinDirection>
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <LED_Init+0x82>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <LED_toggle>:
ERROR_STATE_t LED_toggle(uint8_t LED_ID)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <LED_toggle+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <LED_toggle+0x8>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     f00:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3c 83       	std	Y+4, r19	; 0x04
     f0a:	2b 83       	std	Y+3, r18	; 0x03
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	d1 f0       	breq	.+52     	; 0xf4a <LED_toggle+0x58>
     f16:	2b 81       	ldd	r18, Y+3	; 0x03
     f18:	3c 81       	ldd	r19, Y+4	; 0x04
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <LED_toggle+0x38>
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	61 f0       	breq	.+24     	; 0xf40 <LED_toggle+0x4e>
     f28:	1f c0       	rjmp	.+62     	; 0xf68 <LED_toggle+0x76>
     f2a:	2b 81       	ldd	r18, Y+3	; 0x03
     f2c:	3c 81       	ldd	r19, Y+4	; 0x04
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	81 f0       	breq	.+32     	; 0xf54 <LED_toggle+0x62>
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	81 f0       	breq	.+32     	; 0xf5e <LED_toggle+0x6c>
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <LED_toggle+0x76>
	{
	case LED0:
		DIO_TogglePin(LED_PORT, LED_PIN4);
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	64 e0       	ldi	r22, 0x04	; 4
     f44:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_TogglePin>
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <LED_toggle+0x7a>
		break;
	case LED1:
		DIO_TogglePin(LED_PORT, LED_PIN5);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	65 e0       	ldi	r22, 0x05	; 5
     f4e:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_TogglePin>
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <LED_toggle+0x7a>
		break;
	case LED2:
		DIO_TogglePin(LED_PORT, LED_PIN6);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	66 e0       	ldi	r22, 0x06	; 6
     f58:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_TogglePin>
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <LED_toggle+0x7a>
		break;
	case LED3:
		DIO_TogglePin(LED_PORT, LED_PIN7);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	67 e0       	ldi	r22, 0x07	; 7
     f62:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_TogglePin>
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <LED_toggle+0x7a>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <LED_Open>:
ERROR_STATE_t LED_Open(uint8_t LED_ID)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <LED_Open+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <LED_Open+0x8>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     f8a:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3c 83       	std	Y+4, r19	; 0x04
     f94:	2b 83       	std	Y+3, r18	; 0x03
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	e9 f0       	breq	.+58     	; 0xfda <LED_Open+0x5e>
     fa0:	2b 81       	ldd	r18, Y+3	; 0x03
     fa2:	3c 81       	ldd	r19, Y+4	; 0x04
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <LED_Open+0x38>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	61 f0       	breq	.+24     	; 0xfca <LED_Open+0x4e>
     fb2:	2b c0       	rjmp	.+86     	; 0x100a <LED_Open+0x8e>
     fb4:	2b 81       	ldd	r18, Y+3	; 0x03
     fb6:	3c 81       	ldd	r19, Y+4	; 0x04
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	b1 f0       	breq	.+44     	; 0xfea <LED_Open+0x6e>
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	c9 f0       	breq	.+50     	; 0xffa <LED_Open+0x7e>
     fc8:	20 c0       	rjmp	.+64     	; 0x100a <LED_Open+0x8e>
	{
	case LED0:
		SET_BIT(PORTB, LED_PIN4);
     fca:	a8 e3       	ldi	r26, 0x38	; 56
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e8 e3       	ldi	r30, 0x38	; 56
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	8c 93       	st	X, r24
     fd8:	1a c0       	rjmp	.+52     	; 0x100e <LED_Open+0x92>
		break;
	case LED1:
		SET_BIT(PORTB, LED_PIN5);
     fda:	a8 e3       	ldi	r26, 0x38	; 56
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e8 e3       	ldi	r30, 0x38	; 56
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 62       	ori	r24, 0x20	; 32
     fe6:	8c 93       	st	X, r24
     fe8:	12 c0       	rjmp	.+36     	; 0x100e <LED_Open+0x92>
		break;
	case LED2:
		SET_BIT(PORTB, LED_PIN6);
     fea:	a8 e3       	ldi	r26, 0x38	; 56
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e8 e3       	ldi	r30, 0x38	; 56
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	8c 93       	st	X, r24
     ff8:	0a c0       	rjmp	.+20     	; 0x100e <LED_Open+0x92>
		break;
	case LED3:
		SET_BIT(PORTB, LED_PIN7);
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	8c 93       	st	X, r24
    1008:	02 c0       	rjmp	.+4      	; 0x100e <LED_Open+0x92>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <LED_Close>:
ERROR_STATE_t LED_Close(uint8_t LED_ID)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <LED_Close+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <LED_Close+0x8>
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    102c:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	e9 f0       	breq	.+58     	; 0x107c <LED_Close+0x5e>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <LED_Close+0x38>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <LED_Close+0x4e>
    1054:	2b c0       	rjmp	.+86     	; 0x10ac <LED_Close+0x8e>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	b1 f0       	breq	.+44     	; 0x108c <LED_Close+0x6e>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	c9 f0       	breq	.+50     	; 0x109c <LED_Close+0x7e>
    106a:	20 c0       	rjmp	.+64     	; 0x10ac <LED_Close+0x8e>
	{
	case LED0:
		CLEAR_BIT(PORTB, LED_PIN4);
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 7e       	andi	r24, 0xEF	; 239
    1078:	8c 93       	st	X, r24
    107a:	1a c0       	rjmp	.+52     	; 0x10b0 <LED_Close+0x92>
		break;
	case LED1:
		CLEAR_BIT(PORTB, LED_PIN5);
    107c:	a8 e3       	ldi	r26, 0x38	; 56
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e8 e3       	ldi	r30, 0x38	; 56
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8f 7d       	andi	r24, 0xDF	; 223
    1088:	8c 93       	st	X, r24
    108a:	12 c0       	rjmp	.+36     	; 0x10b0 <LED_Close+0x92>
		break;
	case LED2:
		CLEAR_BIT(PORTB, LED_PIN6);
    108c:	a8 e3       	ldi	r26, 0x38	; 56
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e8 e3       	ldi	r30, 0x38	; 56
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7b       	andi	r24, 0xBF	; 191
    1098:	8c 93       	st	X, r24
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <LED_Close+0x92>
		break;
	case LED3:
		CLEAR_BIT(PORTB, LED_PIN7);
    109c:	a8 e3       	ldi	r26, 0x38	; 56
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e8 e3       	ldi	r30, 0x38	; 56
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	8c 93       	st	X, r24
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <LED_Close+0x92>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <LED_AllOpen>:

ERROR_STATE_t LED_AllOpen()
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    10ca:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(PORTB,LED_PIN4);
    10cc:	a8 e3       	ldi	r26, 0x38	; 56
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e8 e3       	ldi	r30, 0x38	; 56
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 61       	ori	r24, 0x10	; 16
    10d8:	8c 93       	st	X, r24
	SET_BIT(PORTB,LED_PIN5);
    10da:	a8 e3       	ldi	r26, 0x38	; 56
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e3       	ldi	r30, 0x38	; 56
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	8c 93       	st	X, r24
	SET_BIT(PORTB,LED_PIN6);
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8c 93       	st	X, r24
	SET_BIT(PORTB,LED_PIN7);
    10f6:	a8 e3       	ldi	r26, 0x38	; 56
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e3       	ldi	r30, 0x38	; 56
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 68       	ori	r24, 0x80	; 128
    1102:	8c 93       	st	X, r24

	return u8_ERROR_STAT;
    1104:	89 81       	ldd	r24, Y+1	; 0x01
}
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <LED_AllClose>:
ERROR_STATE_t LED_AllClose()
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1118:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(PORTB,LED_PIN4);
    111a:	a8 e3       	ldi	r26, 0x38	; 56
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7e       	andi	r24, 0xEF	; 239
    1126:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,LED_PIN5);
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 7d       	andi	r24, 0xDF	; 223
    1134:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,LED_PIN6);
    1136:	a8 e3       	ldi	r26, 0x38	; 56
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e3       	ldi	r30, 0x38	; 56
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8f 7b       	andi	r24, 0xBF	; 191
    1142:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,LED_PIN7);
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 77       	andi	r24, 0x7F	; 127
    1150:	8c 93       	st	X, r24

	return u8_ERROR_STAT;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <APP_Init>:
 *
 * [Description]: 	Function to Initialize the application
 *
 *******************************************************************************/
void APP_Init(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <APP_Init+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <APP_Init+0x8>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	UART_Config config={UART_1StopBit,UART_8Bit,UART_AsyncDouble,UART_Disable};// configuration of UART driver
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	8a 83       	std	Y+2, r24	; 0x02
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	8b 83       	std	Y+3, r24	; 0x03
    1172:	1c 82       	std	Y+4, r1	; 0x04
	UART_VidInit(&config,9600); // initialize UART driver
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	60 e8       	ldi	r22, 0x80	; 128
    117a:	75 e2       	ldi	r23, 0x25	; 37
    117c:	0e 94 49 00 	call	0x92	; 0x92 <UART_VidInit>
	LED_Init(LED0);// initialize LED0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0e 94 30 07 	call	0xe60	; 0xe60 <LED_Init>
	LED_Init(LED1);// initialize LED1
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 30 07 	call	0xe60	; 0xe60 <LED_Init>
	LED_Init(LED2);// initialize LED2
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	0e 94 30 07 	call	0xe60	; 0xe60 <LED_Init>

}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <APP_Update>:
 *
 * [Description]: 	Function to update the state of the application
 *
 *******************************************************************************/
void APP_Update(void)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <APP_Update+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(gu8_ReceiverBuffer);//Receive data from Uart
    11aa:	8c ea       	ldi	r24, 0xAC	; 172
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 ca 01 	call	0x394	; 0x394 <UART_receiveString>

	/*Compare Received Data  */
	if (strcmp(gu8_ReceiverBuffer,"START")==0)
    11b2:	8c ea       	ldi	r24, 0xAC	; 172
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	20 e6       	ldi	r18, 0x60	; 96
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	b9 01       	movw	r22, r18
    11bc:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	19 f4       	brne	.+6      	; 0x11ca <APP_Update+0x2a>
	{
		State=GREEN;//Put On This Variable to indicate To  Open led green
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 b3 00 	sts	0x00B3, r24
	}
	if (strcmp(gu8_ReceiverBuffer,"STOP")==0)
    11ca:	8c ea       	ldi	r24, 0xAC	; 172
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	26 e6       	ldi	r18, 0x66	; 102
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	b9 01       	movw	r22, r18
    11d4:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	19 f4       	brne	.+6      	; 0x11e2 <APP_Update+0x42>
	{
		State=RED;//Put On This Variable to indicate To  Open led red
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	80 93 b3 00 	sts	0x00B3, r24
	}

	if (strcmp(gu8_ReceiverBuffer,"WAIT")==0)
    11e2:	8c ea       	ldi	r24, 0xAC	; 172
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	2b e6       	ldi	r18, 0x6B	; 107
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	b9 01       	movw	r22, r18
    11ec:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	19 f4       	brne	.+6      	; 0x11fa <APP_Update+0x5a>
	{
		State=YELLOW;//Put On This Variable to indicate To  Open led yellow
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	80 93 b3 00 	sts	0x00B3, r24
	}
	if (strcmp(gu8_ReceiverBuffer,"AT")==0)
    11fa:	8c ea       	ldi	r24, 0xAC	; 172
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	20 e7       	ldi	r18, 0x70	; 112
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	b9 01       	movw	r22, r18
    1204:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	19 f4       	brne	.+6      	; 0x1212 <APP_Update+0x72>
	{
		State=AT;//Put On This Variable to indicate To  close All led
    120c:	84 e0       	ldi	r24, 0x04	; 4
    120e:	80 93 b3 00 	sts	0x00B3, r24
	}

	switch (State)
    1212:	80 91 b3 00 	lds	r24, 0x00B3
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3a 83       	std	Y+2, r19	; 0x02
    121c:	29 83       	std	Y+1, r18	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	91 05       	cpc	r25, r1
    1226:	29 f1       	breq	.+74     	; 0x1272 <APP_Update+0xd2>
    1228:	29 81       	ldd	r18, Y+1	; 0x01
    122a:	3a 81       	ldd	r19, Y+2	; 0x02
    122c:	23 30       	cpi	r18, 0x03	; 3
    122e:	31 05       	cpc	r19, r1
    1230:	34 f4       	brge	.+12     	; 0x123e <APP_Update+0x9e>
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	61 f0       	breq	.+24     	; 0x1254 <APP_Update+0xb4>
    123c:	44 c0       	rjmp	.+136    	; 0x12c6 <APP_Update+0x126>
    123e:	29 81       	ldd	r18, Y+1	; 0x01
    1240:	3a 81       	ldd	r19, Y+2	; 0x02
    1242:	23 30       	cpi	r18, 0x03	; 3
    1244:	31 05       	cpc	r19, r1
    1246:	21 f1       	breq	.+72     	; 0x1290 <APP_Update+0xf0>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	91 05       	cpc	r25, r1
    1250:	71 f1       	breq	.+92     	; 0x12ae <APP_Update+0x10e>
    1252:	39 c0       	rjmp	.+114    	; 0x12c6 <APP_Update+0x126>
	{
	case GREEN:
		LED_AllClose();//close all led at first
    1254:	0e 94 87 08 	call	0x110e	; 0x110e <LED_AllClose>
		LED_Open(LED0);//open LED0
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	0e 94 be 07 	call	0xf7c	; 0xf7c <LED_Open>
		UART_sendString("Green LED is on"); //to send this word to the terminal
    125e:	83 e7       	ldi	r24, 0x73	; 115
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 97 01 	call	0x32e	; 0x32e <UART_sendString>
		UART_sendByte(NEW_LINE);//to send NewLINE to the terminal
    1266:	8d e0       	ldi	r24, 0x0D	; 13
    1268:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_sendByte>
		State = 0;//make this variable zero to receive new data on it
    126c:	10 92 b3 00 	sts	0x00B3, r1
    1270:	33 c0       	rjmp	.+102    	; 0x12d8 <APP_Update+0x138>
		break;
	case YELLOW:
		LED_AllClose();//close all led at first
    1272:	0e 94 87 08 	call	0x110e	; 0x110e <LED_AllClose>
		LED_Open(LED1);//open LED0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	0e 94 be 07 	call	0xf7c	; 0xf7c <LED_Open>
		UART_sendString("Yellow LED is on");//to send this word to the terminal
    127c:	83 e8       	ldi	r24, 0x83	; 131
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 97 01 	call	0x32e	; 0x32e <UART_sendString>
		UART_sendByte(NEW_LINE);//to send NewLINE to the terminal
    1284:	8d e0       	ldi	r24, 0x0D	; 13
    1286:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_sendByte>
		State = 0 ;//make this variable zero to receive new data on it
    128a:	10 92 b3 00 	sts	0x00B3, r1
    128e:	24 c0       	rjmp	.+72     	; 0x12d8 <APP_Update+0x138>
		break;
	case RED:
		LED_AllClose();//close all led at first
    1290:	0e 94 87 08 	call	0x110e	; 0x110e <LED_AllClose>
		LED_Open(LED2);//open LED0
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 be 07 	call	0xf7c	; 0xf7c <LED_Open>
		UART_sendString("Red LED is on");//to send this word to the terminal
    129a:	84 e9       	ldi	r24, 0x94	; 148
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 97 01 	call	0x32e	; 0x32e <UART_sendString>
		UART_sendByte(NEW_LINE);//to send NewLINE to the terminal
    12a2:	8d e0       	ldi	r24, 0x0D	; 13
    12a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_sendByte>
		State = 0;//make this variable zero to receive new data on it
    12a8:	10 92 b3 00 	sts	0x00B3, r1
    12ac:	15 c0       	rjmp	.+42     	; 0x12d8 <APP_Update+0x138>
		break;
	case AT:
		LED_AllClose();//close all led at first
    12ae:	0e 94 87 08 	call	0x110e	; 0x110e <LED_AllClose>
		UART_sendString("OK");
    12b2:	82 ea       	ldi	r24, 0xA2	; 162
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 97 01 	call	0x32e	; 0x32e <UART_sendString>
		UART_sendByte(NEW_LINE);//to send NewLINE to the terminal
    12ba:	8d e0       	ldi	r24, 0x0D	; 13
    12bc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_sendByte>
		State = 0;//make this variable zero to receive new data on it
    12c0:	10 92 b3 00 	sts	0x00B3, r1
    12c4:	09 c0       	rjmp	.+18     	; 0x12d8 <APP_Update+0x138>
		break;
	default:
		UART_sendString("Error");/* Error Message */
    12c6:	85 ea       	ldi	r24, 0xA5	; 165
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 97 01 	call	0x32e	; 0x32e <UART_sendString>
		UART_sendByte(NEW_LINE);//to send NewLINE to the terminal
    12ce:	8d e0       	ldi	r24, 0x0D	; 13
    12d0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <UART_sendByte>
		State = 0;//make this variable zero to receive new data on it
    12d4:	10 92 b3 00 	sts	0x00B3, r1
		break;
	}
	APP_ClearBuffer();//to clear this variable to receive new data on it
    12d8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <APP_ClearBuffer>

}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <APP_ClearBuffer>:
 *
 * [Description]: 	Function to Clear Data From array
 *
 *******************************************************************************/
void APP_ClearBuffer(void)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	for(Counter = 0 ;Counter<6  ; Counter++)
    12ee:	10 92 b2 00 	sts	0x00B2, r1
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <APP_ClearBuffer+0x28>
	{
		gu8_ReceiverBuffer[Counter] = 0;
    12f4:	80 91 b2 00 	lds	r24, 0x00B2
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	fc 01       	movw	r30, r24
    12fe:	e4 55       	subi	r30, 0x54	; 84
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	10 82       	st	Z, r1
 * [Description]: 	Function to Clear Data From array
 *
 *******************************************************************************/
void APP_ClearBuffer(void)
{
	for(Counter = 0 ;Counter<6  ; Counter++)
    1304:	80 91 b2 00 	lds	r24, 0x00B2
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 b2 00 	sts	0x00B2, r24
    130e:	80 91 b2 00 	lds	r24, 0x00B2
    1312:	86 30       	cpi	r24, 0x06	; 6
    1314:	78 f3       	brcs	.-34     	; 0x12f4 <APP_ClearBuffer+0xe>
	{
		gu8_ReceiverBuffer[Counter] = 0;
	}

}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <main>:
#include"APP/APP.h"
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/
int main()
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
/********************************************************************************
*                           SYSTEM INITIALIZATION                              *
********************************************************************************/
	APP_Init();
    1324:	0e 94 ae 08 	call	0x115c	; 0x115c <APP_Init>
	while(1)
	{
/********************************************************************************
*                        APPLICATION	(SUPER LOOP)						    *
********************************************************************************/
		APP_Update();
    1328:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <APP_Update>
    132c:	fd cf       	rjmp	.-6      	; 0x1328 <main+0xc>

0000132e <__udivmodsi4>:
    132e:	a1 e2       	ldi	r26, 0x21	; 33
    1330:	1a 2e       	mov	r1, r26
    1332:	aa 1b       	sub	r26, r26
    1334:	bb 1b       	sub	r27, r27
    1336:	fd 01       	movw	r30, r26
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <__udivmodsi4_ep>

0000133a <__udivmodsi4_loop>:
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	ee 1f       	adc	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	a2 17       	cp	r26, r18
    1344:	b3 07       	cpc	r27, r19
    1346:	e4 07       	cpc	r30, r20
    1348:	f5 07       	cpc	r31, r21
    134a:	20 f0       	brcs	.+8      	; 0x1354 <__udivmodsi4_ep>
    134c:	a2 1b       	sub	r26, r18
    134e:	b3 0b       	sbc	r27, r19
    1350:	e4 0b       	sbc	r30, r20
    1352:	f5 0b       	sbc	r31, r21

00001354 <__udivmodsi4_ep>:
    1354:	66 1f       	adc	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	88 1f       	adc	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	1a 94       	dec	r1
    135e:	69 f7       	brne	.-38     	; 0x133a <__udivmodsi4_loop>
    1360:	60 95       	com	r22
    1362:	70 95       	com	r23
    1364:	80 95       	com	r24
    1366:	90 95       	com	r25
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	bd 01       	movw	r22, r26
    136e:	cf 01       	movw	r24, r30
    1370:	08 95       	ret

00001372 <strcmp>:
    1372:	fb 01       	movw	r30, r22
    1374:	dc 01       	movw	r26, r24
    1376:	8d 91       	ld	r24, X+
    1378:	01 90       	ld	r0, Z+
    137a:	80 19       	sub	r24, r0
    137c:	01 10       	cpse	r0, r1
    137e:	d9 f3       	breq	.-10     	; 0x1376 <strcmp+0x4>
    1380:	99 0b       	sbc	r25, r25
    1382:	08 95       	ret

00001384 <_exit>:
    1384:	f8 94       	cli

00001386 <__stop_program>:
    1386:	ff cf       	rjmp	.-2      	; 0x1386 <__stop_program>
