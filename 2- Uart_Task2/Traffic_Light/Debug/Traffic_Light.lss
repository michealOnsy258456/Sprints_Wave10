
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00001f04  00001f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001b4  008001b4  000020ec  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001246  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  0000506e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  00005205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  00006c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  00007b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000893c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  00008a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  00008d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <main>
      8a:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ea       	ldi	r26, 0xAB	; 171
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	6b ea       	ldi	r22, 0xAB	; 171
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	ed 54       	subi	r30, 0x4D	; 77
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__stack+0x147>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__stack+0x141>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__stack+0xf>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__stack+0x1f>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__stack+0x14b>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__stack+0x2d>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__stack+0xe3>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__stack+0x45>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__stack+0x99>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0xbd>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0xc5>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__stack+0xdd>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x131>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__stack+0x141>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__stack+0x113>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x123>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x11b>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x131>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__stack+0x133>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0x14b>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <UART_VidInit>:
 *
 * @return function error state.
 *
 */
UART_ERROR_state_t  UART_VidInit(UART_Config *a_ptr,uint16_t a_BoudRate)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <UART_VidInit+0x6>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <UART_VidInit+0x8>
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	7c 83       	std	Y+4, r23	; 0x04
     b8e:	6b 83       	std	Y+3, r22	; 0x03
	if(NULL_PTR == a_ptr)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	19 f4       	brne	.+6      	; 0xb9e <UART_VidInit+0x24>
	{
		return E_UART_NULL_PTR;
     b98:	84 e0       	ldi	r24, 0x04	; 4
     b9a:	8d 83       	std	Y+5, r24	; 0x05
     b9c:	1f c1       	rjmp	.+574    	; 0xddc <UART_VidInit+0x262>
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	// Enable Transmit
	SET_BIT(UCSRB,TXEN);
     b9e:	aa e2       	ldi	r26, 0x2A	; 42
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e2       	ldi	r30, 0x2A	; 42
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	8c 93       	st	X, r24
	//Enable Receive
	SET_BIT(UCSRB,RXEN);
     bac:	aa e2       	ldi	r26, 0x2A	; 42
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ea e2       	ldi	r30, 0x2A	; 42
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 61       	ori	r24, 0x10	; 16
     bb8:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL); //To Write in Register UCSRC
     bba:	e0 e4       	ldi	r30, 0x40	; 64
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	80 83       	st	Z, r24

	if (a_ptr->Mode==UART_AsyncDouble)
     bc2:	e9 81       	ldd	r30, Y+1	; 0x01
     bc4:	fa 81       	ldd	r31, Y+2	; 0x02
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	69 f5       	brne	.+90     	; 0xc26 <UART_VidInit+0xac>
	{
		UCSRA |=  (1<<U2X);
     bcc:	ab e2       	ldi	r26, 0x2B	; 43
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	eb e2       	ldi	r30, 0x2B	; 43
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	8c 93       	st	X, r24
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	28 2f       	mov	r18, r24
     be6:	29 7f       	andi	r18, 0xF9	; 249
     be8:	e9 81       	ldd	r30, Y+1	; 0x01
     bea:	fa 81       	ldd	r31, Y+2	; 0x02
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	83 70       	andi	r24, 0x03	; 3
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	82 2b       	or	r24, r18
     bfc:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ1);
     bfe:	aa e2       	ldi	r26, 0x2A	; 42
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e2       	ldi	r30, 0x2A	; 42
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	28 2f       	mov	r18, r24
     c0a:	2b 7f       	andi	r18, 0xFB	; 251
     c0c:	e9 81       	ldd	r30, Y+1	; 0x01
     c0e:	fa 81       	ldd	r31, Y+2	; 0x02
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	84 70       	andi	r24, 0x04	; 4
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	82 2b       	or	r24, r18
     c24:	8c 93       	st	X, r24
	}

	if (a_ptr->Mode != UART_Sync)
     c26:	e9 81       	ldd	r30, Y+1	; 0x01
     c28:	fa 81       	ldd	r31, Y+2	; 0x02
     c2a:	82 81       	ldd	r24, Z+2	; 0x02
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	09 f4       	brne	.+2      	; 0xc32 <UART_VidInit+0xb8>
     c30:	4d c0       	rjmp	.+154    	; 0xccc <UART_VidInit+0x152>
	{
		//parity
		UCSRC=(UCSRC & 0xCF)|((a_ptr->Parity)<<UPM0);
     c32:	a0 e4       	ldi	r26, 0x40	; 64
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e0 e4       	ldi	r30, 0x40	; 64
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	28 2f       	mov	r18, r24
     c3e:	2f 7c       	andi	r18, 0xCF	; 207
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	83 81       	ldd	r24, Z+3	; 0x03
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	82 95       	swap	r24
     c4c:	92 95       	swap	r25
     c4e:	90 7f       	andi	r25, 0xF0	; 240
     c50:	98 27       	eor	r25, r24
     c52:	80 7f       	andi	r24, 0xF0	; 240
     c54:	98 27       	eor	r25, r24
     c56:	82 2b       	or	r24, r18
     c58:	8c 93       	st	X, r24
		//StopBit
		UCSRC|=(a_ptr->StopBit)<<USBS;
     c5a:	a0 e4       	ldi	r26, 0x40	; 64
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e0 e4       	ldi	r30, 0x40	; 64
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	28 2f       	mov	r18, r24
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	80 81       	ld	r24, Z
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	82 2b       	or	r24, r18
     c7e:	8c 93       	st	X, r24
		// Character Size
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
     c80:	a0 e4       	ldi	r26, 0x40	; 64
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e0 e4       	ldi	r30, 0x40	; 64
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	28 2f       	mov	r18, r24
     c8c:	29 7f       	andi	r18, 0xF9	; 249
     c8e:	e9 81       	ldd	r30, Y+1	; 0x01
     c90:	fa 81       	ldd	r31, Y+2	; 0x02
     c92:	81 81       	ldd	r24, Z+1	; 0x01
     c94:	88 2f       	mov	r24, r24
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	83 70       	andi	r24, 0x03	; 3
     c9a:	90 70       	andi	r25, 0x00	; 0
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	82 2b       	or	r24, r18
     ca2:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ2);
     ca4:	aa e2       	ldi	r26, 0x2A	; 42
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e2       	ldi	r30, 0x2A	; 42
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	28 2f       	mov	r18, r24
     cb0:	2b 7f       	andi	r18, 0xFB	; 251
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	84 70       	andi	r24, 0x04	; 4
     cbe:	90 70       	andi	r25, 0x00	; 0
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	82 2b       	or	r24, r18
     cca:	8c 93       	st	X, r24
	}
	//BoudRate
	if (a_ptr->Mode == UART_AsyncNormal)
     ccc:	e9 81       	ldd	r30, Y+1	; 0x01
     cce:	fa 81       	ldd	r31, Y+2	; 0x02
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	88 23       	and	r24, r24
     cd4:	29 f5       	brne	.+74     	; 0xd20 <UART_VidInit+0x1a6>
	{
		a_BoudRate= (((F_CPU / (a_BoudRate * 16UL))) - 1);
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	cc 01       	movw	r24, r24
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	aa 1f       	adc	r26, r26
     ce6:	bb 1f       	adc	r27, r27
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	aa 1f       	adc	r26, r26
     cee:	bb 1f       	adc	r27, r27
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	aa 1f       	adc	r26, r26
     cf6:	bb 1f       	adc	r27, r27
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	aa 1f       	adc	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	9c 01       	movw	r18, r24
     d02:	ad 01       	movw	r20, r26
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	92 e1       	ldi	r25, 0x12	; 18
     d08:	aa e7       	ldi	r26, 0x7A	; 122
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodsi4>
     d14:	da 01       	movw	r26, r20
     d16:	c9 01       	movw	r24, r18
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	9c 83       	std	Y+4, r25	; 0x04
     d1c:	8b 83       	std	Y+3, r24	; 0x03
     d1e:	52 c0       	rjmp	.+164    	; 0xdc4 <UART_VidInit+0x24a>
	}
	else if (a_ptr->Mode == UART_AsyncDouble)
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	09 f5       	brne	.+66     	; 0xd6c <UART_VidInit+0x1f2>
	{
		a_BoudRate= (((F_CPU / (a_BoudRate * 8UL))) - 1);
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	cc 01       	movw	r24, r24
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	aa 1f       	adc	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	aa 1f       	adc	r26, r26
     d4a:	bb 1f       	adc	r27, r27
     d4c:	9c 01       	movw	r18, r24
     d4e:	ad 01       	movw	r20, r26
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	92 e1       	ldi	r25, 0x12	; 18
     d54:	aa e7       	ldi	r26, 0x7A	; 122
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	bc 01       	movw	r22, r24
     d5a:	cd 01       	movw	r24, r26
     d5c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__udivmodsi4>
     d60:	da 01       	movw	r26, r20
     d62:	c9 01       	movw	r24, r18
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
     d6a:	2c c0       	rjmp	.+88     	; 0xdc4 <UART_VidInit+0x24a>
	}
	else if (a_ptr->Mode == UART_Sync)
     d6c:	e9 81       	ldd	r30, Y+1	; 0x01
     d6e:	fa 81       	ldd	r31, Y+2	; 0x02
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	39 f5       	brne	.+78     	; 0xdc4 <UART_VidInit+0x24a>
	{
		a_BoudRate= ((float32_t)F_CPU/(2*a_BoudRate))-1;
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	cc 01       	movw	r24, r24
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
     d8c:	9b 01       	movw	r18, r22
     d8e:	ac 01       	movw	r20, r24
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	74 e2       	ldi	r23, 0x24	; 36
     d94:	84 ef       	ldi	r24, 0xF4	; 244
     d96:	9a e4       	ldi	r25, 0x4A	; 74
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	bc 01       	movw	r22, r24
     da2:	cd 01       	movw	r24, r26
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
	}
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL=a_BoudRate;
     dc4:	e9 e2       	ldi	r30, 0x29	; 41
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	80 83       	st	Z, r24
	UBRRH=(a_BoudRate>>8);
     dcc:	e0 e4       	ldi	r30, 0x40	; 64
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	89 2f       	mov	r24, r25
     dd6:	99 27       	eor	r25, r25
     dd8:	80 83       	st	Z, r24


	return E_UART_SUCCESS;
     dda:	1d 82       	std	Y+5, r1	; 0x05
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <UART_recieveByte>:
uint8_t UART_recieveByte(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(!(UCSRA & (1<<RXC)));
     df6:	eb e2       	ldi	r30, 0x2B	; 43
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 23       	and	r24, r24
     dfe:	dc f7       	brge	.-10     	; 0xdf6 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
     e00:	ec e2       	ldi	r30, 0x2C	; 44
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <UART_sendByte>:
 * @param [in]  a_Data      -  character to be send through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t UART_sendByte(const uint8_t a_Data)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01

	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR=a_Data;
     e18:	ec e2       	ldi	r30, 0x2C	; 44
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	80 83       	st	Z, r24
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(!(UCSRA & (1<<UDRE)));
     e20:	eb e2       	ldi	r30, 0x2B	; 43
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	80 72       	andi	r24, 0x20	; 32
     e2c:	90 70       	andi	r25, 0x00	; 0
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	b9 f3       	breq	.-18     	; 0xe20 <UART_sendByte+0x14>

	return E_UART_SUCCESS;
     e32:	80 e0       	ldi	r24, 0x00	; 0

}
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <UART_sendString>:
 * @param [in]  Str    -  pointer to string to send through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t  UART_sendString(const uint8_t *Str)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <UART_sendString+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <UART_sendString+0x8>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
	/* making sure an initialized pointer is sent to the function */

	if(NULL_PTR == Str)
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	19 f4       	brne	.+6      	; 0xe5a <UART_sendString+0x1e>
	{
		return E_UART_NULL_PTR;
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	8c 83       	std	Y+4, r24	; 0x04
     e58:	1c c0       	rjmp	.+56     	; 0xe92 <UART_sendString+0x56>
	}
	uint8_t i = 0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	0e c0       	rjmp	.+28     	; 0xe7a <UART_sendString+0x3e>
	/* keeps sending data until it finds an end of string character in the string */

	while(Str[i] != '\0')
	{
		/* Put data into Str, sends the data */
		UART_sendByte(Str[i]);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 81       	ld	r24, Z
     e70:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_sendByte>
		i++;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	89 83       	std	Y+1, r24	; 0x01
		return E_UART_NULL_PTR;
	}
	uint8_t i = 0;
	/* keeps sending data until it finds an end of string character in the string */

	while(Str[i] != '\0')
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	fc 01       	movw	r30, r24
     e86:	e2 0f       	add	r30, r18
     e88:	f3 1f       	adc	r31, r19
     e8a:	80 81       	ld	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	39 f7       	brne	.-50     	; 0xe5e <UART_sendString+0x22>
		/* Put data into Str, sends the data */
		UART_sendByte(Str[i]);
		i++;
	}
	/* return success status */
	return E_UART_SUCCESS;
     e90:	1c 82       	std	Y+4, r1	; 0x04
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <UART_receiveString>:
 * @param [out] Str    -  pointer to string to save the string through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t  UART_receiveString(uint8_t *Str)
{
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <UART_receiveString+0xa>
     eac:	00 d0       	rcall	.+0      	; 0xeae <UART_receiveString+0xc>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9b 83       	std	Y+3, r25	; 0x03
     eb4:	8a 83       	std	Y+2, r24	; 0x02

	/* making sure an initialized pointer is sent to the function */
	if(NULL_PTR == Str)
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	19 f4       	brne	.+6      	; 0xec4 <UART_receiveString+0x22>
	{
		return E_UART_NULL_PTR;
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	8c 83       	std	Y+4, r24	; 0x04
     ec2:	32 c0       	rjmp	.+100    	; 0xf28 <UART_receiveString+0x86>
	}
	uint8_t i = 0;
     ec4:	19 82       	std	Y+1, r1	; 0x01
	/* Wait for data to be received it */
	Str[i] = UART_recieveByte();
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	8c 01       	movw	r16, r24
     ed2:	02 0f       	add	r16, r18
     ed4:	13 1f       	adc	r17, r19
     ed6:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_recieveByte>
     eda:	f8 01       	movw	r30, r16
     edc:	80 83       	st	Z, r24
     ede:	0f c0       	rjmp	.+30     	; 0xefe <UART_receiveString+0x5c>
	while(Str[i] != NEW_LINE)
	{
		i++;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for data to be received it */
		Str[i] = UART_recieveByte();
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	9b 81       	ldd	r25, Y+3	; 0x03
     ef0:	8c 01       	movw	r16, r24
     ef2:	02 0f       	add	r16, r18
     ef4:	13 1f       	adc	r17, r19
     ef6:	0e 94 f7 06 	call	0xdee	; 0xdee <UART_recieveByte>
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
		return E_UART_NULL_PTR;
	}
	uint8_t i = 0;
	/* Wait for data to be received it */
	Str[i] = UART_recieveByte();
	while(Str[i] != NEW_LINE)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	9b 81       	ldd	r25, Y+3	; 0x03
     f08:	fc 01       	movw	r30, r24
     f0a:	e2 0f       	add	r30, r18
     f0c:	f3 1f       	adc	r31, r19
     f0e:	80 81       	ld	r24, Z
     f10:	8d 30       	cpi	r24, 0x0D	; 13
     f12:	31 f7       	brne	.-52     	; 0xee0 <UART_receiveString+0x3e>
	{
		i++;
		/* Wait for data to be received it */
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	9b 81       	ldd	r25, Y+3	; 0x03
     f1e:	fc 01       	movw	r30, r24
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	10 82       	st	Z, r1

	/* return success status */
	return E_UART_SUCCESS;
     f26:	1c 82       	std	Y+4, r1	; 0x04
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <DIO_setPortDirection>:
 */

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <DIO_setPortDirection+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <DIO_setPortDirection+0x8>
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	8a 83       	std	Y+2, r24	; 0x02
     f4c:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     f4e:	19 82       	std	Y+1, r1	; 0x01
	//Check for the ports if it is between 0 to 3
    switch (PortID)
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3d 83       	std	Y+5, r19	; 0x05
     f58:	2c 83       	std	Y+4, r18	; 0x04
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	d1 f0       	breq	.+52     	; 0xf98 <DIO_setPortDirection+0x5c>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <DIO_setPortDirection+0x3c>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	61 f0       	breq	.+24     	; 0xf8e <DIO_setPortDirection+0x52>
     f76:	1f c0       	rjmp	.+62     	; 0xfb6 <DIO_setPortDirection+0x7a>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	81 f0       	breq	.+32     	; 0xfa2 <DIO_setPortDirection+0x66>
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	81 f0       	breq	.+32     	; 0xfac <DIO_setPortDirection+0x70>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <DIO_setPortDirection+0x7a>
    {
    case PORTa :
        DDRA = PortDirection;
     f8e:	ea e3       	ldi	r30, 0x3A	; 58
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	80 83       	st	Z, r24
     f96:	11 c0       	rjmp	.+34     	; 0xfba <DIO_setPortDirection+0x7e>
        break;
    case PORTb :
        DDRB = PortDirection;
     f98:	e7 e3       	ldi	r30, 0x37	; 55
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	80 83       	st	Z, r24
     fa0:	0c c0       	rjmp	.+24     	; 0xfba <DIO_setPortDirection+0x7e>
        break;
    case PORTc :
        DDRC = PortDirection;
     fa2:	e4 e3       	ldi	r30, 0x34	; 52
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	80 83       	st	Z, r24
     faa:	07 c0       	rjmp	.+14     	; 0xfba <DIO_setPortDirection+0x7e>
        break;
    case PORTd :
        DDRD = PortDirection;
     fac:	e1 e3       	ldi	r30, 0x31	; 49
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	80 83       	st	Z, r24
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_setPortDirection+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPortDirection
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <DIO_setPinDirection>:

/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	28 97       	sbiw	r28, 0x08	; 8
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	6b 83       	std	Y+3, r22	; 0x03
     fe4:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
     fe6:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	88 30       	cpi	r24, 0x08	; 8
     fec:	08 f0       	brcs	.+2      	; 0xff0 <DIO_setPinDirection+0x24>
     fee:	f4 c0       	rjmp	.+488    	; 0x11d8 <DIO_setPinDirection+0x20c>
	{
		if (DIO_u8_OUTPUT==PinDirection)
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_setPinDirection+0x2c>
     ff6:	72 c0       	rjmp	.+228    	; 0x10dc <DIO_setPinDirection+0x110>
		{
			switch (PortID)
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	38 87       	std	Y+8, r19	; 0x08
    1000:	2f 83       	std	Y+7, r18	; 0x07
    1002:	8f 81       	ldd	r24, Y+7	; 0x07
    1004:	98 85       	ldd	r25, Y+8	; 0x08
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	49 f1       	breq	.+82     	; 0x105e <DIO_setPinDirection+0x92>
    100c:	2f 81       	ldd	r18, Y+7	; 0x07
    100e:	38 85       	ldd	r19, Y+8	; 0x08
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <DIO_setPinDirection+0x54>
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 85       	ldd	r25, Y+8	; 0x08
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	61 f0       	breq	.+24     	; 0x1036 <DIO_setPinDirection+0x6a>
    101e:	5b c0       	rjmp	.+182    	; 0x10d6 <DIO_setPinDirection+0x10a>
    1020:	2f 81       	ldd	r18, Y+7	; 0x07
    1022:	38 85       	ldd	r19, Y+8	; 0x08
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	71 f1       	breq	.+92     	; 0x1086 <DIO_setPinDirection+0xba>
    102a:	8f 81       	ldd	r24, Y+7	; 0x07
    102c:	98 85       	ldd	r25, Y+8	; 0x08
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	91 05       	cpc	r25, r1
    1032:	e9 f1       	breq	.+122    	; 0x10ae <DIO_setPinDirection+0xe2>
    1034:	50 c0       	rjmp	.+160    	; 0x10d6 <DIO_setPinDirection+0x10a>
			{
			case PORTa :
				SET_BIT(DDRA, PinNumber);
    1036:	aa e3       	ldi	r26, 0x3A	; 58
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ea e3       	ldi	r30, 0x3A	; 58
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_setPinDirection+0x88>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_setPinDirection+0x84>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	bf c0       	rjmp	.+382    	; 0x11dc <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				SET_BIT(DDRB, PinNumber);
    105e:	a7 e3       	ldi	r26, 0x37	; 55
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e3       	ldi	r30, 0x37	; 55
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_setPinDirection+0xb0>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_setPinDirection+0xac>
    1080:	84 2b       	or	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	ab c0       	rjmp	.+342    	; 0x11dc <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				SET_BIT(DDRC, PinNumber);
    1086:	a4 e3       	ldi	r26, 0x34	; 52
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e4 e3       	ldi	r30, 0x34	; 52
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_setPinDirection+0xd8>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_setPinDirection+0xd4>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	97 c0       	rjmp	.+302    	; 0x11dc <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				SET_BIT(DDRD, PinNumber);
    10ae:	a1 e3       	ldi	r26, 0x31	; 49
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e1 e3       	ldi	r30, 0x31	; 49
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_setPinDirection+0x100>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_setPinDirection+0xfc>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	83 c0       	rjmp	.+262    	; 0x11dc <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	80 c0       	rjmp	.+256    	; 0x11dc <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT

		else if (DIO_u8_INPUT == PinDirection)
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	88 23       	and	r24, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <DIO_setPinDirection+0x118>
    10e2:	77 c0       	rjmp	.+238    	; 0x11d2 <DIO_setPinDirection+0x206>
		{
			switch (PortID)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3e 83       	std	Y+6, r19	; 0x06
    10ec:	2d 83       	std	Y+5, r18	; 0x05
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	59 f1       	breq	.+86     	; 0x114e <DIO_setPinDirection+0x182>
    10f8:	2d 81       	ldd	r18, Y+5	; 0x05
    10fa:	3e 81       	ldd	r19, Y+6	; 0x06
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_setPinDirection+0x140>
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f0       	breq	.+26     	; 0x1124 <DIO_setPinDirection+0x158>
    110a:	60 c0       	rjmp	.+192    	; 0x11cc <DIO_setPinDirection+0x200>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	89 f1       	breq	.+98     	; 0x1178 <DIO_setPinDirection+0x1ac>
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_setPinDirection+0x156>
    1120:	40 c0       	rjmp	.+128    	; 0x11a2 <DIO_setPinDirection+0x1d6>
    1122:	54 c0       	rjmp	.+168    	; 0x11cc <DIO_setPinDirection+0x200>
			{
			case PORTa :
				CLEAR_BIT(DDRA, PinNumber);
    1124:	aa e3       	ldi	r26, 0x3A	; 58
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ea e3       	ldi	r30, 0x3A	; 58
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_setPinDirection+0x176>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_setPinDirection+0x172>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	47 c0       	rjmp	.+142    	; 0x11dc <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				CLEAR_BIT(DDRB, PinNumber);
    114e:	a7 e3       	ldi	r26, 0x37	; 55
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e7 e3       	ldi	r30, 0x37	; 55
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_setPinDirection+0x1a0>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_setPinDirection+0x19c>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	32 c0       	rjmp	.+100    	; 0x11dc <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				CLEAR_BIT(DDRC, PinNumber);
    1178:	a4 e3       	ldi	r26, 0x34	; 52
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e4 e3       	ldi	r30, 0x34	; 52
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_setPinDirection+0x1ca>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_setPinDirection+0x1c6>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				CLEAR_BIT(DDRD, PinNumber);
    11a2:	a1 e3       	ldi	r26, 0x31	; 49
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e1 e3       	ldi	r30, 0x31	; 49
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_setPinDirection+0x1f4>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_setPinDirection+0x1f0>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of ELSE IF that check for the direction if it is INPUT
		else
		{
			u8_ERROR_STAT = ERROR_NOK;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_setPinDirection+0x210>
		} //END OF ELSE
	}	  //END of IF That checking the port and pin number
	else
	{
		u8_ERROR_STAT = ERROR_NOK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01

	}	  //END of ELSE
	return u8_ERROR_STAT;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPinDirection
    11de:	28 96       	adiw	r28, 0x08	; 8
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_writePortValue>:

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_writePortValue+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_writePortValue+0x8>
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1202:	19 82       	std	Y+1, r1	; 0x01
    switch (PortID)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3d 83       	std	Y+5, r19	; 0x05
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	d1 f0       	breq	.+52     	; 0x124c <DIO_writePortValue+0x5c>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <DIO_writePortValue+0x3c>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 f0       	breq	.+24     	; 0x1242 <DIO_writePortValue+0x52>
    122a:	1f c0       	rjmp	.+62     	; 0x126a <DIO_writePortValue+0x7a>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	81 f0       	breq	.+32     	; 0x1256 <DIO_writePortValue+0x66>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	81 f0       	breq	.+32     	; 0x1260 <DIO_writePortValue+0x70>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <DIO_writePortValue+0x7a>
    {
    case PORTa :
        PORTA = PortValue;
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	80 83       	st	Z, r24
    124a:	11 c0       	rjmp	.+34     	; 0x126e <DIO_writePortValue+0x7e>
        break;
    case PORTb :
        PORTB = PortValue;
    124c:	e8 e3       	ldi	r30, 0x38	; 56
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	80 83       	st	Z, r24
    1254:	0c c0       	rjmp	.+24     	; 0x126e <DIO_writePortValue+0x7e>
        break;
    case PORTc :
        PORTC = PortValue;
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	80 83       	st	Z, r24
    125e:	07 c0       	rjmp	.+14     	; 0x126e <DIO_writePortValue+0x7e>
        break;
    case PORTd :
        PORTD = PortValue;
    1260:	e2 e3       	ldi	r30, 0x32	; 50
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	80 83       	st	Z, r24
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_writePortValue+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_writePortValue
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_writePinValue>:

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	28 97       	sbiw	r28, 0x08	; 8
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	6b 83       	std	Y+3, r22	; 0x03
    1298:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    129a:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
	if ( (PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 30       	cpi	r24, 0x08	; 8
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <DIO_writePinValue+0x24>
    12a2:	f4 c0       	rjmp	.+488    	; 0x148c <DIO_writePinValue+0x20c>
	{
		if (DIO_u8_HIGH==PinDirection)
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_writePinValue+0x2c>
    12aa:	72 c0       	rjmp	.+228    	; 0x1390 <DIO_writePinValue+0x110>
		{
			switch (PortID)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	38 87       	std	Y+8, r19	; 0x08
    12b4:	2f 83       	std	Y+7, r18	; 0x07
    12b6:	8f 81       	ldd	r24, Y+7	; 0x07
    12b8:	98 85       	ldd	r25, Y+8	; 0x08
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	49 f1       	breq	.+82     	; 0x1312 <DIO_writePinValue+0x92>
    12c0:	2f 81       	ldd	r18, Y+7	; 0x07
    12c2:	38 85       	ldd	r19, Y+8	; 0x08
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <DIO_writePinValue+0x54>
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	98 85       	ldd	r25, Y+8	; 0x08
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	61 f0       	breq	.+24     	; 0x12ea <DIO_writePinValue+0x6a>
    12d2:	5b c0       	rjmp	.+182    	; 0x138a <DIO_writePinValue+0x10a>
    12d4:	2f 81       	ldd	r18, Y+7	; 0x07
    12d6:	38 85       	ldd	r19, Y+8	; 0x08
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	71 f1       	breq	.+92     	; 0x133a <DIO_writePinValue+0xba>
    12de:	8f 81       	ldd	r24, Y+7	; 0x07
    12e0:	98 85       	ldd	r25, Y+8	; 0x08
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	e9 f1       	breq	.+122    	; 0x1362 <DIO_writePinValue+0xe2>
    12e8:	50 c0       	rjmp	.+160    	; 0x138a <DIO_writePinValue+0x10a>
			{
			case PORTa :
				SET_BIT(PORTA, PinNumber);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_writePinValue+0x88>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_writePinValue+0x84>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	bf c0       	rjmp	.+382    	; 0x1490 <DIO_writePinValue+0x210>
				break;
			case PORTb :
				SET_BIT(PORTB, PinNumber);
    1312:	a8 e3       	ldi	r26, 0x38	; 56
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_writePinValue+0xb0>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_writePinValue+0xac>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	ab c0       	rjmp	.+342    	; 0x1490 <DIO_writePinValue+0x210>
				break;
			case PORTc :
				SET_BIT(PORTC, PinNumber);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_writePinValue+0xd8>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_writePinValue+0xd4>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	97 c0       	rjmp	.+302    	; 0x1490 <DIO_writePinValue+0x210>
				break;
			case PORTd :
				SET_BIT(PORTD, PinNumber);
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_writePinValue+0x100>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_writePinValue+0xfc>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	83 c0       	rjmp	.+262    	; 0x1490 <DIO_writePinValue+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	80 c0       	rjmp	.+256    	; 0x1490 <DIO_writePinValue+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT
		else if (DIO_u8_LOW==PinDirection)
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	88 23       	and	r24, r24
    1394:	09 f0       	breq	.+2      	; 0x1398 <DIO_writePinValue+0x118>
    1396:	77 c0       	rjmp	.+238    	; 0x1486 <DIO_writePinValue+0x206>
		{
			switch (PortID)
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3e 83       	std	Y+6, r19	; 0x06
    13a0:	2d 83       	std	Y+5, r18	; 0x05
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	59 f1       	breq	.+86     	; 0x1402 <DIO_writePinValue+0x182>
    13ac:	2d 81       	ldd	r18, Y+5	; 0x05
    13ae:	3e 81       	ldd	r19, Y+6	; 0x06
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <DIO_writePinValue+0x140>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <DIO_writePinValue+0x158>
    13be:	60 c0       	rjmp	.+192    	; 0x1480 <DIO_writePinValue+0x200>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	89 f1       	breq	.+98     	; 0x142c <DIO_writePinValue+0x1ac>
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <DIO_writePinValue+0x156>
    13d4:	40 c0       	rjmp	.+128    	; 0x1456 <DIO_writePinValue+0x1d6>
    13d6:	54 c0       	rjmp	.+168    	; 0x1480 <DIO_writePinValue+0x200>
			{
			case PORTa :
				CLEAR_BIT(PORTA, PinNumber);
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_writePinValue+0x176>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_writePinValue+0x172>
    13fa:	80 95       	com	r24
    13fc:	84 23       	and	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	47 c0       	rjmp	.+142    	; 0x1490 <DIO_writePinValue+0x210>
				break;
			case PORTb :
				CLEAR_BIT(PORTB, PinNumber);
    1402:	a8 e3       	ldi	r26, 0x38	; 56
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_writePinValue+0x1a0>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_writePinValue+0x19c>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	32 c0       	rjmp	.+100    	; 0x1490 <DIO_writePinValue+0x210>
				break;
			case PORTc :
				CLEAR_BIT(PORTC, PinNumber);
    142c:	a5 e3       	ldi	r26, 0x35	; 53
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e3       	ldi	r30, 0x35	; 53
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_writePinValue+0x1ca>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_writePinValue+0x1c6>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	1d c0       	rjmp	.+58     	; 0x1490 <DIO_writePinValue+0x210>
				break;
			case PORTd :
				CLEAR_BIT(PORTD, PinNumber);
    1456:	a2 e3       	ldi	r26, 0x32	; 50
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_writePinValue+0x1f4>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_writePinValue+0x1f0>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <DIO_writePinValue+0x210>
				break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <DIO_writePinValue+0x210>
			} //END of SWITCH
		} // END OF ELSE IF
		else
        {
            /*INVALID PIN DIRECTION*/
			u8_ERROR_STAT = ERROR_NOK;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_writePinValue+0x210>
		} //END OF ELSE
	}	  //END OF IF
	else
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
	}	  //END of ELSE
	return u8_ERROR_STAT ;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_writePinValue
    1492:	28 96       	adiw	r28, 0x08	; 8
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_readPort>:

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_readPort+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <DIO_readPort+0x8>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <DIO_readPort+0xa>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	7c 83       	std	Y+4, r23	; 0x04
    14b6:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    14b8:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <DIO_readPort+0x24>
    {
        u8_ERROR_STAT = ERROR_NOK;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	3d c0       	rjmp	.+122    	; 0x1542 <DIO_readPort+0x9e>
	}
	else
	{
    switch (PortID)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3e 83       	std	Y+6, r19	; 0x06
    14d0:	2d 83       	std	Y+5, r18	; 0x05
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	e1 f0       	breq	.+56     	; 0x1514 <DIO_readPort+0x70>
    14dc:	2d 81       	ldd	r18, Y+5	; 0x05
    14de:	3e 81       	ldd	r19, Y+6	; 0x06
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <DIO_readPort+0x4c>
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	61 f0       	breq	.+24     	; 0x1506 <DIO_readPort+0x62>
    14ee:	27 c0       	rjmp	.+78     	; 0x153e <DIO_readPort+0x9a>
    14f0:	2d 81       	ldd	r18, Y+5	; 0x05
    14f2:	3e 81       	ldd	r19, Y+6	; 0x06
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	a1 f0       	breq	.+40     	; 0x1522 <DIO_readPort+0x7e>
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	b1 f0       	breq	.+44     	; 0x1530 <DIO_readPort+0x8c>
    1504:	1c c0       	rjmp	.+56     	; 0x153e <DIO_readPort+0x9a>
    {
    case PORTa :
        *(PortState) = PINA;
    1506:	e9 e3       	ldi	r30, 0x39	; 57
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	eb 81       	ldd	r30, Y+3	; 0x03
    150e:	fc 81       	ldd	r31, Y+4	; 0x04
    1510:	80 83       	st	Z, r24
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <DIO_readPort+0x9e>
        break;
    case PORTb :
        *(PortState) = PINB;
    1514:	e6 e3       	ldi	r30, 0x36	; 54
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	80 83       	st	Z, r24
    1520:	10 c0       	rjmp	.+32     	; 0x1542 <DIO_readPort+0x9e>
        break;
    case PORTc :
        *(PortState) = PINC;
    1522:	e3 e3       	ldi	r30, 0x33	; 51
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	80 83       	st	Z, r24
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <DIO_readPort+0x9e>
        break;
    case PORTd :
        *(PortState) = PIND;
    1530:	e0 e3       	ldi	r30, 0x30	; 48
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	eb 81       	ldd	r30, Y+3	; 0x03
    1538:	fc 81       	ldd	r31, Y+4	; 0x04
    153a:	80 83       	st	Z, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_readPort+0x9e>
        break;
    default:
            /*INVALID PORT NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	89 83       	std	Y+1, r24	; 0x01
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_readPort
    1544:	26 96       	adiw	r28, 0x06	; 6
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <DIO_readPin>:

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	27 97       	sbiw	r28, 0x07	; 7
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	8a 83       	std	Y+2, r24	; 0x02
    156c:	6b 83       	std	Y+3, r22	; 0x03
    156e:	5d 83       	std	Y+5, r21	; 0x05
    1570:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1572:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	19 f4       	brne	.+6      	; 0x1582 <DIO_readPin+0x2c>
    {
        u8_ERROR_STAT = ERROR_NOK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	7a c0       	rjmp	.+244    	; 0x1676 <DIO_readPin+0x120>
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 30       	cpi	r24, 0x08	; 8
    1586:	08 f0       	brcs	.+2      	; 0x158a <DIO_readPin+0x34>
    1588:	74 c0       	rjmp	.+232    	; 0x1672 <DIO_readPin+0x11c>
        {
            switch (PortID)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3f 83       	std	Y+7, r19	; 0x07
    1592:	2e 83       	std	Y+6, r18	; 0x06
    1594:	4e 81       	ldd	r20, Y+6	; 0x06
    1596:	5f 81       	ldd	r21, Y+7	; 0x07
    1598:	41 30       	cpi	r20, 0x01	; 1
    159a:	51 05       	cpc	r21, r1
    159c:	59 f1       	breq	.+86     	; 0x15f4 <DIO_readPin+0x9e>
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	34 f4       	brge	.+12     	; 0x15b4 <DIO_readPin+0x5e>
    15a8:	2e 81       	ldd	r18, Y+6	; 0x06
    15aa:	3f 81       	ldd	r19, Y+7	; 0x07
    15ac:	21 15       	cp	r18, r1
    15ae:	31 05       	cpc	r19, r1
    15b0:	69 f0       	breq	.+26     	; 0x15cc <DIO_readPin+0x76>
    15b2:	5c c0       	rjmp	.+184    	; 0x166c <DIO_readPin+0x116>
    15b4:	4e 81       	ldd	r20, Y+6	; 0x06
    15b6:	5f 81       	ldd	r21, Y+7	; 0x07
    15b8:	42 30       	cpi	r20, 0x02	; 2
    15ba:	51 05       	cpc	r21, r1
    15bc:	79 f1       	breq	.+94     	; 0x161c <DIO_readPin+0xc6>
    15be:	8e 81       	ldd	r24, Y+6	; 0x06
    15c0:	9f 81       	ldd	r25, Y+7	; 0x07
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <DIO_readPin+0x74>
    15c8:	3d c0       	rjmp	.+122    	; 0x1644 <DIO_readPin+0xee>
    15ca:	50 c0       	rjmp	.+160    	; 0x166c <DIO_readPin+0x116>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
    15cc:	e9 e3       	ldi	r30, 0x39	; 57
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_readPin+0x8e>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_readPin+0x8a>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	ec 81       	ldd	r30, Y+4	; 0x04
    15ee:	fd 81       	ldd	r31, Y+5	; 0x05
    15f0:	80 83       	st	Z, r24
    15f2:	41 c0       	rjmp	.+130    	; 0x1676 <DIO_readPin+0x120>
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
    15f4:	e6 e3       	ldi	r30, 0x36	; 54
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_readPin+0xb6>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_readPin+0xb2>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	ec 81       	ldd	r30, Y+4	; 0x04
    1616:	fd 81       	ldd	r31, Y+5	; 0x05
    1618:	80 83       	st	Z, r24
    161a:	2d c0       	rjmp	.+90     	; 0x1676 <DIO_readPin+0x120>
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
    161c:	e3 e3       	ldi	r30, 0x33	; 51
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_readPin+0xde>
    1630:	55 95       	asr	r21
    1632:	47 95       	ror	r20
    1634:	8a 95       	dec	r24
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_readPin+0xda>
    1638:	ca 01       	movw	r24, r20
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	ec 81       	ldd	r30, Y+4	; 0x04
    163e:	fd 81       	ldd	r31, Y+5	; 0x05
    1640:	80 83       	st	Z, r24
    1642:	19 c0       	rjmp	.+50     	; 0x1676 <DIO_readPin+0x120>
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
    1644:	e0 e3       	ldi	r30, 0x30	; 48
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a9 01       	movw	r20, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_readPin+0x106>
    1658:	55 95       	asr	r21
    165a:	47 95       	ror	r20
    165c:	8a 95       	dec	r24
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_readPin+0x102>
    1660:	ca 01       	movw	r24, r20
    1662:	81 70       	andi	r24, 0x01	; 1
    1664:	ec 81       	ldd	r30, Y+4	; 0x04
    1666:	fd 81       	ldd	r31, Y+5	; 0x05
    1668:	80 83       	st	Z, r24
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <DIO_readPin+0x120>
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_readPin+0x120>
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}    //END of DIO_readPint
    1678:	27 96       	adiw	r28, 0x07	; 7
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <DIO_TogglePin>:
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <DIO_TogglePin+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_TogglePin+0x8>
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    169c:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <DIO_TogglePin+0x1c>
    16a4:	72 c0       	rjmp	.+228    	; 0x178a <DIO_TogglePin+0x100>
    {
        switch (PortID)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3d 83       	std	Y+5, r19	; 0x05
    16ae:	2c 83       	std	Y+4, r18	; 0x04
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	49 f1       	breq	.+82     	; 0x170c <DIO_TogglePin+0x82>
    16ba:	2c 81       	ldd	r18, Y+4	; 0x04
    16bc:	3d 81       	ldd	r19, Y+5	; 0x05
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	2c f4       	brge	.+10     	; 0x16ce <DIO_TogglePin+0x44>
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <DIO_TogglePin+0x5a>
    16cc:	5b c0       	rjmp	.+182    	; 0x1784 <DIO_TogglePin+0xfa>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	71 f1       	breq	.+92     	; 0x1734 <DIO_TogglePin+0xaa>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	e9 f1       	breq	.+122    	; 0x175c <DIO_TogglePin+0xd2>
    16e2:	50 c0       	rjmp	.+160    	; 0x1784 <DIO_TogglePin+0xfa>
        {
        case PORTa :
            TOGGLE_BIT(PORTA, PinNumber);
    16e4:	ab e3       	ldi	r26, 0x3B	; 59
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_TogglePin+0x78>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_TogglePin+0x74>
    1706:	84 27       	eor	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	41 c0       	rjmp	.+130    	; 0x178e <DIO_TogglePin+0x104>
            break;
        case PORTb :
            TOGGLE_BIT(PORTB, PinNumber);
    170c:	a8 e3       	ldi	r26, 0x38	; 56
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_TogglePin+0xa0>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_TogglePin+0x9c>
    172e:	84 27       	eor	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	2d c0       	rjmp	.+90     	; 0x178e <DIO_TogglePin+0x104>
            break;
        case PORTc :
            TOGGLE_BIT(PORTC, PinNumber);
    1734:	a5 e3       	ldi	r26, 0x35	; 53
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e3       	ldi	r30, 0x35	; 53
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_TogglePin+0xc8>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_TogglePin+0xc4>
    1756:	84 27       	eor	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	19 c0       	rjmp	.+50     	; 0x178e <DIO_TogglePin+0x104>
            break;
        case PORTd :
            TOGGLE_BIT(PORTD, PinNumber);
    175c:	a2 e3       	ldi	r26, 0x32	; 50
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e2 e3       	ldi	r30, 0x32	; 50
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_TogglePin+0xf0>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_TogglePin+0xec>
    177e:	84 27       	eor	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	05 c0       	rjmp	.+10     	; 0x178e <DIO_TogglePin+0x104>
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_TogglePin+0x104>
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    }	  //END of ELSE
    return u8_ERROR_STAT ;
    178e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <DIO_SetPullupRes>:
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <DIO_SetPullupRes+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_SetPullupRes+0x8>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	8a 83       	std	Y+2, r24	; 0x02
    17b0:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    17b2:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	88 30       	cpi	r24, 0x08	; 8
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <DIO_SetPullupRes+0x1c>
    17ba:	ce c0       	rjmp	.+412    	; 0x1958 <DIO_SetPullupRes+0x1b8>
    {
        switch (PortID)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3d 83       	std	Y+5, r19	; 0x05
    17c4:	2c 83       	std	Y+4, r18	; 0x04
    17c6:	4c 81       	ldd	r20, Y+4	; 0x04
    17c8:	5d 81       	ldd	r21, Y+5	; 0x05
    17ca:	41 30       	cpi	r20, 0x01	; 1
    17cc:	51 05       	cpc	r21, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <DIO_SetPullupRes+0x32>
    17d0:	42 c0       	rjmp	.+132    	; 0x1856 <DIO_SetPullupRes+0xb6>
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	91 05       	cpc	r25, r1
    17da:	34 f4       	brge	.+12     	; 0x17e8 <DIO_SetPullupRes+0x48>
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	21 15       	cp	r18, r1
    17e2:	31 05       	cpc	r19, r1
    17e4:	71 f0       	breq	.+28     	; 0x1802 <DIO_SetPullupRes+0x62>
    17e6:	b5 c0       	rjmp	.+362    	; 0x1952 <DIO_SetPullupRes+0x1b2>
    17e8:	4c 81       	ldd	r20, Y+4	; 0x04
    17ea:	5d 81       	ldd	r21, Y+5	; 0x05
    17ec:	42 30       	cpi	r20, 0x02	; 2
    17ee:	51 05       	cpc	r21, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <DIO_SetPullupRes+0x54>
    17f2:	5b c0       	rjmp	.+182    	; 0x18aa <DIO_SetPullupRes+0x10a>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <DIO_SetPullupRes+0x60>
    17fe:	7f c0       	rjmp	.+254    	; 0x18fe <DIO_SetPullupRes+0x15e>
    1800:	a8 c0       	rjmp	.+336    	; 0x1952 <DIO_SetPullupRes+0x1b2>
        {
        case PORTa :
            if(DIO_u8_INPUT==Get_Bit(DDRA, PinNumber))
    1802:	ea e3       	ldi	r30, 0x3A	; 58
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_SetPullupRes+0x7a>
    1816:	55 95       	asr	r21
    1818:	47 95       	ror	r20
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_SetPullupRes+0x76>
    181e:	ca 01       	movw	r24, r20
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	90 70       	andi	r25, 0x00	; 0
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	a1 f4       	brne	.+40     	; 0x1850 <DIO_SetPullupRes+0xb0>
            {
                SET_BIT(PORTA, PinNumber);
    1828:	ab e3       	ldi	r26, 0x3B	; 59
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	eb e3       	ldi	r30, 0x3B	; 59
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_SetPullupRes+0xa6>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_SetPullupRes+0xa2>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	86 c0       	rjmp	.+268    	; 0x195c <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	83 c0       	rjmp	.+262    	; 0x195c <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTb :
            if(DIO_u8_INPUT==Get_Bit(DDRB, PinNumber))
    1856:	e7 e3       	ldi	r30, 0x37	; 55
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a9 01       	movw	r20, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_SetPullupRes+0xce>
    186a:	55 95       	asr	r21
    186c:	47 95       	ror	r20
    186e:	8a 95       	dec	r24
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_SetPullupRes+0xca>
    1872:	ca 01       	movw	r24, r20
    1874:	81 70       	andi	r24, 0x01	; 1
    1876:	90 70       	andi	r25, 0x00	; 0
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	a1 f4       	brne	.+40     	; 0x18a4 <DIO_SetPullupRes+0x104>
            {
                SET_BIT(PORTB, PinNumber);
    187c:	a8 e3       	ldi	r26, 0x38	; 56
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e8 e3       	ldi	r30, 0x38	; 56
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_SetPullupRes+0xfa>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_SetPullupRes+0xf6>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	5c c0       	rjmp	.+184    	; 0x195c <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	59 c0       	rjmp	.+178    	; 0x195c <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTc :
            if(DIO_u8_INPUT==Get_Bit(DDRC, PinNumber))
    18aa:	e4 e3       	ldi	r30, 0x34	; 52
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a9 01       	movw	r20, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_SetPullupRes+0x122>
    18be:	55 95       	asr	r21
    18c0:	47 95       	ror	r20
    18c2:	8a 95       	dec	r24
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_SetPullupRes+0x11e>
    18c6:	ca 01       	movw	r24, r20
    18c8:	81 70       	andi	r24, 0x01	; 1
    18ca:	90 70       	andi	r25, 0x00	; 0
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	a1 f4       	brne	.+40     	; 0x18f8 <DIO_SetPullupRes+0x158>
            {
                SET_BIT(PORTC, PinNumber);
    18d0:	a5 e3       	ldi	r26, 0x35	; 53
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_SetPullupRes+0x14e>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_SetPullupRes+0x14a>
    18f2:	84 2b       	or	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	32 c0       	rjmp	.+100    	; 0x195c <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	2f c0       	rjmp	.+94     	; 0x195c <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTd :
            if(DIO_u8_INPUT==Get_Bit(DDRD, PinNumber))
    18fe:	e1 e3       	ldi	r30, 0x31	; 49
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a9 01       	movw	r20, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_SetPullupRes+0x176>
    1912:	55 95       	asr	r21
    1914:	47 95       	ror	r20
    1916:	8a 95       	dec	r24
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_SetPullupRes+0x172>
    191a:	ca 01       	movw	r24, r20
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	a1 f4       	brne	.+40     	; 0x194c <DIO_SetPullupRes+0x1ac>
            {
                SET_BIT(PORTD, PinNumber);
    1924:	a2 e3       	ldi	r26, 0x32	; 50
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e2 e3       	ldi	r30, 0x32	; 50
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_SetPullupRes+0x1a2>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_SetPullupRes+0x19e>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	08 c0       	rjmp	.+16     	; 0x195c <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	05 c0       	rjmp	.+10     	; 0x195c <DIO_SetPullupRes+0x1bc>
            }
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_SetPullupRes+0x1bc>
    }	  //END OF IF

    else
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
    } //END of ELSE
    return u8_ERROR_STAT ;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <LED_Init>:

#include "LED.h"
/*- APIs IMPLEMENTATION
-----------------------------------*/
ERROR_STATE_t LED_Init(uint8_t LED_ID)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <LED_Init+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <LED_Init+0x8>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    197c:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	3c 83       	std	Y+4, r19	; 0x04
    1986:	2b 83       	std	Y+3, r18	; 0x03
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	d9 f0       	breq	.+54     	; 0x19c8 <LED_Init+0x5a>
    1992:	2b 81       	ldd	r18, Y+3	; 0x03
    1994:	3c 81       	ldd	r19, Y+4	; 0x04
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	2c f4       	brge	.+10     	; 0x19a6 <LED_Init+0x38>
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	61 f0       	breq	.+24     	; 0x19bc <LED_Init+0x4e>
    19a4:	23 c0       	rjmp	.+70     	; 0x19ec <LED_Init+0x7e>
    19a6:	2b 81       	ldd	r18, Y+3	; 0x03
    19a8:	3c 81       	ldd	r19, Y+4	; 0x04
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	91 f0       	breq	.+36     	; 0x19d4 <LED_Init+0x66>
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	99 f0       	breq	.+38     	; 0x19e0 <LED_Init+0x72>
    19ba:	18 c0       	rjmp	.+48     	; 0x19ec <LED_Init+0x7e>
	{
	case LED0:
		DIO_setPinDirection(LED_PORT, LED_PIN4, DIO_u8_OUTPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	64 e0       	ldi	r22, 0x04	; 4
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_setPinDirection>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <LED_Init+0x82>
		break;
	case LED1:
		DIO_setPinDirection(LED_PORT, LED_PIN5, DIO_u8_OUTPUT);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	65 e0       	ldi	r22, 0x05	; 5
    19cc:	41 e0       	ldi	r20, 0x01	; 1
    19ce:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_setPinDirection>
    19d2:	0e c0       	rjmp	.+28     	; 0x19f0 <LED_Init+0x82>
		break;
	case LED2:
		DIO_setPinDirection(LED_PORT, LED_PIN6, DIO_u8_OUTPUT);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	66 e0       	ldi	r22, 0x06	; 6
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_setPinDirection>
    19de:	08 c0       	rjmp	.+16     	; 0x19f0 <LED_Init+0x82>
		break;
	case LED3:
		DIO_setPinDirection(LED_PORT, LED_PIN7, DIO_u8_OUTPUT);
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	67 e0       	ldi	r22, 0x07	; 7
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_setPinDirection>
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <LED_Init+0x82>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <LED_toggle>:
ERROR_STATE_t LED_toggle(uint8_t LED_ID)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <LED_toggle+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <LED_toggle+0x8>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1a0e:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3c 83       	std	Y+4, r19	; 0x04
    1a18:	2b 83       	std	Y+3, r18	; 0x03
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	d1 f0       	breq	.+52     	; 0x1a58 <LED_toggle+0x58>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <LED_toggle+0x38>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <LED_toggle+0x4e>
    1a36:	1f c0       	rjmp	.+62     	; 0x1a76 <LED_toggle+0x76>
    1a38:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	81 f0       	breq	.+32     	; 0x1a62 <LED_toggle+0x62>
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	81 f0       	breq	.+32     	; 0x1a6c <LED_toggle+0x6c>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LED_toggle+0x76>
	{
	case LED0:
		DIO_TogglePin(LED_PORT, LED_PIN4);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	64 e0       	ldi	r22, 0x04	; 4
    1a52:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_TogglePin>
    1a56:	11 c0       	rjmp	.+34     	; 0x1a7a <LED_toggle+0x7a>
		break;
	case LED1:
		DIO_TogglePin(LED_PORT, LED_PIN5);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	65 e0       	ldi	r22, 0x05	; 5
    1a5c:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_TogglePin>
    1a60:	0c c0       	rjmp	.+24     	; 0x1a7a <LED_toggle+0x7a>
		break;
	case LED2:
		DIO_TogglePin(LED_PORT, LED_PIN6);
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	66 e0       	ldi	r22, 0x06	; 6
    1a66:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_TogglePin>
    1a6a:	07 c0       	rjmp	.+14     	; 0x1a7a <LED_toggle+0x7a>
		break;
	case LED3:
		DIO_TogglePin(LED_PORT, LED_PIN7);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	67 e0       	ldi	r22, 0x07	; 7
    1a70:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_TogglePin>
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <LED_toggle+0x7a>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <LED_Open>:
ERROR_STATE_t LED_Open(uint8_t LED_ID)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <LED_Open+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <LED_Open+0x8>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1a98:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	3c 83       	std	Y+4, r19	; 0x04
    1aa2:	2b 83       	std	Y+3, r18	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	e9 f0       	breq	.+58     	; 0x1ae8 <LED_Open+0x5e>
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <LED_Open+0x38>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <LED_Open+0x4e>
    1ac0:	2b c0       	rjmp	.+86     	; 0x1b18 <LED_Open+0x8e>
    1ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	b1 f0       	breq	.+44     	; 0x1af8 <LED_Open+0x6e>
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	c9 f0       	breq	.+50     	; 0x1b08 <LED_Open+0x7e>
    1ad6:	20 c0       	rjmp	.+64     	; 0x1b18 <LED_Open+0x8e>
	{
	case LED0:
		SET_BIT(PORTB, LED_PIN4);
    1ad8:	a8 e3       	ldi	r26, 0x38	; 56
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e8 e3       	ldi	r30, 0x38	; 56
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 61       	ori	r24, 0x10	; 16
    1ae4:	8c 93       	st	X, r24
    1ae6:	1a c0       	rjmp	.+52     	; 0x1b1c <LED_Open+0x92>
		break;
	case LED1:
		SET_BIT(PORTB, LED_PIN5);
    1ae8:	a8 e3       	ldi	r26, 0x38	; 56
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e8 e3       	ldi	r30, 0x38	; 56
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 62       	ori	r24, 0x20	; 32
    1af4:	8c 93       	st	X, r24
    1af6:	12 c0       	rjmp	.+36     	; 0x1b1c <LED_Open+0x92>
		break;
	case LED2:
		SET_BIT(PORTB, LED_PIN6);
    1af8:	a8 e3       	ldi	r26, 0x38	; 56
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e8 e3       	ldi	r30, 0x38	; 56
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 64       	ori	r24, 0x40	; 64
    1b04:	8c 93       	st	X, r24
    1b06:	0a c0       	rjmp	.+20     	; 0x1b1c <LED_Open+0x92>
		break;
	case LED3:
		SET_BIT(PORTB, LED_PIN7);
    1b08:	a8 e3       	ldi	r26, 0x38	; 56
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	8c 93       	st	X, r24
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <LED_Open+0x92>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <LED_Close>:
ERROR_STATE_t LED_Close(uint8_t LED_ID)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <LED_Close+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <LED_Close+0x8>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_ID)
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3c 83       	std	Y+4, r19	; 0x04
    1b44:	2b 83       	std	Y+3, r18	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	e9 f0       	breq	.+58     	; 0x1b8a <LED_Close+0x5e>
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	3c 81       	ldd	r19, Y+4	; 0x04
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <LED_Close+0x38>
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <LED_Close+0x4e>
    1b62:	2b c0       	rjmp	.+86     	; 0x1bba <LED_Close+0x8e>
    1b64:	2b 81       	ldd	r18, Y+3	; 0x03
    1b66:	3c 81       	ldd	r19, Y+4	; 0x04
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	b1 f0       	breq	.+44     	; 0x1b9a <LED_Close+0x6e>
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	c9 f0       	breq	.+50     	; 0x1baa <LED_Close+0x7e>
    1b78:	20 c0       	rjmp	.+64     	; 0x1bba <LED_Close+0x8e>
	{
	case LED0:
		CLEAR_BIT(PORTB, LED_PIN4);
    1b7a:	a8 e3       	ldi	r26, 0x38	; 56
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e8 e3       	ldi	r30, 0x38	; 56
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7e       	andi	r24, 0xEF	; 239
    1b86:	8c 93       	st	X, r24
    1b88:	1a c0       	rjmp	.+52     	; 0x1bbe <LED_Close+0x92>
		break;
	case LED1:
		CLEAR_BIT(PORTB, LED_PIN5);
    1b8a:	a8 e3       	ldi	r26, 0x38	; 56
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e8 e3       	ldi	r30, 0x38	; 56
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8f 7d       	andi	r24, 0xDF	; 223
    1b96:	8c 93       	st	X, r24
    1b98:	12 c0       	rjmp	.+36     	; 0x1bbe <LED_Close+0x92>
		break;
	case LED2:
		CLEAR_BIT(PORTB, LED_PIN6);
    1b9a:	a8 e3       	ldi	r26, 0x38	; 56
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8f 7b       	andi	r24, 0xBF	; 191
    1ba6:	8c 93       	st	X, r24
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <LED_Close+0x92>
		break;
	case LED3:
		CLEAR_BIT(PORTB, LED_PIN7);
    1baa:	a8 e3       	ldi	r26, 0x38	; 56
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e8 e3       	ldi	r30, 0x38	; 56
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 77       	andi	r24, 0x7F	; 127
    1bb6:	8c 93       	st	X, r24
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <LED_Close+0x92>
		break;
	default:
		u8_ERROR_STAT = ERROR_NOK;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <LED_AllOpen>:

ERROR_STATE_t LED_AllOpen()
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1bd8:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(PORTB,LED_PIN4);
    1bda:	a8 e3       	ldi	r26, 0x38	; 56
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 61       	ori	r24, 0x10	; 16
    1be6:	8c 93       	st	X, r24
	SET_BIT(PORTB,LED_PIN5);
    1be8:	a8 e3       	ldi	r26, 0x38	; 56
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e8 e3       	ldi	r30, 0x38	; 56
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 62       	ori	r24, 0x20	; 32
    1bf4:	8c 93       	st	X, r24
	SET_BIT(PORTB,LED_PIN6);
    1bf6:	a8 e3       	ldi	r26, 0x38	; 56
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e8 e3       	ldi	r30, 0x38	; 56
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 64       	ori	r24, 0x40	; 64
    1c02:	8c 93       	st	X, r24
	SET_BIT(PORTB,LED_PIN7);
    1c04:	a8 e3       	ldi	r26, 0x38	; 56
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e3       	ldi	r30, 0x38	; 56
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	8c 93       	st	X, r24

	return u8_ERROR_STAT;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <LED_AllClose>:
ERROR_STATE_t LED_AllClose()
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	0f 92       	push	r0
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    1c26:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(PORTB,LED_PIN4);
    1c28:	a8 e3       	ldi	r26, 0x38	; 56
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8f 7e       	andi	r24, 0xEF	; 239
    1c34:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,LED_PIN5);
    1c36:	a8 e3       	ldi	r26, 0x38	; 56
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e8 e3       	ldi	r30, 0x38	; 56
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8f 7d       	andi	r24, 0xDF	; 223
    1c42:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,LED_PIN6);
    1c44:	a8 e3       	ldi	r26, 0x38	; 56
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7b       	andi	r24, 0xBF	; 191
    1c50:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,LED_PIN7);
    1c52:	a8 e3       	ldi	r26, 0x38	; 56
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e8 e3       	ldi	r30, 0x38	; 56
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8f 77       	andi	r24, 0x7F	; 127
    1c5e:	8c 93       	st	X, r24

	return u8_ERROR_STAT;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <AppInit>:




void AppInit(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <AppInit+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <AppInit+0x8>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	UART_Config config={UART_1StopBit,UART_8Bit,UART_AsyncDouble,UART_Disable};
    1c76:	19 82       	std	Y+1, r1	; 0x01
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
    1c80:	1c 82       	std	Y+4, r1	; 0x04
	UART_VidInit(&config,9600); // initialize UART driver
    1c82:	ce 01       	movw	r24, r28
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	60 e8       	ldi	r22, 0x80	; 128
    1c88:	75 e2       	ldi	r23, 0x25	; 37
    1c8a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <UART_VidInit>
	LED_Init(LED0);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED_Init>
	LED_Init(LED1);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED_Init>
	LED_Init(LED2);
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED_Init>

}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <AppUpdate>:
void AppUpdate(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <AppUpdate+0x6>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(gu8_ReceiverBuffer);
    1cb8:	84 eb       	ldi	r24, 0xB4	; 180
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	0e 94 51 07 	call	0xea2	; 0xea2 <UART_receiveString>

	if (strcmp(gu8_ReceiverBuffer,"START")==0)
    1cc0:	84 eb       	ldi	r24, 0xB4	; 180
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	20 e6       	ldi	r18, 0x60	; 96
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	b9 01       	movw	r22, r18
    1cca:	0e 94 77 0f 	call	0x1eee	; 0x1eee <strcmp>
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	19 f4       	brne	.+6      	; 0x1cd8 <AppUpdate+0x2a>
	{
		State=GREEN;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	80 93 bb 01 	sts	0x01BB, r24
	}
	if (strcmp(gu8_ReceiverBuffer,"STOP")==0)
    1cd8:	84 eb       	ldi	r24, 0xB4	; 180
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	26 e6       	ldi	r18, 0x66	; 102
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <strcmp>
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <AppUpdate+0x42>
	{
		State=RED;
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	80 93 bb 01 	sts	0x01BB, r24
	}

	if (strcmp(gu8_ReceiverBuffer,"WAIT")==0)
    1cf0:	84 eb       	ldi	r24, 0xB4	; 180
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	2b e6       	ldi	r18, 0x6B	; 107
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	b9 01       	movw	r22, r18
    1cfa:	0e 94 77 0f 	call	0x1eee	; 0x1eee <strcmp>
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	19 f4       	brne	.+6      	; 0x1d08 <AppUpdate+0x5a>
	{
		State=YELLOW;
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	80 93 bb 01 	sts	0x01BB, r24
	}
	if (strcmp(gu8_ReceiverBuffer,"AT")==0)
    1d08:	84 eb       	ldi	r24, 0xB4	; 180
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	20 e7       	ldi	r18, 0x70	; 112
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	b9 01       	movw	r22, r18
    1d12:	0e 94 77 0f 	call	0x1eee	; 0x1eee <strcmp>
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <AppUpdate+0x72>
	{
		State=AT;
    1d1a:	84 e0       	ldi	r24, 0x04	; 4
    1d1c:	80 93 bb 01 	sts	0x01BB, r24
	}

	switch (State)
    1d20:	80 91 bb 01 	lds	r24, 0x01BB
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3a 83       	std	Y+2, r19	; 0x02
    1d2a:	29 83       	std	Y+1, r18	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	91 05       	cpc	r25, r1
    1d34:	29 f1       	breq	.+74     	; 0x1d80 <AppUpdate+0xd2>
    1d36:	29 81       	ldd	r18, Y+1	; 0x01
    1d38:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3a:	23 30       	cpi	r18, 0x03	; 3
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	34 f4       	brge	.+12     	; 0x1d4c <AppUpdate+0x9e>
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	61 f0       	breq	.+24     	; 0x1d62 <AppUpdate+0xb4>
    1d4a:	44 c0       	rjmp	.+136    	; 0x1dd4 <AppUpdate+0x126>
    1d4c:	29 81       	ldd	r18, Y+1	; 0x01
    1d4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d50:	23 30       	cpi	r18, 0x03	; 3
    1d52:	31 05       	cpc	r19, r1
    1d54:	21 f1       	breq	.+72     	; 0x1d9e <AppUpdate+0xf0>
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	71 f1       	breq	.+92     	; 0x1dbc <AppUpdate+0x10e>
    1d60:	39 c0       	rjmp	.+114    	; 0x1dd4 <AppUpdate+0x126>
	{
	case GREEN:
		LED_AllClose();
    1d62:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LED_AllClose>
		LED_Open(LED0);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LED_Open>
		UART_sendString("Green LED is on");
    1d6c:	83 e7       	ldi	r24, 0x73	; 115
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 1e 07 	call	0xe3c	; 0xe3c <UART_sendString>
		UART_sendByte(NEW_LINE);
    1d74:	8d e0       	ldi	r24, 0x0D	; 13
    1d76:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_sendByte>
		State = 0;
    1d7a:	10 92 bb 01 	sts	0x01BB, r1
    1d7e:	33 c0       	rjmp	.+102    	; 0x1de6 <AppUpdate+0x138>
		break;
	case YELLOW:
		LED_AllClose();
    1d80:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LED_AllClose>
		LED_Open(LED1);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LED_Open>
		UART_sendString("Yellow LED is on");
    1d8a:	83 e8       	ldi	r24, 0x83	; 131
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <UART_sendString>
		UART_sendByte(NEW_LINE);
    1d92:	8d e0       	ldi	r24, 0x0D	; 13
    1d94:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_sendByte>
		State = 0 ;
    1d98:	10 92 bb 01 	sts	0x01BB, r1
    1d9c:	24 c0       	rjmp	.+72     	; 0x1de6 <AppUpdate+0x138>
		break;
	case RED:
		LED_AllClose();
    1d9e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LED_AllClose>
		LED_Open(LED2);
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LED_Open>
		UART_sendString("Red LED is on");
    1da8:	84 e9       	ldi	r24, 0x94	; 148
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 1e 07 	call	0xe3c	; 0xe3c <UART_sendString>
		UART_sendByte(NEW_LINE);
    1db0:	8d e0       	ldi	r24, 0x0D	; 13
    1db2:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_sendByte>
		State = 0;
    1db6:	10 92 bb 01 	sts	0x01BB, r1
    1dba:	15 c0       	rjmp	.+42     	; 0x1de6 <AppUpdate+0x138>
		break;
	case AT:
		LED_AllClose();
    1dbc:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LED_AllClose>
		UART_sendString("OK");
    1dc0:	82 ea       	ldi	r24, 0xA2	; 162
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <UART_sendString>
		UART_sendByte(NEW_LINE);
    1dc8:	8d e0       	ldi	r24, 0x0D	; 13
    1dca:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_sendByte>
		State = 0;
    1dce:	10 92 bb 01 	sts	0x01BB, r1
    1dd2:	09 c0       	rjmp	.+18     	; 0x1de6 <AppUpdate+0x138>
		break;
	default:
		UART_sendString("Error");
    1dd4:	85 ea       	ldi	r24, 0xA5	; 165
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <UART_sendString>
		UART_sendByte(NEW_LINE);
    1ddc:	8d e0       	ldi	r24, 0x0D	; 13
    1dde:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_sendByte>
		State = 0;
    1de2:	10 92 bb 01 	sts	0x01BB, r1
		break;
	}
	APP_ClearBuffer();
    1de6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <APP_ClearBuffer>

}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <APP_ClearBuffer>:


void APP_ClearBuffer(void)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
	for(Counter = 0 ;Counter<6  ; Counter++)
    1dfc:	10 92 ba 01 	sts	0x01BA, r1
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <APP_ClearBuffer+0x28>
	{
		gu8_ReceiverBuffer[Counter] = 0;
    1e02:	80 91 ba 01 	lds	r24, 0x01BA
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	ec 54       	subi	r30, 0x4C	; 76
    1e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e10:	10 82       	st	Z, r1
}


void APP_ClearBuffer(void)
{
	for(Counter = 0 ;Counter<6  ; Counter++)
    1e12:	80 91 ba 01 	lds	r24, 0x01BA
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	80 93 ba 01 	sts	0x01BA, r24
    1e1c:	80 91 ba 01 	lds	r24, 0x01BA
    1e20:	86 30       	cpi	r24, 0x06	; 6
    1e22:	78 f3       	brcs	.-34     	; 0x1e02 <APP_ClearBuffer+0xe>
	{
		gu8_ReceiverBuffer[Counter] = 0;
	}

}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <main>:
 */

#include"APP.h"

int main()
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
	AppInit();
    1e32:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <AppInit>
	while(1)
	{
		AppUpdate();
    1e36:	0e 94 57 0e 	call	0x1cae	; 0x1cae <AppUpdate>
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <main+0xc>

00001e3c <__udivmodsi4>:
    1e3c:	a1 e2       	ldi	r26, 0x21	; 33
    1e3e:	1a 2e       	mov	r1, r26
    1e40:	aa 1b       	sub	r26, r26
    1e42:	bb 1b       	sub	r27, r27
    1e44:	fd 01       	movw	r30, r26
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <__udivmodsi4_ep>

00001e48 <__udivmodsi4_loop>:
    1e48:	aa 1f       	adc	r26, r26
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	ee 1f       	adc	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	a2 17       	cp	r26, r18
    1e52:	b3 07       	cpc	r27, r19
    1e54:	e4 07       	cpc	r30, r20
    1e56:	f5 07       	cpc	r31, r21
    1e58:	20 f0       	brcs	.+8      	; 0x1e62 <__udivmodsi4_ep>
    1e5a:	a2 1b       	sub	r26, r18
    1e5c:	b3 0b       	sbc	r27, r19
    1e5e:	e4 0b       	sbc	r30, r20
    1e60:	f5 0b       	sbc	r31, r21

00001e62 <__udivmodsi4_ep>:
    1e62:	66 1f       	adc	r22, r22
    1e64:	77 1f       	adc	r23, r23
    1e66:	88 1f       	adc	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	1a 94       	dec	r1
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <__udivmodsi4_loop>
    1e6e:	60 95       	com	r22
    1e70:	70 95       	com	r23
    1e72:	80 95       	com	r24
    1e74:	90 95       	com	r25
    1e76:	9b 01       	movw	r18, r22
    1e78:	ac 01       	movw	r20, r24
    1e7a:	bd 01       	movw	r22, r26
    1e7c:	cf 01       	movw	r24, r30
    1e7e:	08 95       	ret

00001e80 <__prologue_saves__>:
    1e80:	2f 92       	push	r2
    1e82:	3f 92       	push	r3
    1e84:	4f 92       	push	r4
    1e86:	5f 92       	push	r5
    1e88:	6f 92       	push	r6
    1e8a:	7f 92       	push	r7
    1e8c:	8f 92       	push	r8
    1e8e:	9f 92       	push	r9
    1e90:	af 92       	push	r10
    1e92:	bf 92       	push	r11
    1e94:	cf 92       	push	r12
    1e96:	df 92       	push	r13
    1e98:	ef 92       	push	r14
    1e9a:	ff 92       	push	r15
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	ca 1b       	sub	r28, r26
    1eaa:	db 0b       	sbc	r29, r27
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	09 94       	ijmp

00001eb8 <__epilogue_restores__>:
    1eb8:	2a 88       	ldd	r2, Y+18	; 0x12
    1eba:	39 88       	ldd	r3, Y+17	; 0x11
    1ebc:	48 88       	ldd	r4, Y+16	; 0x10
    1ebe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ec0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ec2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ec4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ec6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eca:	b9 84       	ldd	r11, Y+9	; 0x09
    1ecc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ece:	df 80       	ldd	r13, Y+7	; 0x07
    1ed0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ed2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ed4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ed6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ed8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eda:	b9 81       	ldd	r27, Y+1	; 0x01
    1edc:	ce 0f       	add	r28, r30
    1ede:	d1 1d       	adc	r29, r1
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	ed 01       	movw	r28, r26
    1eec:	08 95       	ret

00001eee <strcmp>:
    1eee:	fb 01       	movw	r30, r22
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	8d 91       	ld	r24, X+
    1ef4:	01 90       	ld	r0, Z+
    1ef6:	80 19       	sub	r24, r0
    1ef8:	01 10       	cpse	r0, r1
    1efa:	d9 f3       	breq	.-10     	; 0x1ef2 <strcmp+0x4>
    1efc:	99 0b       	sbc	r25, r25
    1efe:	08 95       	ret

00001f00 <_exit>:
    1f00:	f8 94       	cli

00001f02 <__stop_program>:
    1f02:	ff cf       	rjmp	.-2      	; 0x1f02 <__stop_program>
