
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000d22  2**0
                  ALLOC
  2 .stab         000012b4  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cac  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 06 	call	0xc94	; 0xc94 <main>
  74:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_initMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_initMaster(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PIN4);
  84:	a7 e3       	ldi	r26, 0x37	; 55
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e3       	ldi	r30, 0x37	; 55
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PIN5);
  92:	a7 e3       	ldi	r26, 0x37	; 55
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PIN6);
  a0:	a7 e3       	ldi	r26, 0x37	; 55
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e3       	ldi	r30, 0x37	; 55
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 7b       	andi	r24, 0xBF	; 191
  ac:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PIN7);
  ae:	a7 e3       	ldi	r26, 0x37	; 55
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e7 e3       	ldi	r30, 0x37	; 55
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8c 93       	st	X, r24

	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
  bc:	ed e2       	ldi	r30, 0x2D	; 45
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e5       	ldi	r24, 0x50	; 80
  c2:	80 83       	st	Z, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <SPI_initSlave>:

void SPI_initSlave(void)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PIN4));
  d2:	a7 e3       	ldi	r26, 0x37	; 55
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e7 e3       	ldi	r30, 0x37	; 55
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PIN5));
  e0:	a7 e3       	ldi	r26, 0x37	; 55
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e7 e3       	ldi	r30, 0x37	; 55
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PIN6);
  ee:	a7 e3       	ldi	r26, 0x37	; 55
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e7 e3       	ldi	r30, 0x37	; 55
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PIN7));
  fc:	a7 e3       	ldi	r26, 0x37	; 55
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e7 e3       	ldi	r30, 0x37	; 55
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	8c 93       	st	X, r24

	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
 10a:	ed e2       	ldi	r30, 0x2D	; 45
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
}
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <SPI_sendByte>:

void SPI_sendByte(const uint8_t data)
{
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data; //send data by SPI
 124:	ef e2       	ldi	r30, 0x2F	; 47
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1 (data is sent correctly)
 12c:	ee e2       	ldi	r30, 0x2E	; 46
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	dc f7       	brge	.-10     	; 0x12c <SPI_sendByte+0x14>
}
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <SPI_recieveByte>:

uint8_t SPI_recieveByte(void)
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1(data is receive correctly)
 146:	ee e2       	ldi	r30, 0x2E	; 46
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	dc f7       	brge	.-10     	; 0x146 <SPI_recieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
 150:	ef e2       	ldi	r30, 0x2F	; 47
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
}
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <SPI_SendString>:

void SPI_SendString(const uint8_t *Str)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	00 d0       	rcall	.+0      	; 0x162 <SPI_SendString+0x6>
 162:	0f 92       	push	r0
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	9b 83       	std	Y+3, r25	; 0x03
 16a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 16c:	19 82       	std	Y+1, r1	; 0x01
 16e:	0e c0       	rjmp	.+28     	; 0x18c <SPI_SendString+0x30>
	while(Str[i] != '\0')
	{
		SPI_sendByte(Str[i]);
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	9b 81       	ldd	r25, Y+3	; 0x03
 17a:	fc 01       	movw	r30, r24
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	80 81       	ld	r24, Z
 182:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_sendByte>
		i++;
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_SendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	fc 01       	movw	r30, r24
 198:	e2 0f       	add	r30, r18
 19a:	f3 1f       	adc	r31, r19
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	39 f7       	brne	.-50     	; 0x170 <SPI_SendString+0x14>
	{
		SPI_sendByte(Str[i]);
		i++;
	}
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	08 95       	ret

000001ae <SPI_ReceiveString>:

void SPI_ReceiveString(uint8_t *Str)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <SPI_ReceiveString+0xa>
 1b8:	0f 92       	push	r0
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	9b 83       	std	Y+3, r25	; 0x03
 1c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 1c2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_recieveByte();
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	9b 81       	ldd	r25, Y+3	; 0x03
 1ce:	8c 01       	movw	r16, r24
 1d0:	02 0f       	add	r16, r18
 1d2:	13 1f       	adc	r17, r19
 1d4:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_recieveByte>
 1d8:	f8 01       	movw	r30, r16
 1da:	80 83       	st	Z, r24
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <SPI_ReceiveString+0x4e>
	while(Str[i] != NEW_LINE)
	{
		i++;
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	9b 81       	ldd	r25, Y+3	; 0x03
 1ee:	8c 01       	movw	r16, r24
 1f0:	02 0f       	add	r16, r18
 1f2:	13 1f       	adc	r17, r19
 1f4:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_recieveByte>
 1f8:	f8 01       	movw	r30, r16
 1fa:	80 83       	st	Z, r24

void SPI_ReceiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = SPI_recieveByte();
	while(Str[i] != NEW_LINE)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	9b 81       	ldd	r25, Y+3	; 0x03
 206:	fc 01       	movw	r30, r24
 208:	e2 0f       	add	r30, r18
 20a:	f3 1f       	adc	r31, r19
 20c:	80 81       	ld	r24, Z
 20e:	8d 30       	cpi	r24, 0x0D	; 13
 210:	31 f7       	brne	.-52     	; 0x1de <SPI_ReceiveString+0x30>
	{
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	9b 81       	ldd	r25, Y+3	; 0x03
 21c:	fc 01       	movw	r30, r24
 21e:	e2 0f       	add	r30, r18
 220:	f3 1f       	adc	r31, r19
 222:	10 82       	st	Z, r1
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <DIO_setPortDirection>:

/********************************************************************
*  API to Set Port Direction                                       *
*  *****************************************************************/
ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_setPortDirection+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <DIO_setPortDirection+0x8>
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	8a 83       	std	Y+2, r24	; 0x02
 244:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 246:	19 82       	std	Y+1, r1	; 0x01
	//Check for the ports if it is between 0 to 3
    switch (PortID)
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	3d 83       	std	Y+5, r19	; 0x05
 250:	2c 83       	std	Y+4, r18	; 0x04
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	9d 81       	ldd	r25, Y+5	; 0x05
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	91 05       	cpc	r25, r1
 25a:	d1 f0       	breq	.+52     	; 0x290 <DIO_setPortDirection+0x5c>
 25c:	2c 81       	ldd	r18, Y+4	; 0x04
 25e:	3d 81       	ldd	r19, Y+5	; 0x05
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	31 05       	cpc	r19, r1
 264:	2c f4       	brge	.+10     	; 0x270 <DIO_setPortDirection+0x3c>
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	9d 81       	ldd	r25, Y+5	; 0x05
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	61 f0       	breq	.+24     	; 0x286 <DIO_setPortDirection+0x52>
 26e:	1f c0       	rjmp	.+62     	; 0x2ae <DIO_setPortDirection+0x7a>
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	3d 81       	ldd	r19, Y+5	; 0x05
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	81 f0       	breq	.+32     	; 0x29a <DIO_setPortDirection+0x66>
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	9d 81       	ldd	r25, Y+5	; 0x05
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	91 05       	cpc	r25, r1
 282:	81 f0       	breq	.+32     	; 0x2a4 <DIO_setPortDirection+0x70>
 284:	14 c0       	rjmp	.+40     	; 0x2ae <DIO_setPortDirection+0x7a>
    {
    case PORTa :
        DDRA = PortDirection;
 286:	ea e3       	ldi	r30, 0x3A	; 58
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	80 83       	st	Z, r24
 28e:	11 c0       	rjmp	.+34     	; 0x2b2 <DIO_setPortDirection+0x7e>
        break;
    case PORTb :
        DDRB = PortDirection;
 290:	e7 e3       	ldi	r30, 0x37	; 55
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	80 83       	st	Z, r24
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <DIO_setPortDirection+0x7e>
        break;
    case PORTc :
        DDRC = PortDirection;
 29a:	e4 e3       	ldi	r30, 0x34	; 52
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	80 83       	st	Z, r24
 2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <DIO_setPortDirection+0x7e>
        break;
    case PORTd :
        DDRD = PortDirection;
 2a4:	e1 e3       	ldi	r30, 0x31	; 49
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	80 83       	st	Z, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_setPortDirection+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPortDirection
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <DIO_setPinDirection>:

/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	28 97       	sbiw	r28, 0x08	; 8
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	8a 83       	std	Y+2, r24	; 0x02
 2da:	6b 83       	std	Y+3, r22	; 0x03
 2dc:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 2de:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 2e0:	8b 81       	ldd	r24, Y+3	; 0x03
 2e2:	88 30       	cpi	r24, 0x08	; 8
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <DIO_setPinDirection+0x24>
 2e6:	f4 c0       	rjmp	.+488    	; 0x4d0 <DIO_setPinDirection+0x20c>
	{
		if (DIO_u8_OUTPUT==PinDirection)
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	8f 3f       	cpi	r24, 0xFF	; 255
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <DIO_setPinDirection+0x2c>
 2ee:	72 c0       	rjmp	.+228    	; 0x3d4 <DIO_setPinDirection+0x110>
		{
			switch (PortID)
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	38 87       	std	Y+8, r19	; 0x08
 2f8:	2f 83       	std	Y+7, r18	; 0x07
 2fa:	8f 81       	ldd	r24, Y+7	; 0x07
 2fc:	98 85       	ldd	r25, Y+8	; 0x08
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	91 05       	cpc	r25, r1
 302:	49 f1       	breq	.+82     	; 0x356 <DIO_setPinDirection+0x92>
 304:	2f 81       	ldd	r18, Y+7	; 0x07
 306:	38 85       	ldd	r19, Y+8	; 0x08
 308:	22 30       	cpi	r18, 0x02	; 2
 30a:	31 05       	cpc	r19, r1
 30c:	2c f4       	brge	.+10     	; 0x318 <DIO_setPinDirection+0x54>
 30e:	8f 81       	ldd	r24, Y+7	; 0x07
 310:	98 85       	ldd	r25, Y+8	; 0x08
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	61 f0       	breq	.+24     	; 0x32e <DIO_setPinDirection+0x6a>
 316:	5b c0       	rjmp	.+182    	; 0x3ce <DIO_setPinDirection+0x10a>
 318:	2f 81       	ldd	r18, Y+7	; 0x07
 31a:	38 85       	ldd	r19, Y+8	; 0x08
 31c:	22 30       	cpi	r18, 0x02	; 2
 31e:	31 05       	cpc	r19, r1
 320:	71 f1       	breq	.+92     	; 0x37e <DIO_setPinDirection+0xba>
 322:	8f 81       	ldd	r24, Y+7	; 0x07
 324:	98 85       	ldd	r25, Y+8	; 0x08
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	91 05       	cpc	r25, r1
 32a:	e9 f1       	breq	.+122    	; 0x3a6 <DIO_setPinDirection+0xe2>
 32c:	50 c0       	rjmp	.+160    	; 0x3ce <DIO_setPinDirection+0x10a>
			{
			case PORTa :
				SET_BIT(DDRA, PinNumber);
 32e:	aa e3       	ldi	r26, 0x3A	; 58
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	ea e3       	ldi	r30, 0x3A	; 58
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_setPinDirection+0x88>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_setPinDirection+0x84>
 350:	84 2b       	or	r24, r20
 352:	8c 93       	st	X, r24
 354:	bf c0       	rjmp	.+382    	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				SET_BIT(DDRB, PinNumber);
 356:	a7 e3       	ldi	r26, 0x37	; 55
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e7 e3       	ldi	r30, 0x37	; 55
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	48 2f       	mov	r20, r24
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 2e       	mov	r0, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_setPinDirection+0xb0>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_setPinDirection+0xac>
 378:	84 2b       	or	r24, r20
 37a:	8c 93       	st	X, r24
 37c:	ab c0       	rjmp	.+342    	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				SET_BIT(DDRC, PinNumber);
 37e:	a4 e3       	ldi	r26, 0x34	; 52
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	e4 e3       	ldi	r30, 0x34	; 52
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	48 2f       	mov	r20, r24
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 2e       	mov	r0, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_setPinDirection+0xd8>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_setPinDirection+0xd4>
 3a0:	84 2b       	or	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	97 c0       	rjmp	.+302    	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				SET_BIT(DDRD, PinNumber);
 3a6:	a1 e3       	ldi	r26, 0x31	; 49
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e1 e3       	ldi	r30, 0x31	; 49
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_setPinDirection+0x100>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_setPinDirection+0xfc>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	83 c0       	rjmp	.+262    	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	80 c0       	rjmp	.+256    	; 0x4d4 <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT

		else if (DIO_u8_INPUT == PinDirection)
 3d4:	8c 81       	ldd	r24, Y+4	; 0x04
 3d6:	88 23       	and	r24, r24
 3d8:	09 f0       	breq	.+2      	; 0x3dc <DIO_setPinDirection+0x118>
 3da:	77 c0       	rjmp	.+238    	; 0x4ca <DIO_setPinDirection+0x206>
		{
			switch (PortID)
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	3e 83       	std	Y+6, r19	; 0x06
 3e4:	2d 83       	std	Y+5, r18	; 0x05
 3e6:	8d 81       	ldd	r24, Y+5	; 0x05
 3e8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	91 05       	cpc	r25, r1
 3ee:	59 f1       	breq	.+86     	; 0x446 <DIO_setPinDirection+0x182>
 3f0:	2d 81       	ldd	r18, Y+5	; 0x05
 3f2:	3e 81       	ldd	r19, Y+6	; 0x06
 3f4:	22 30       	cpi	r18, 0x02	; 2
 3f6:	31 05       	cpc	r19, r1
 3f8:	2c f4       	brge	.+10     	; 0x404 <DIO_setPinDirection+0x140>
 3fa:	8d 81       	ldd	r24, Y+5	; 0x05
 3fc:	9e 81       	ldd	r25, Y+6	; 0x06
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	69 f0       	breq	.+26     	; 0x41c <DIO_setPinDirection+0x158>
 402:	60 c0       	rjmp	.+192    	; 0x4c4 <DIO_setPinDirection+0x200>
 404:	2d 81       	ldd	r18, Y+5	; 0x05
 406:	3e 81       	ldd	r19, Y+6	; 0x06
 408:	22 30       	cpi	r18, 0x02	; 2
 40a:	31 05       	cpc	r19, r1
 40c:	89 f1       	breq	.+98     	; 0x470 <DIO_setPinDirection+0x1ac>
 40e:	8d 81       	ldd	r24, Y+5	; 0x05
 410:	9e 81       	ldd	r25, Y+6	; 0x06
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	91 05       	cpc	r25, r1
 416:	09 f4       	brne	.+2      	; 0x41a <DIO_setPinDirection+0x156>
 418:	40 c0       	rjmp	.+128    	; 0x49a <DIO_setPinDirection+0x1d6>
 41a:	54 c0       	rjmp	.+168    	; 0x4c4 <DIO_setPinDirection+0x200>
			{
			case PORTa :
				CLEAR_BIT(DDRA, PinNumber);
 41c:	aa e3       	ldi	r26, 0x3A	; 58
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	ea e3       	ldi	r30, 0x3A	; 58
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_setPinDirection+0x176>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_setPinDirection+0x172>
 43e:	80 95       	com	r24
 440:	84 23       	and	r24, r20
 442:	8c 93       	st	X, r24
 444:	47 c0       	rjmp	.+142    	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				CLEAR_BIT(DDRB, PinNumber);
 446:	a7 e3       	ldi	r26, 0x37	; 55
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e7 e3       	ldi	r30, 0x37	; 55
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 2e       	mov	r0, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_setPinDirection+0x1a0>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_setPinDirection+0x19c>
 468:	80 95       	com	r24
 46a:	84 23       	and	r24, r20
 46c:	8c 93       	st	X, r24
 46e:	32 c0       	rjmp	.+100    	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				CLEAR_BIT(DDRC, PinNumber);
 470:	a4 e3       	ldi	r26, 0x34	; 52
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e4 e3       	ldi	r30, 0x34	; 52
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_setPinDirection+0x1ca>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_setPinDirection+0x1c6>
 492:	80 95       	com	r24
 494:	84 23       	and	r24, r20
 496:	8c 93       	st	X, r24
 498:	1d c0       	rjmp	.+58     	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				CLEAR_BIT(DDRD, PinNumber);
 49a:	a1 e3       	ldi	r26, 0x31	; 49
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e1 e3       	ldi	r30, 0x31	; 49
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	48 2f       	mov	r20, r24
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 2e       	mov	r0, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_setPinDirection+0x1f4>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_setPinDirection+0x1f0>
 4bc:	80 95       	com	r24
 4be:	84 23       	and	r24, r20
 4c0:	8c 93       	st	X, r24
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of ELSE IF that check for the direction if it is INPUT
		else
		{
			u8_ERROR_STAT = ERROR_NOK;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	89 83       	std	Y+1, r24	; 0x01
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_setPinDirection+0x210>
		} //END OF ELSE
	}	  //END of IF That checking the port and pin number
	else
	{
		u8_ERROR_STAT = ERROR_NOK;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	89 83       	std	Y+1, r24	; 0x01

	}	  //END of ELSE
	return u8_ERROR_STAT;
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPinDirection
 4d6:	28 96       	adiw	r28, 0x08	; 8
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	cf 91       	pop	r28
 4e4:	df 91       	pop	r29
 4e6:	08 95       	ret

000004e8 <DIO_writePortValue>:
/********************************************************************
*   API to Write Port  Value                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
 4e8:	df 93       	push	r29
 4ea:	cf 93       	push	r28
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <DIO_writePortValue+0x6>
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <DIO_writePortValue+0x8>
 4f0:	0f 92       	push	r0
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	8a 83       	std	Y+2, r24	; 0x02
 4f8:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 4fa:	19 82       	std	Y+1, r1	; 0x01
    switch (PortID)
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	3d 83       	std	Y+5, r19	; 0x05
 504:	2c 83       	std	Y+4, r18	; 0x04
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	9d 81       	ldd	r25, Y+5	; 0x05
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	91 05       	cpc	r25, r1
 50e:	d1 f0       	breq	.+52     	; 0x544 <DIO_writePortValue+0x5c>
 510:	2c 81       	ldd	r18, Y+4	; 0x04
 512:	3d 81       	ldd	r19, Y+5	; 0x05
 514:	22 30       	cpi	r18, 0x02	; 2
 516:	31 05       	cpc	r19, r1
 518:	2c f4       	brge	.+10     	; 0x524 <DIO_writePortValue+0x3c>
 51a:	8c 81       	ldd	r24, Y+4	; 0x04
 51c:	9d 81       	ldd	r25, Y+5	; 0x05
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	61 f0       	breq	.+24     	; 0x53a <DIO_writePortValue+0x52>
 522:	1f c0       	rjmp	.+62     	; 0x562 <DIO_writePortValue+0x7a>
 524:	2c 81       	ldd	r18, Y+4	; 0x04
 526:	3d 81       	ldd	r19, Y+5	; 0x05
 528:	22 30       	cpi	r18, 0x02	; 2
 52a:	31 05       	cpc	r19, r1
 52c:	81 f0       	breq	.+32     	; 0x54e <DIO_writePortValue+0x66>
 52e:	8c 81       	ldd	r24, Y+4	; 0x04
 530:	9d 81       	ldd	r25, Y+5	; 0x05
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	91 05       	cpc	r25, r1
 536:	81 f0       	breq	.+32     	; 0x558 <DIO_writePortValue+0x70>
 538:	14 c0       	rjmp	.+40     	; 0x562 <DIO_writePortValue+0x7a>
    {
    case PORTa :
        PORTA = PortValue;
 53a:	eb e3       	ldi	r30, 0x3B	; 59
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	80 83       	st	Z, r24
 542:	11 c0       	rjmp	.+34     	; 0x566 <DIO_writePortValue+0x7e>
        break;
    case PORTb :
        PORTB = PortValue;
 544:	e8 e3       	ldi	r30, 0x38	; 56
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	80 83       	st	Z, r24
 54c:	0c c0       	rjmp	.+24     	; 0x566 <DIO_writePortValue+0x7e>
        break;
    case PORTc :
        PORTC = PortValue;
 54e:	e5 e3       	ldi	r30, 0x35	; 53
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	80 83       	st	Z, r24
 556:	07 c0       	rjmp	.+14     	; 0x566 <DIO_writePortValue+0x7e>
        break;
    case PORTd :
        PORTD = PortValue;
 558:	e2 e3       	ldi	r30, 0x32	; 50
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	80 83       	st	Z, r24
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_writePortValue+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
 566:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_writePortValue
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	cf 91       	pop	r28
 574:	df 91       	pop	r29
 576:	08 95       	ret

00000578 <DIO_writePinValue>:
/********************************************************************
*   API to Write Pin  Value                                         *
*  *****************************************************************/

ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
 578:	df 93       	push	r29
 57a:	cf 93       	push	r28
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	28 97       	sbiw	r28, 0x08	; 8
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	8a 83       	std	Y+2, r24	; 0x02
 58e:	6b 83       	std	Y+3, r22	; 0x03
 590:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 592:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
	if ( (PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 30       	cpi	r24, 0x08	; 8
 598:	08 f0       	brcs	.+2      	; 0x59c <DIO_writePinValue+0x24>
 59a:	f4 c0       	rjmp	.+488    	; 0x784 <DIO_writePinValue+0x20c>
	{
		if (DIO_u8_HIGH==PinDirection)
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <DIO_writePinValue+0x2c>
 5a2:	72 c0       	rjmp	.+228    	; 0x688 <DIO_writePinValue+0x110>
		{
			switch (PortID)
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	38 87       	std	Y+8, r19	; 0x08
 5ac:	2f 83       	std	Y+7, r18	; 0x07
 5ae:	8f 81       	ldd	r24, Y+7	; 0x07
 5b0:	98 85       	ldd	r25, Y+8	; 0x08
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	91 05       	cpc	r25, r1
 5b6:	49 f1       	breq	.+82     	; 0x60a <DIO_writePinValue+0x92>
 5b8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ba:	38 85       	ldd	r19, Y+8	; 0x08
 5bc:	22 30       	cpi	r18, 0x02	; 2
 5be:	31 05       	cpc	r19, r1
 5c0:	2c f4       	brge	.+10     	; 0x5cc <DIO_writePinValue+0x54>
 5c2:	8f 81       	ldd	r24, Y+7	; 0x07
 5c4:	98 85       	ldd	r25, Y+8	; 0x08
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <DIO_writePinValue+0x6a>
 5ca:	5b c0       	rjmp	.+182    	; 0x682 <DIO_writePinValue+0x10a>
 5cc:	2f 81       	ldd	r18, Y+7	; 0x07
 5ce:	38 85       	ldd	r19, Y+8	; 0x08
 5d0:	22 30       	cpi	r18, 0x02	; 2
 5d2:	31 05       	cpc	r19, r1
 5d4:	71 f1       	breq	.+92     	; 0x632 <DIO_writePinValue+0xba>
 5d6:	8f 81       	ldd	r24, Y+7	; 0x07
 5d8:	98 85       	ldd	r25, Y+8	; 0x08
 5da:	83 30       	cpi	r24, 0x03	; 3
 5dc:	91 05       	cpc	r25, r1
 5de:	e9 f1       	breq	.+122    	; 0x65a <DIO_writePinValue+0xe2>
 5e0:	50 c0       	rjmp	.+160    	; 0x682 <DIO_writePinValue+0x10a>
			{
			case PORTa :
				SET_BIT(PORTA, PinNumber);
 5e2:	ab e3       	ldi	r26, 0x3B	; 59
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	eb e3       	ldi	r30, 0x3B	; 59
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 2e       	mov	r0, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_writePinValue+0x88>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_writePinValue+0x84>
 604:	84 2b       	or	r24, r20
 606:	8c 93       	st	X, r24
 608:	bf c0       	rjmp	.+382    	; 0x788 <DIO_writePinValue+0x210>
				break;
			case PORTb :
				SET_BIT(PORTB, PinNumber);
 60a:	a8 e3       	ldi	r26, 0x38	; 56
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e8 e3       	ldi	r30, 0x38	; 56
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	48 2f       	mov	r20, r24
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 2e       	mov	r0, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_writePinValue+0xb0>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_writePinValue+0xac>
 62c:	84 2b       	or	r24, r20
 62e:	8c 93       	st	X, r24
 630:	ab c0       	rjmp	.+342    	; 0x788 <DIO_writePinValue+0x210>
				break;
			case PORTc :
				SET_BIT(PORTC, PinNumber);
 632:	a5 e3       	ldi	r26, 0x35	; 53
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e5 e3       	ldi	r30, 0x35	; 53
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	48 2f       	mov	r20, r24
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 2e       	mov	r0, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_writePinValue+0xd8>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	0a 94       	dec	r0
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_writePinValue+0xd4>
 654:	84 2b       	or	r24, r20
 656:	8c 93       	st	X, r24
 658:	97 c0       	rjmp	.+302    	; 0x788 <DIO_writePinValue+0x210>
				break;
			case PORTd :
				SET_BIT(PORTD, PinNumber);
 65a:	a2 e3       	ldi	r26, 0x32	; 50
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e2 e3       	ldi	r30, 0x32	; 50
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	48 2f       	mov	r20, r24
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 2e       	mov	r0, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_writePinValue+0x100>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_writePinValue+0xfc>
 67c:	84 2b       	or	r24, r20
 67e:	8c 93       	st	X, r24
 680:	83 c0       	rjmp	.+262    	; 0x788 <DIO_writePinValue+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	89 83       	std	Y+1, r24	; 0x01
 686:	80 c0       	rjmp	.+256    	; 0x788 <DIO_writePinValue+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT
		else if (DIO_u8_LOW==PinDirection)
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	88 23       	and	r24, r24
 68c:	09 f0       	breq	.+2      	; 0x690 <DIO_writePinValue+0x118>
 68e:	77 c0       	rjmp	.+238    	; 0x77e <DIO_writePinValue+0x206>
		{
			switch (PortID)
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	3e 83       	std	Y+6, r19	; 0x06
 698:	2d 83       	std	Y+5, r18	; 0x05
 69a:	8d 81       	ldd	r24, Y+5	; 0x05
 69c:	9e 81       	ldd	r25, Y+6	; 0x06
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	59 f1       	breq	.+86     	; 0x6fa <DIO_writePinValue+0x182>
 6a4:	2d 81       	ldd	r18, Y+5	; 0x05
 6a6:	3e 81       	ldd	r19, Y+6	; 0x06
 6a8:	22 30       	cpi	r18, 0x02	; 2
 6aa:	31 05       	cpc	r19, r1
 6ac:	2c f4       	brge	.+10     	; 0x6b8 <DIO_writePinValue+0x140>
 6ae:	8d 81       	ldd	r24, Y+5	; 0x05
 6b0:	9e 81       	ldd	r25, Y+6	; 0x06
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	69 f0       	breq	.+26     	; 0x6d0 <DIO_writePinValue+0x158>
 6b6:	60 c0       	rjmp	.+192    	; 0x778 <DIO_writePinValue+0x200>
 6b8:	2d 81       	ldd	r18, Y+5	; 0x05
 6ba:	3e 81       	ldd	r19, Y+6	; 0x06
 6bc:	22 30       	cpi	r18, 0x02	; 2
 6be:	31 05       	cpc	r19, r1
 6c0:	89 f1       	breq	.+98     	; 0x724 <DIO_writePinValue+0x1ac>
 6c2:	8d 81       	ldd	r24, Y+5	; 0x05
 6c4:	9e 81       	ldd	r25, Y+6	; 0x06
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	91 05       	cpc	r25, r1
 6ca:	09 f4       	brne	.+2      	; 0x6ce <DIO_writePinValue+0x156>
 6cc:	40 c0       	rjmp	.+128    	; 0x74e <DIO_writePinValue+0x1d6>
 6ce:	54 c0       	rjmp	.+168    	; 0x778 <DIO_writePinValue+0x200>
			{
			case PORTa :
				CLEAR_BIT(PORTA, PinNumber);
 6d0:	ab e3       	ldi	r26, 0x3B	; 59
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	eb e3       	ldi	r30, 0x3B	; 59
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	48 2f       	mov	r20, r24
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 2e       	mov	r0, r18
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_writePinValue+0x176>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	0a 94       	dec	r0
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_writePinValue+0x172>
 6f2:	80 95       	com	r24
 6f4:	84 23       	and	r24, r20
 6f6:	8c 93       	st	X, r24
 6f8:	47 c0       	rjmp	.+142    	; 0x788 <DIO_writePinValue+0x210>
				break;
			case PORTb :
				CLEAR_BIT(PORTB, PinNumber);
 6fa:	a8 e3       	ldi	r26, 0x38	; 56
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e8 e3       	ldi	r30, 0x38	; 56
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 2e       	mov	r0, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_writePinValue+0x1a0>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_writePinValue+0x19c>
 71c:	80 95       	com	r24
 71e:	84 23       	and	r24, r20
 720:	8c 93       	st	X, r24
 722:	32 c0       	rjmp	.+100    	; 0x788 <DIO_writePinValue+0x210>
				break;
			case PORTc :
				CLEAR_BIT(PORTC, PinNumber);
 724:	a5 e3       	ldi	r26, 0x35	; 53
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	e5 e3       	ldi	r30, 0x35	; 53
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	48 2f       	mov	r20, r24
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	28 2f       	mov	r18, r24
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 2e       	mov	r0, r18
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_writePinValue+0x1ca>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_writePinValue+0x1c6>
 746:	80 95       	com	r24
 748:	84 23       	and	r24, r20
 74a:	8c 93       	st	X, r24
 74c:	1d c0       	rjmp	.+58     	; 0x788 <DIO_writePinValue+0x210>
				break;
			case PORTd :
				CLEAR_BIT(PORTD, PinNumber);
 74e:	a2 e3       	ldi	r26, 0x32	; 50
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	e2 e3       	ldi	r30, 0x32	; 50
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	48 2f       	mov	r20, r24
 75a:	8b 81       	ldd	r24, Y+3	; 0x03
 75c:	28 2f       	mov	r18, r24
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 2e       	mov	r0, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_writePinValue+0x1f4>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_writePinValue+0x1f0>
 770:	80 95       	com	r24
 772:	84 23       	and	r24, r20
 774:	8c 93       	st	X, r24
 776:	08 c0       	rjmp	.+16     	; 0x788 <DIO_writePinValue+0x210>
				break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	05 c0       	rjmp	.+10     	; 0x788 <DIO_writePinValue+0x210>
			} //END of SWITCH
		} // END OF ELSE IF
		else
        {
            /*INVALID PIN DIRECTION*/
			u8_ERROR_STAT = ERROR_NOK;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_writePinValue+0x210>
		} //END OF ELSE
	}	  //END OF IF
	else
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	89 83       	std	Y+1, r24	; 0x01
	}	  //END of ELSE
	return u8_ERROR_STAT ;
 788:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_writePinValue
 78a:	28 96       	adiw	r28, 0x08	; 8
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	08 95       	ret

0000079c <DIO_readPort>:
/********************************************************************
*   API to Read Port  Value                                        *
*  *****************************************************************/
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <DIO_readPort+0x6>
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <DIO_readPort+0x8>
 7a4:	00 d0       	rcall	.+0      	; 0x7a6 <DIO_readPort+0xa>
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	8a 83       	std	Y+2, r24	; 0x02
 7ac:	7c 83       	std	Y+4, r23	; 0x04
 7ae:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 7b0:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
 7b2:	8b 81       	ldd	r24, Y+3	; 0x03
 7b4:	9c 81       	ldd	r25, Y+4	; 0x04
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	19 f4       	brne	.+6      	; 0x7c0 <DIO_readPort+0x24>
    {
        u8_ERROR_STAT = ERROR_NOK;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	3d c0       	rjmp	.+122    	; 0x83a <DIO_readPort+0x9e>
	}
	else
	{
    switch (PortID)
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	28 2f       	mov	r18, r24
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	3e 83       	std	Y+6, r19	; 0x06
 7c8:	2d 83       	std	Y+5, r18	; 0x05
 7ca:	8d 81       	ldd	r24, Y+5	; 0x05
 7cc:	9e 81       	ldd	r25, Y+6	; 0x06
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	91 05       	cpc	r25, r1
 7d2:	e1 f0       	breq	.+56     	; 0x80c <DIO_readPort+0x70>
 7d4:	2d 81       	ldd	r18, Y+5	; 0x05
 7d6:	3e 81       	ldd	r19, Y+6	; 0x06
 7d8:	22 30       	cpi	r18, 0x02	; 2
 7da:	31 05       	cpc	r19, r1
 7dc:	2c f4       	brge	.+10     	; 0x7e8 <DIO_readPort+0x4c>
 7de:	8d 81       	ldd	r24, Y+5	; 0x05
 7e0:	9e 81       	ldd	r25, Y+6	; 0x06
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	61 f0       	breq	.+24     	; 0x7fe <DIO_readPort+0x62>
 7e6:	27 c0       	rjmp	.+78     	; 0x836 <DIO_readPort+0x9a>
 7e8:	2d 81       	ldd	r18, Y+5	; 0x05
 7ea:	3e 81       	ldd	r19, Y+6	; 0x06
 7ec:	22 30       	cpi	r18, 0x02	; 2
 7ee:	31 05       	cpc	r19, r1
 7f0:	a1 f0       	breq	.+40     	; 0x81a <DIO_readPort+0x7e>
 7f2:	8d 81       	ldd	r24, Y+5	; 0x05
 7f4:	9e 81       	ldd	r25, Y+6	; 0x06
 7f6:	83 30       	cpi	r24, 0x03	; 3
 7f8:	91 05       	cpc	r25, r1
 7fa:	b1 f0       	breq	.+44     	; 0x828 <DIO_readPort+0x8c>
 7fc:	1c c0       	rjmp	.+56     	; 0x836 <DIO_readPort+0x9a>
    {
    case PORTa :
        *(PortState) = PINA;
 7fe:	e9 e3       	ldi	r30, 0x39	; 57
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	eb 81       	ldd	r30, Y+3	; 0x03
 806:	fc 81       	ldd	r31, Y+4	; 0x04
 808:	80 83       	st	Z, r24
 80a:	17 c0       	rjmp	.+46     	; 0x83a <DIO_readPort+0x9e>
        break;
    case PORTb :
        *(PortState) = PINB;
 80c:	e6 e3       	ldi	r30, 0x36	; 54
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	eb 81       	ldd	r30, Y+3	; 0x03
 814:	fc 81       	ldd	r31, Y+4	; 0x04
 816:	80 83       	st	Z, r24
 818:	10 c0       	rjmp	.+32     	; 0x83a <DIO_readPort+0x9e>
        break;
    case PORTc :
        *(PortState) = PINC;
 81a:	e3 e3       	ldi	r30, 0x33	; 51
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	eb 81       	ldd	r30, Y+3	; 0x03
 822:	fc 81       	ldd	r31, Y+4	; 0x04
 824:	80 83       	st	Z, r24
 826:	09 c0       	rjmp	.+18     	; 0x83a <DIO_readPort+0x9e>
        break;
    case PORTd :
        *(PortState) = PIND;
 828:	e0 e3       	ldi	r30, 0x30	; 48
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	eb 81       	ldd	r30, Y+3	; 0x03
 830:	fc 81       	ldd	r31, Y+4	; 0x04
 832:	80 83       	st	Z, r24
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_readPort+0x9e>
        break;
    default:
            /*INVALID PORT NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	89 83       	std	Y+1, r24	; 0x01
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
 83a:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_readPort
 83c:	26 96       	adiw	r28, 0x06	; 6
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	de bf       	out	0x3e, r29	; 62
 844:	0f be       	out	0x3f, r0	; 63
 846:	cd bf       	out	0x3d, r28	; 61
 848:	cf 91       	pop	r28
 84a:	df 91       	pop	r29
 84c:	08 95       	ret

0000084e <DIO_readPin>:
/********************************************************************
*   API to Read Pin  Value                                          *
*  *****************************************************************/
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
 84e:	df 93       	push	r29
 850:	cf 93       	push	r28
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	27 97       	sbiw	r28, 0x07	; 7
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
 862:	8a 83       	std	Y+2, r24	; 0x02
 864:	6b 83       	std	Y+3, r22	; 0x03
 866:	5d 83       	std	Y+5, r21	; 0x05
 868:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 86a:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
 86c:	8c 81       	ldd	r24, Y+4	; 0x04
 86e:	9d 81       	ldd	r25, Y+5	; 0x05
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
    {
        u8_ERROR_STAT = ERROR_NOK;
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	89 83       	std	Y+1, r24	; 0x01
 878:	7a c0       	rjmp	.+244    	; 0x96e <__stack+0x10f>
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	88 30       	cpi	r24, 0x08	; 8
 87e:	08 f0       	brcs	.+2      	; 0x882 <__stack+0x23>
 880:	74 c0       	rjmp	.+232    	; 0x96a <__stack+0x10b>
        {
            switch (PortID)
 882:	8a 81       	ldd	r24, Y+2	; 0x02
 884:	28 2f       	mov	r18, r24
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	3f 83       	std	Y+7, r19	; 0x07
 88a:	2e 83       	std	Y+6, r18	; 0x06
 88c:	4e 81       	ldd	r20, Y+6	; 0x06
 88e:	5f 81       	ldd	r21, Y+7	; 0x07
 890:	41 30       	cpi	r20, 0x01	; 1
 892:	51 05       	cpc	r21, r1
 894:	59 f1       	breq	.+86     	; 0x8ec <__stack+0x8d>
 896:	8e 81       	ldd	r24, Y+6	; 0x06
 898:	9f 81       	ldd	r25, Y+7	; 0x07
 89a:	82 30       	cpi	r24, 0x02	; 2
 89c:	91 05       	cpc	r25, r1
 89e:	34 f4       	brge	.+12     	; 0x8ac <__stack+0x4d>
 8a0:	2e 81       	ldd	r18, Y+6	; 0x06
 8a2:	3f 81       	ldd	r19, Y+7	; 0x07
 8a4:	21 15       	cp	r18, r1
 8a6:	31 05       	cpc	r19, r1
 8a8:	69 f0       	breq	.+26     	; 0x8c4 <__stack+0x65>
 8aa:	5c c0       	rjmp	.+184    	; 0x964 <__stack+0x105>
 8ac:	4e 81       	ldd	r20, Y+6	; 0x06
 8ae:	5f 81       	ldd	r21, Y+7	; 0x07
 8b0:	42 30       	cpi	r20, 0x02	; 2
 8b2:	51 05       	cpc	r21, r1
 8b4:	79 f1       	breq	.+94     	; 0x914 <__stack+0xb5>
 8b6:	8e 81       	ldd	r24, Y+6	; 0x06
 8b8:	9f 81       	ldd	r25, Y+7	; 0x07
 8ba:	83 30       	cpi	r24, 0x03	; 3
 8bc:	91 05       	cpc	r25, r1
 8be:	09 f4       	brne	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	3d c0       	rjmp	.+122    	; 0x93c <__stack+0xdd>
 8c2:	50 c0       	rjmp	.+160    	; 0x964 <__stack+0x105>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
 8c4:	e9 e3       	ldi	r30, 0x39	; 57
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	28 2f       	mov	r18, r24
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	8b 81       	ldd	r24, Y+3	; 0x03
 8d0:	88 2f       	mov	r24, r24
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	a9 01       	movw	r20, r18
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	55 95       	asr	r21
 8da:	47 95       	ror	r20
 8dc:	8a 95       	dec	r24
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	ca 01       	movw	r24, r20
 8e2:	81 70       	andi	r24, 0x01	; 1
 8e4:	ec 81       	ldd	r30, Y+4	; 0x04
 8e6:	fd 81       	ldd	r31, Y+5	; 0x05
 8e8:	80 83       	st	Z, r24
 8ea:	41 c0       	rjmp	.+130    	; 0x96e <__stack+0x10f>
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
 8ec:	e6 e3       	ldi	r30, 0x36	; 54
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	28 2f       	mov	r18, r24
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	88 2f       	mov	r24, r24
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	a9 01       	movw	r20, r18
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0xa5>
 900:	55 95       	asr	r21
 902:	47 95       	ror	r20
 904:	8a 95       	dec	r24
 906:	e2 f7       	brpl	.-8      	; 0x900 <__stack+0xa1>
 908:	ca 01       	movw	r24, r20
 90a:	81 70       	andi	r24, 0x01	; 1
 90c:	ec 81       	ldd	r30, Y+4	; 0x04
 90e:	fd 81       	ldd	r31, Y+5	; 0x05
 910:	80 83       	st	Z, r24
 912:	2d c0       	rjmp	.+90     	; 0x96e <__stack+0x10f>
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
 914:	e3 e3       	ldi	r30, 0x33	; 51
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	28 2f       	mov	r18, r24
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	8b 81       	ldd	r24, Y+3	; 0x03
 920:	88 2f       	mov	r24, r24
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	a9 01       	movw	r20, r18
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	55 95       	asr	r21
 92a:	47 95       	ror	r20
 92c:	8a 95       	dec	r24
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
 930:	ca 01       	movw	r24, r20
 932:	81 70       	andi	r24, 0x01	; 1
 934:	ec 81       	ldd	r30, Y+4	; 0x04
 936:	fd 81       	ldd	r31, Y+5	; 0x05
 938:	80 83       	st	Z, r24
 93a:	19 c0       	rjmp	.+50     	; 0x96e <__stack+0x10f>
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
 93c:	e0 e3       	ldi	r30, 0x30	; 48
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	28 2f       	mov	r18, r24
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	8b 81       	ldd	r24, Y+3	; 0x03
 948:	88 2f       	mov	r24, r24
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	a9 01       	movw	r20, r18
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0xf5>
 950:	55 95       	asr	r21
 952:	47 95       	ror	r20
 954:	8a 95       	dec	r24
 956:	e2 f7       	brpl	.-8      	; 0x950 <__stack+0xf1>
 958:	ca 01       	movw	r24, r20
 95a:	81 70       	andi	r24, 0x01	; 1
 95c:	ec 81       	ldd	r30, Y+4	; 0x04
 95e:	fd 81       	ldd	r31, Y+5	; 0x05
 960:	80 83       	st	Z, r24
 962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x10f>
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	89 83       	std	Y+1, r24	; 0x01
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	89 83       	std	Y+1, r24	; 0x01
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
 96e:	89 81       	ldd	r24, Y+1	; 0x01
}    //END of DIO_readPint
 970:	27 96       	adiw	r28, 0x07	; 7
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <DIO_TogglePin>:
 * */
/********************************************************************
*   API to toggle pin                                               *
*  *****************************************************************/
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
 982:	df 93       	push	r29
 984:	cf 93       	push	r28
 986:	00 d0       	rcall	.+0      	; 0x988 <DIO_TogglePin+0x6>
 988:	00 d0       	rcall	.+0      	; 0x98a <DIO_TogglePin+0x8>
 98a:	0f 92       	push	r0
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
 990:	8a 83       	std	Y+2, r24	; 0x02
 992:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 994:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 996:	8b 81       	ldd	r24, Y+3	; 0x03
 998:	88 30       	cpi	r24, 0x08	; 8
 99a:	08 f0       	brcs	.+2      	; 0x99e <DIO_TogglePin+0x1c>
 99c:	72 c0       	rjmp	.+228    	; 0xa82 <DIO_TogglePin+0x100>
    {
        switch (PortID)
 99e:	8a 81       	ldd	r24, Y+2	; 0x02
 9a0:	28 2f       	mov	r18, r24
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	3d 83       	std	Y+5, r19	; 0x05
 9a6:	2c 83       	std	Y+4, r18	; 0x04
 9a8:	8c 81       	ldd	r24, Y+4	; 0x04
 9aa:	9d 81       	ldd	r25, Y+5	; 0x05
 9ac:	81 30       	cpi	r24, 0x01	; 1
 9ae:	91 05       	cpc	r25, r1
 9b0:	49 f1       	breq	.+82     	; 0xa04 <DIO_TogglePin+0x82>
 9b2:	2c 81       	ldd	r18, Y+4	; 0x04
 9b4:	3d 81       	ldd	r19, Y+5	; 0x05
 9b6:	22 30       	cpi	r18, 0x02	; 2
 9b8:	31 05       	cpc	r19, r1
 9ba:	2c f4       	brge	.+10     	; 0x9c6 <DIO_TogglePin+0x44>
 9bc:	8c 81       	ldd	r24, Y+4	; 0x04
 9be:	9d 81       	ldd	r25, Y+5	; 0x05
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	61 f0       	breq	.+24     	; 0x9dc <DIO_TogglePin+0x5a>
 9c4:	5b c0       	rjmp	.+182    	; 0xa7c <DIO_TogglePin+0xfa>
 9c6:	2c 81       	ldd	r18, Y+4	; 0x04
 9c8:	3d 81       	ldd	r19, Y+5	; 0x05
 9ca:	22 30       	cpi	r18, 0x02	; 2
 9cc:	31 05       	cpc	r19, r1
 9ce:	71 f1       	breq	.+92     	; 0xa2c <DIO_TogglePin+0xaa>
 9d0:	8c 81       	ldd	r24, Y+4	; 0x04
 9d2:	9d 81       	ldd	r25, Y+5	; 0x05
 9d4:	83 30       	cpi	r24, 0x03	; 3
 9d6:	91 05       	cpc	r25, r1
 9d8:	e9 f1       	breq	.+122    	; 0xa54 <DIO_TogglePin+0xd2>
 9da:	50 c0       	rjmp	.+160    	; 0xa7c <DIO_TogglePin+0xfa>
        {
        case PORTa :
            TOGGLE_BIT(PORTA, PinNumber);
 9dc:	ab e3       	ldi	r26, 0x3B	; 59
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	eb e3       	ldi	r30, 0x3B	; 59
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	48 2f       	mov	r20, r24
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	02 2e       	mov	r0, r18
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <DIO_TogglePin+0x78>
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	0a 94       	dec	r0
 9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <DIO_TogglePin+0x74>
 9fe:	84 27       	eor	r24, r20
 a00:	8c 93       	st	X, r24
 a02:	41 c0       	rjmp	.+130    	; 0xa86 <DIO_TogglePin+0x104>
            break;
        case PORTb :
            TOGGLE_BIT(PORTB, PinNumber);
 a04:	a8 e3       	ldi	r26, 0x38	; 56
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	e8 e3       	ldi	r30, 0x38	; 56
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	48 2f       	mov	r20, r24
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	28 2f       	mov	r18, r24
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	02 2e       	mov	r0, r18
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_TogglePin+0xa0>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	0a 94       	dec	r0
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_TogglePin+0x9c>
 a26:	84 27       	eor	r24, r20
 a28:	8c 93       	st	X, r24
 a2a:	2d c0       	rjmp	.+90     	; 0xa86 <DIO_TogglePin+0x104>
            break;
        case PORTc :
            TOGGLE_BIT(PORTC, PinNumber);
 a2c:	a5 e3       	ldi	r26, 0x35	; 53
 a2e:	b0 e0       	ldi	r27, 0x00	; 0
 a30:	e5 e3       	ldi	r30, 0x35	; 53
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	80 81       	ld	r24, Z
 a36:	48 2f       	mov	r20, r24
 a38:	8b 81       	ldd	r24, Y+3	; 0x03
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	02 2e       	mov	r0, r18
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <DIO_TogglePin+0xc8>
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	0a 94       	dec	r0
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <DIO_TogglePin+0xc4>
 a4e:	84 27       	eor	r24, r20
 a50:	8c 93       	st	X, r24
 a52:	19 c0       	rjmp	.+50     	; 0xa86 <DIO_TogglePin+0x104>
            break;
        case PORTd :
            TOGGLE_BIT(PORTD, PinNumber);
 a54:	a2 e3       	ldi	r26, 0x32	; 50
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	e2 e3       	ldi	r30, 0x32	; 50
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	48 2f       	mov	r20, r24
 a60:	8b 81       	ldd	r24, Y+3	; 0x03
 a62:	28 2f       	mov	r18, r24
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	02 2e       	mov	r0, r18
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_TogglePin+0xf0>
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	0a 94       	dec	r0
 a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_TogglePin+0xec>
 a76:	84 27       	eor	r24, r20
 a78:	8c 93       	st	X, r24
 a7a:	05 c0       	rjmp	.+10     	; 0xa86 <DIO_TogglePin+0x104>
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	89 83       	std	Y+1, r24	; 0x01
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_TogglePin+0x104>
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	89 83       	std	Y+1, r24	; 0x01
    }	  //END of ELSE
    return u8_ERROR_STAT ;
 a86:	89 81       	ldd	r24, Y+1	; 0x01
}
 a88:	0f 90       	pop	r0
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	08 95       	ret

00000a98 <DIO_SetPullupRes>:

/********************************************************************
*   API to PullUp Resistor                                              *
*  *****************************************************************/
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	00 d0       	rcall	.+0      	; 0xa9e <DIO_SetPullupRes+0x6>
 a9e:	00 d0       	rcall	.+0      	; 0xaa0 <DIO_SetPullupRes+0x8>
 aa0:	0f 92       	push	r0
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
 aa6:	8a 83       	std	Y+2, r24	; 0x02
 aa8:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 aaa:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 aac:	8b 81       	ldd	r24, Y+3	; 0x03
 aae:	88 30       	cpi	r24, 0x08	; 8
 ab0:	08 f0       	brcs	.+2      	; 0xab4 <DIO_SetPullupRes+0x1c>
 ab2:	ce c0       	rjmp	.+412    	; 0xc50 <DIO_SetPullupRes+0x1b8>
    {
        switch (PortID)
 ab4:	8a 81       	ldd	r24, Y+2	; 0x02
 ab6:	28 2f       	mov	r18, r24
 ab8:	30 e0       	ldi	r19, 0x00	; 0
 aba:	3d 83       	std	Y+5, r19	; 0x05
 abc:	2c 83       	std	Y+4, r18	; 0x04
 abe:	4c 81       	ldd	r20, Y+4	; 0x04
 ac0:	5d 81       	ldd	r21, Y+5	; 0x05
 ac2:	41 30       	cpi	r20, 0x01	; 1
 ac4:	51 05       	cpc	r21, r1
 ac6:	09 f4       	brne	.+2      	; 0xaca <DIO_SetPullupRes+0x32>
 ac8:	42 c0       	rjmp	.+132    	; 0xb4e <DIO_SetPullupRes+0xb6>
 aca:	8c 81       	ldd	r24, Y+4	; 0x04
 acc:	9d 81       	ldd	r25, Y+5	; 0x05
 ace:	82 30       	cpi	r24, 0x02	; 2
 ad0:	91 05       	cpc	r25, r1
 ad2:	34 f4       	brge	.+12     	; 0xae0 <DIO_SetPullupRes+0x48>
 ad4:	2c 81       	ldd	r18, Y+4	; 0x04
 ad6:	3d 81       	ldd	r19, Y+5	; 0x05
 ad8:	21 15       	cp	r18, r1
 ada:	31 05       	cpc	r19, r1
 adc:	71 f0       	breq	.+28     	; 0xafa <DIO_SetPullupRes+0x62>
 ade:	b5 c0       	rjmp	.+362    	; 0xc4a <DIO_SetPullupRes+0x1b2>
 ae0:	4c 81       	ldd	r20, Y+4	; 0x04
 ae2:	5d 81       	ldd	r21, Y+5	; 0x05
 ae4:	42 30       	cpi	r20, 0x02	; 2
 ae6:	51 05       	cpc	r21, r1
 ae8:	09 f4       	brne	.+2      	; 0xaec <DIO_SetPullupRes+0x54>
 aea:	5b c0       	rjmp	.+182    	; 0xba2 <DIO_SetPullupRes+0x10a>
 aec:	8c 81       	ldd	r24, Y+4	; 0x04
 aee:	9d 81       	ldd	r25, Y+5	; 0x05
 af0:	83 30       	cpi	r24, 0x03	; 3
 af2:	91 05       	cpc	r25, r1
 af4:	09 f4       	brne	.+2      	; 0xaf8 <DIO_SetPullupRes+0x60>
 af6:	7f c0       	rjmp	.+254    	; 0xbf6 <DIO_SetPullupRes+0x15e>
 af8:	a8 c0       	rjmp	.+336    	; 0xc4a <DIO_SetPullupRes+0x1b2>
        {
        case PORTa :
            if(DIO_u8_INPUT==Get_Bit(DDRA, PinNumber))
 afa:	ea e3       	ldi	r30, 0x3A	; 58
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	80 81       	ld	r24, Z
 b00:	28 2f       	mov	r18, r24
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	8b 81       	ldd	r24, Y+3	; 0x03
 b06:	88 2f       	mov	r24, r24
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	a9 01       	movw	r20, r18
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <DIO_SetPullupRes+0x7a>
 b0e:	55 95       	asr	r21
 b10:	47 95       	ror	r20
 b12:	8a 95       	dec	r24
 b14:	e2 f7       	brpl	.-8      	; 0xb0e <DIO_SetPullupRes+0x76>
 b16:	ca 01       	movw	r24, r20
 b18:	81 70       	andi	r24, 0x01	; 1
 b1a:	90 70       	andi	r25, 0x00	; 0
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	a1 f4       	brne	.+40     	; 0xb48 <DIO_SetPullupRes+0xb0>
            {
                SET_BIT(PORTA, PinNumber);
 b20:	ab e3       	ldi	r26, 0x3B	; 59
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	eb e3       	ldi	r30, 0x3B	; 59
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	48 2f       	mov	r20, r24
 b2c:	8b 81       	ldd	r24, Y+3	; 0x03
 b2e:	28 2f       	mov	r18, r24
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	02 2e       	mov	r0, r18
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <DIO_SetPullupRes+0xa6>
 b3a:	88 0f       	add	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	0a 94       	dec	r0
 b40:	e2 f7       	brpl	.-8      	; 0xb3a <DIO_SetPullupRes+0xa2>
 b42:	84 2b       	or	r24, r20
 b44:	8c 93       	st	X, r24
 b46:	86 c0       	rjmp	.+268    	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	89 83       	std	Y+1, r24	; 0x01
 b4c:	83 c0       	rjmp	.+262    	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTb :
            if(DIO_u8_INPUT==Get_Bit(DDRB, PinNumber))
 b4e:	e7 e3       	ldi	r30, 0x37	; 55
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	80 81       	ld	r24, Z
 b54:	28 2f       	mov	r18, r24
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	8b 81       	ldd	r24, Y+3	; 0x03
 b5a:	88 2f       	mov	r24, r24
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	a9 01       	movw	r20, r18
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_SetPullupRes+0xce>
 b62:	55 95       	asr	r21
 b64:	47 95       	ror	r20
 b66:	8a 95       	dec	r24
 b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_SetPullupRes+0xca>
 b6a:	ca 01       	movw	r24, r20
 b6c:	81 70       	andi	r24, 0x01	; 1
 b6e:	90 70       	andi	r25, 0x00	; 0
 b70:	00 97       	sbiw	r24, 0x00	; 0
 b72:	a1 f4       	brne	.+40     	; 0xb9c <DIO_SetPullupRes+0x104>
            {
                SET_BIT(PORTB, PinNumber);
 b74:	a8 e3       	ldi	r26, 0x38	; 56
 b76:	b0 e0       	ldi	r27, 0x00	; 0
 b78:	e8 e3       	ldi	r30, 0x38	; 56
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	48 2f       	mov	r20, r24
 b80:	8b 81       	ldd	r24, Y+3	; 0x03
 b82:	28 2f       	mov	r18, r24
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	02 2e       	mov	r0, r18
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_SetPullupRes+0xfa>
 b8e:	88 0f       	add	r24, r24
 b90:	99 1f       	adc	r25, r25
 b92:	0a 94       	dec	r0
 b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_SetPullupRes+0xf6>
 b96:	84 2b       	or	r24, r20
 b98:	8c 93       	st	X, r24
 b9a:	5c c0       	rjmp	.+184    	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	89 83       	std	Y+1, r24	; 0x01
 ba0:	59 c0       	rjmp	.+178    	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTc :
            if(DIO_u8_INPUT==Get_Bit(DDRC, PinNumber))
 ba2:	e4 e3       	ldi	r30, 0x34	; 52
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	80 81       	ld	r24, Z
 ba8:	28 2f       	mov	r18, r24
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	8b 81       	ldd	r24, Y+3	; 0x03
 bae:	88 2f       	mov	r24, r24
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	a9 01       	movw	r20, r18
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_SetPullupRes+0x122>
 bb6:	55 95       	asr	r21
 bb8:	47 95       	ror	r20
 bba:	8a 95       	dec	r24
 bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_SetPullupRes+0x11e>
 bbe:	ca 01       	movw	r24, r20
 bc0:	81 70       	andi	r24, 0x01	; 1
 bc2:	90 70       	andi	r25, 0x00	; 0
 bc4:	00 97       	sbiw	r24, 0x00	; 0
 bc6:	a1 f4       	brne	.+40     	; 0xbf0 <DIO_SetPullupRes+0x158>
            {
                SET_BIT(PORTC, PinNumber);
 bc8:	a5 e3       	ldi	r26, 0x35	; 53
 bca:	b0 e0       	ldi	r27, 0x00	; 0
 bcc:	e5 e3       	ldi	r30, 0x35	; 53
 bce:	f0 e0       	ldi	r31, 0x00	; 0
 bd0:	80 81       	ld	r24, Z
 bd2:	48 2f       	mov	r20, r24
 bd4:	8b 81       	ldd	r24, Y+3	; 0x03
 bd6:	28 2f       	mov	r18, r24
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	02 2e       	mov	r0, r18
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_SetPullupRes+0x14e>
 be2:	88 0f       	add	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	0a 94       	dec	r0
 be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_SetPullupRes+0x14a>
 bea:	84 2b       	or	r24, r20
 bec:	8c 93       	st	X, r24
 bee:	32 c0       	rjmp	.+100    	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	89 83       	std	Y+1, r24	; 0x01
 bf4:	2f c0       	rjmp	.+94     	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTd :
            if(DIO_u8_INPUT==Get_Bit(DDRD, PinNumber))
 bf6:	e1 e3       	ldi	r30, 0x31	; 49
 bf8:	f0 e0       	ldi	r31, 0x00	; 0
 bfa:	80 81       	ld	r24, Z
 bfc:	28 2f       	mov	r18, r24
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	8b 81       	ldd	r24, Y+3	; 0x03
 c02:	88 2f       	mov	r24, r24
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	a9 01       	movw	r20, r18
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_SetPullupRes+0x176>
 c0a:	55 95       	asr	r21
 c0c:	47 95       	ror	r20
 c0e:	8a 95       	dec	r24
 c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_SetPullupRes+0x172>
 c12:	ca 01       	movw	r24, r20
 c14:	81 70       	andi	r24, 0x01	; 1
 c16:	90 70       	andi	r25, 0x00	; 0
 c18:	00 97       	sbiw	r24, 0x00	; 0
 c1a:	a1 f4       	brne	.+40     	; 0xc44 <DIO_SetPullupRes+0x1ac>
            {
                SET_BIT(PORTD, PinNumber);
 c1c:	a2 e3       	ldi	r26, 0x32	; 50
 c1e:	b0 e0       	ldi	r27, 0x00	; 0
 c20:	e2 e3       	ldi	r30, 0x32	; 50
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	80 81       	ld	r24, Z
 c26:	48 2f       	mov	r20, r24
 c28:	8b 81       	ldd	r24, Y+3	; 0x03
 c2a:	28 2f       	mov	r18, r24
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	81 e0       	ldi	r24, 0x01	; 1
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	02 2e       	mov	r0, r18
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_SetPullupRes+0x1a2>
 c36:	88 0f       	add	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	0a 94       	dec	r0
 c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_SetPullupRes+0x19e>
 c3e:	84 2b       	or	r24, r20
 c40:	8c 93       	st	X, r24
 c42:	08 c0       	rjmp	.+16     	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 c44:	81 e0       	ldi	r24, 0x01	; 1
 c46:	89 83       	std	Y+1, r24	; 0x01
 c48:	05 c0       	rjmp	.+10     	; 0xc54 <DIO_SetPullupRes+0x1bc>
            }
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	89 83       	std	Y+1, r24	; 0x01
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <DIO_SetPullupRes+0x1bc>
    }	  //END OF IF

    else
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	89 83       	std	Y+1, r24	; 0x01
    } //END of ELSE
    return u8_ERROR_STAT ;
 c54:	89 81       	ldd	r24, Y+1	; 0x01
}
 c56:	0f 90       	pop	r0
 c58:	0f 90       	pop	r0
 c5a:	0f 90       	pop	r0
 c5c:	0f 90       	pop	r0
 c5e:	0f 90       	pop	r0
 c60:	cf 91       	pop	r28
 c62:	df 91       	pop	r29
 c64:	08 95       	ret

00000c66 <APP_Init>:
 * [Description]: 	Function to Initialize the application
 *
 *******************************************************************************/

void APP_Init(void)
{
 c66:	df 93       	push	r29
 c68:	cf 93       	push	r28
 c6a:	cd b7       	in	r28, 0x3d	; 61
 c6c:	de b7       	in	r29, 0x3e	; 62
	SPI_initSlave();//Initialize the SPI As Slave
 c6e:	0e 94 65 00 	call	0xca	; 0xca <SPI_initSlave>
	gu8_ReceiveData=SPI_recieveByte();//Receive data from spi
 c72:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_recieveByte>
 c76:	80 93 60 00 	sts	0x0060, r24


	DIO_setPortDirection(PORTc,DIO_u8_OUTPUT);//Initialize this port Output
 c7a:	82 e0       	ldi	r24, 0x02	; 2
 c7c:	6f ef       	ldi	r22, 0xFF	; 255
 c7e:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_setPortDirection>
	DIO_writePortValue(PORTc,gu8_ReceiveData);//Write this port value
 c82:	90 91 60 00 	lds	r25, 0x0060
 c86:	82 e0       	ldi	r24, 0x02	; 2
 c88:	69 2f       	mov	r22, r25
 c8a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <DIO_writePortValue>

}
 c8e:	cf 91       	pop	r28
 c90:	df 91       	pop	r29
 c92:	08 95       	ret

00000c94 <main>:
#include"APP/APP.h"
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/
int main()
{
 c94:	df 93       	push	r29
 c96:	cf 93       	push	r28
 c98:	cd b7       	in	r28, 0x3d	; 61
 c9a:	de b7       	in	r29, 0x3e	; 62
/********************************************************************************
*                           SYSTEM INITIALIZATION                              *
********************************************************************************/
	APP_Init();
 c9c:	0e 94 33 06 	call	0xc66	; 0xc66 <APP_Init>
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	90 e0       	ldi	r25, 0x00	; 0
}
 ca4:	cf 91       	pop	r28
 ca6:	df 91       	pop	r29
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
