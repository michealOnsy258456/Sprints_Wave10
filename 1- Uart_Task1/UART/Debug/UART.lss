
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800060  00800060  0000053c  2**0
                  ALLOC
  2 .stab         00000b34  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da5  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  74:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_VidInit>:
 *
 * @return function error state.
 *
 */
UART_ERROR_state_t  UART_VidInit(UART_Config *a_ptr,uint16_t a_BoudRate)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <UART_VidInit+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <UART_VidInit+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	7c 83       	std	Y+4, r23	; 0x04
  90:	6b 83       	std	Y+3, r22	; 0x03
	if(NULL_PTR == a_ptr)
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	19 f4       	brne	.+6      	; 0xa0 <UART_VidInit+0x24>
	{
		return E_UART_NULL_PTR;
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	8d 83       	std	Y+5, r24	; 0x05
  9e:	0c c1       	rjmp	.+536    	; 0x2b8 <UART_VidInit+0x23c>
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	// Enable Transmit
	SET_BIT(UCSRB,TXEN);
  a0:	aa e2       	ldi	r26, 0x2A	; 42
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ea e2       	ldi	r30, 0x2A	; 42
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	8c 93       	st	X, r24
	//Enable Receive
	SET_BIT(UCSRB,RXEN);
  ae:	aa e2       	ldi	r26, 0x2A	; 42
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ea e2       	ldi	r30, 0x2A	; 42
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL); //To Write in Register UCSRC
  bc:	e0 e4       	ldi	r30, 0x40	; 64
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24

	if (a_ptr->Mode==UART_AsyncDouble)
  c4:	e9 81       	ldd	r30, Y+1	; 0x01
  c6:	fa 81       	ldd	r31, Y+2	; 0x02
  c8:	82 81       	ldd	r24, Z+2	; 0x02
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	69 f5       	brne	.+90     	; 0x128 <UART_VidInit+0xac>
	{
		UCSRA |=  (1<<U2X);
  ce:	ab e2       	ldi	r26, 0x2B	; 43
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	eb e2       	ldi	r30, 0x2B	; 43
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8c 93       	st	X, r24
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
  dc:	a0 e4       	ldi	r26, 0x40	; 64
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e0 e4       	ldi	r30, 0x40	; 64
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	28 2f       	mov	r18, r24
  e8:	29 7f       	andi	r18, 0xF9	; 249
  ea:	e9 81       	ldd	r30, Y+1	; 0x01
  ec:	fa 81       	ldd	r31, Y+2	; 0x02
  ee:	81 81       	ldd	r24, Z+1	; 0x01
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	83 70       	andi	r24, 0x03	; 3
  f6:	90 70       	andi	r25, 0x00	; 0
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	82 2b       	or	r24, r18
  fe:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ1);
 100:	aa e2       	ldi	r26, 0x2A	; 42
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ea e2       	ldi	r30, 0x2A	; 42
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	28 2f       	mov	r18, r24
 10c:	2b 7f       	andi	r18, 0xFB	; 251
 10e:	e9 81       	ldd	r30, Y+1	; 0x01
 110:	fa 81       	ldd	r31, Y+2	; 0x02
 112:	81 81       	ldd	r24, Z+1	; 0x01
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	84 70       	andi	r24, 0x04	; 4
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	82 2b       	or	r24, r18
 126:	8c 93       	st	X, r24
	}

	if (a_ptr->Mode != UART_Sync)
 128:	e9 81       	ldd	r30, Y+1	; 0x01
 12a:	fa 81       	ldd	r31, Y+2	; 0x02
 12c:	82 81       	ldd	r24, Z+2	; 0x02
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	09 f4       	brne	.+2      	; 0x134 <UART_VidInit+0xb8>
 132:	4d c0       	rjmp	.+154    	; 0x1ce <UART_VidInit+0x152>
	{
		//parity
		UCSRC=(UCSRC & 0xCF)|((a_ptr->Parity)<<UPM0);
 134:	a0 e4       	ldi	r26, 0x40	; 64
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e0 e4       	ldi	r30, 0x40	; 64
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	28 2f       	mov	r18, r24
 140:	2f 7c       	andi	r18, 0xCF	; 207
 142:	e9 81       	ldd	r30, Y+1	; 0x01
 144:	fa 81       	ldd	r31, Y+2	; 0x02
 146:	83 81       	ldd	r24, Z+3	; 0x03
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	82 95       	swap	r24
 14e:	92 95       	swap	r25
 150:	90 7f       	andi	r25, 0xF0	; 240
 152:	98 27       	eor	r25, r24
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	98 27       	eor	r25, r24
 158:	82 2b       	or	r24, r18
 15a:	8c 93       	st	X, r24
		//StopBit
		UCSRC|=(a_ptr->StopBit)<<USBS;
 15c:	a0 e4       	ldi	r26, 0x40	; 64
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e0 e4       	ldi	r30, 0x40	; 64
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	28 2f       	mov	r18, r24
 168:	e9 81       	ldd	r30, Y+1	; 0x01
 16a:	fa 81       	ldd	r31, Y+2	; 0x02
 16c:	80 81       	ld	r24, Z
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	82 2b       	or	r24, r18
 180:	8c 93       	st	X, r24
		// Character Size
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
 182:	a0 e4       	ldi	r26, 0x40	; 64
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e0 e4       	ldi	r30, 0x40	; 64
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	28 2f       	mov	r18, r24
 18e:	29 7f       	andi	r18, 0xF9	; 249
 190:	e9 81       	ldd	r30, Y+1	; 0x01
 192:	fa 81       	ldd	r31, Y+2	; 0x02
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	88 2f       	mov	r24, r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	83 70       	andi	r24, 0x03	; 3
 19c:	90 70       	andi	r25, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	82 2b       	or	r24, r18
 1a4:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ2);
 1a6:	aa e2       	ldi	r26, 0x2A	; 42
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	ea e2       	ldi	r30, 0x2A	; 42
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	28 2f       	mov	r18, r24
 1b2:	2b 7f       	andi	r18, 0xFB	; 251
 1b4:	e9 81       	ldd	r30, Y+1	; 0x01
 1b6:	fa 81       	ldd	r31, Y+2	; 0x02
 1b8:	81 81       	ldd	r24, Z+1	; 0x01
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	84 70       	andi	r24, 0x04	; 4
 1c0:	90 70       	andi	r25, 0x00	; 0
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	82 2b       	or	r24, r18
 1cc:	8c 93       	st	X, r24
	}
	//BoudRate
	if (a_ptr->Mode == UART_AsyncNormal)
 1ce:	e9 81       	ldd	r30, Y+1	; 0x01
 1d0:	fa 81       	ldd	r31, Y+2	; 0x02
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	88 23       	and	r24, r24
 1d6:	29 f5       	brne	.+74     	; 0x222 <UART_VidInit+0x1a6>
	{
		a_BoudRate= (((F_CPU / (a_BoudRate * 16UL))) - 1);
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	9c 81       	ldd	r25, Y+4	; 0x04
 1dc:	cc 01       	movw	r24, r24
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	9c 01       	movw	r18, r24
 204:	ad 01       	movw	r20, r26
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	92 e1       	ldi	r25, 0x12	; 18
 20a:	aa e7       	ldi	r26, 0x7A	; 122
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	0e 94 40 02 	call	0x480	; 0x480 <__udivmodsi4>
 216:	da 01       	movw	r26, r20
 218:	c9 01       	movw	r24, r18
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	9c 83       	std	Y+4, r25	; 0x04
 21e:	8b 83       	std	Y+3, r24	; 0x03
 220:	3f c0       	rjmp	.+126    	; 0x2a0 <UART_VidInit+0x224>
	}
	else if (a_ptr->Mode == UART_AsyncDouble)
 222:	e9 81       	ldd	r30, Y+1	; 0x01
 224:	fa 81       	ldd	r31, Y+2	; 0x02
 226:	82 81       	ldd	r24, Z+2	; 0x02
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	09 f5       	brne	.+66     	; 0x26e <UART_VidInit+0x1f2>
	{
		a_BoudRate= (((F_CPU / (a_BoudRate * 8UL))) - 1);
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	cc 01       	movw	r24, r24
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	aa 1f       	adc	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	9c 01       	movw	r18, r24
 250:	ad 01       	movw	r20, r26
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	92 e1       	ldi	r25, 0x12	; 18
 256:	aa e7       	ldi	r26, 0x7A	; 122
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	0e 94 40 02 	call	0x480	; 0x480 <__udivmodsi4>
 262:	da 01       	movw	r26, r20
 264:	c9 01       	movw	r24, r18
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
 26c:	19 c0       	rjmp	.+50     	; 0x2a0 <UART_VidInit+0x224>
	}
	else if (a_ptr->Mode == UART_Sync)
 26e:	e9 81       	ldd	r30, Y+1	; 0x01
 270:	fa 81       	ldd	r31, Y+2	; 0x02
 272:	82 81       	ldd	r24, Z+2	; 0x02
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	a1 f4       	brne	.+40     	; 0x2a0 <UART_VidInit+0x224>
	{
		a_BoudRate= ((F_CPU/(2*a_BoudRate))-1);
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	9c 01       	movw	r18, r24
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	92 e1       	ldi	r25, 0x12	; 18
 28a:	aa e7       	ldi	r26, 0x7A	; 122
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	bc 01       	movw	r22, r24
 290:	cd 01       	movw	r24, r26
 292:	0e 94 40 02 	call	0x480	; 0x480 <__udivmodsi4>
 296:	da 01       	movw	r26, r20
 298:	c9 01       	movw	r24, r18
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	9c 83       	std	Y+4, r25	; 0x04
 29e:	8b 83       	std	Y+3, r24	; 0x03
	}
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL=a_BoudRate;
 2a0:	e9 e2       	ldi	r30, 0x29	; 41
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	80 83       	st	Z, r24
	UBRRH=(a_BoudRate>>8);
 2a8:	e0 e4       	ldi	r30, 0x40	; 64
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	9c 81       	ldd	r25, Y+4	; 0x04
 2b0:	89 2f       	mov	r24, r25
 2b2:	99 27       	eor	r25, r25
 2b4:	80 83       	st	Z, r24


	return E_UART_SUCCESS;
 2b6:	1d 82       	std	Y+5, r1	; 0x05
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	cf 91       	pop	r28
 2c6:	df 91       	pop	r29
 2c8:	08 95       	ret

000002ca <UART_recieveByte>:
uint8_t UART_recieveByte(void)
{
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(!(UCSRA & (1<<RXC)));
 2d2:	eb e2       	ldi	r30, 0x2B	; 43
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	88 23       	and	r24, r24
 2da:	dc f7       	brge	.-10     	; 0x2d2 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	return UDR;
 2dc:	ec e2       	ldi	r30, 0x2C	; 44
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
}
 2e2:	cf 91       	pop	r28
 2e4:	df 91       	pop	r29
 2e6:	08 95       	ret

000002e8 <UART_sendByte>:
 * @param [in]  a_Data      -  character to be send through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t UART_sendByte(const uint8_t a_Data)
{
 2e8:	df 93       	push	r29
 2ea:	cf 93       	push	r28
 2ec:	0f 92       	push	r0
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	89 83       	std	Y+1, r24	; 0x01

	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR=a_Data;
 2f4:	ec e2       	ldi	r30, 0x2C	; 44
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	80 83       	st	Z, r24
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(!(UCSRA & (1<<UDRE)));
 2fc:	eb e2       	ldi	r30, 0x2B	; 43
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	80 72       	andi	r24, 0x20	; 32
 308:	90 70       	andi	r25, 0x00	; 0
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	b9 f3       	breq	.-18     	; 0x2fc <UART_sendByte+0x14>

	return E_UART_SUCCESS;
 30e:	80 e0       	ldi	r24, 0x00	; 0

}
 310:	0f 90       	pop	r0
 312:	cf 91       	pop	r28
 314:	df 91       	pop	r29
 316:	08 95       	ret

00000318 <UART_sendString>:
 * @param [in]  Str    -  pointer to string to send through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t  UART_sendString(const uint8_t *Str)
{
 318:	df 93       	push	r29
 31a:	cf 93       	push	r28
 31c:	00 d0       	rcall	.+0      	; 0x31e <UART_sendString+0x6>
 31e:	00 d0       	rcall	.+0      	; 0x320 <UART_sendString+0x8>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	9b 83       	std	Y+3, r25	; 0x03
 326:	8a 83       	std	Y+2, r24	; 0x02
	/* making sure an initialized pointer is sent to the function */

	if(NULL_PTR == Str)
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	9b 81       	ldd	r25, Y+3	; 0x03
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	19 f4       	brne	.+6      	; 0x336 <UART_sendString+0x1e>
	{
		return E_UART_NULL_PTR;
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	8c 83       	std	Y+4, r24	; 0x04
 334:	1c c0       	rjmp	.+56     	; 0x36e <UART_sendString+0x56>
	}
	uint8_t i = 0;
 336:	19 82       	std	Y+1, r1	; 0x01
 338:	0e c0       	rjmp	.+28     	; 0x356 <UART_sendString+0x3e>
	/* keeps sending data until it finds an end of string character in the string */

	while(Str[i] != '\0')
	{
		/* Put data into Str, sends the data */
		UART_sendByte(Str[i]);
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	fc 01       	movw	r30, r24
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	80 81       	ld	r24, Z
 34c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_sendByte>
		i++;
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	89 83       	std	Y+1, r24	; 0x01
		return E_UART_NULL_PTR;
	}
	uint8_t i = 0;
	/* keeps sending data until it finds an end of string character in the string */

	while(Str[i] != '\0')
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	9b 81       	ldd	r25, Y+3	; 0x03
 360:	fc 01       	movw	r30, r24
 362:	e2 0f       	add	r30, r18
 364:	f3 1f       	adc	r31, r19
 366:	80 81       	ld	r24, Z
 368:	88 23       	and	r24, r24
 36a:	39 f7       	brne	.-50     	; 0x33a <UART_sendString+0x22>
		/* Put data into Str, sends the data */
		UART_sendByte(Str[i]);
		i++;
	}
	/* return success status */
	return E_UART_SUCCESS;
 36c:	1c 82       	std	Y+4, r1	; 0x04
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <UART_receiveString>:
 * @param [out] Str    -  pointer to string to save the string through UART.
 *
 * @return function error state.
 */
UART_ERROR_state_t  UART_receiveString(uint8_t *Str)
{
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	df 93       	push	r29
 384:	cf 93       	push	r28
 386:	00 d0       	rcall	.+0      	; 0x388 <UART_receiveString+0xa>
 388:	00 d0       	rcall	.+0      	; 0x38a <UART_receiveString+0xc>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	9b 83       	std	Y+3, r25	; 0x03
 390:	8a 83       	std	Y+2, r24	; 0x02

	/* making sure an initialized pointer is sent to the function */
	if(NULL_PTR == Str)
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	9b 81       	ldd	r25, Y+3	; 0x03
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	19 f4       	brne	.+6      	; 0x3a0 <UART_receiveString+0x22>
	{
		return E_UART_NULL_PTR;
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	8c 83       	std	Y+4, r24	; 0x04
 39e:	32 c0       	rjmp	.+100    	; 0x404 <UART_receiveString+0x86>
	}
	uint8_t i = 0;
 3a0:	19 82       	std	Y+1, r1	; 0x01
	/* Wait for data to be received it */
	Str[i] = UART_recieveByte();
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	9b 81       	ldd	r25, Y+3	; 0x03
 3ac:	8c 01       	movw	r16, r24
 3ae:	02 0f       	add	r16, r18
 3b0:	13 1f       	adc	r17, r19
 3b2:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_recieveByte>
 3b6:	f8 01       	movw	r30, r16
 3b8:	80 83       	st	Z, r24
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <UART_receiveString+0x5c>
	while(Str[i] != NEW_LINE)
	{
		i++;
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for data to be received it */
		Str[i] = UART_recieveByte();
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	9b 81       	ldd	r25, Y+3	; 0x03
 3cc:	8c 01       	movw	r16, r24
 3ce:	02 0f       	add	r16, r18
 3d0:	13 1f       	adc	r17, r19
 3d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_recieveByte>
 3d6:	f8 01       	movw	r30, r16
 3d8:	80 83       	st	Z, r24
		return E_UART_NULL_PTR;
	}
	uint8_t i = 0;
	/* Wait for data to be received it */
	Str[i] = UART_recieveByte();
	while(Str[i] != NEW_LINE)
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	9b 81       	ldd	r25, Y+3	; 0x03
 3e4:	fc 01       	movw	r30, r24
 3e6:	e2 0f       	add	r30, r18
 3e8:	f3 1f       	adc	r31, r19
 3ea:	80 81       	ld	r24, Z
 3ec:	8d 30       	cpi	r24, 0x0D	; 13
 3ee:	31 f7       	brne	.-52     	; 0x3bc <UART_receiveString+0x3e>
	{
		i++;
		/* Wait for data to be received it */
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	9b 81       	ldd	r25, Y+3	; 0x03
 3fa:	fc 01       	movw	r30, r24
 3fc:	e2 0f       	add	r30, r18
 3fe:	f3 1f       	adc	r31, r19
 400:	10 82       	st	Z, r1

	/* return success status */
	return E_UART_SUCCESS;
 402:	1c 82       	std	Y+4, r1	; 0x04
 404:	8c 81       	ldd	r24, Y+4	; 0x04
}
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <APP_Init>:
 * [Description]: 	Function to Initialize the application
 *
 *******************************************************************************/

void APP_Init(void)
{
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <APP_Init+0x6>
 41e:	00 d0       	rcall	.+0      	; 0x420 <APP_Init+0x8>
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
	UART_Config config={UART_1StopBit,UART_8Bit,UART_AsyncDouble,UART_Disable};// configuration of UART driver
 424:	19 82       	std	Y+1, r1	; 0x01
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	8a 83       	std	Y+2, r24	; 0x02
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	8b 83       	std	Y+3, r24	; 0x03
 42e:	1c 82       	std	Y+4, r1	; 0x04
	UART_VidInit(&config,9600); // initialize UART driver
 430:	ce 01       	movw	r24, r28
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	60 e8       	ldi	r22, 0x80	; 128
 436:	75 e2       	ldi	r23, 0x25	; 37
 438:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_VidInit>
}
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	cf 91       	pop	r28
 446:	df 91       	pop	r29
 448:	08 95       	ret

0000044a <APP_Update>:
 *
 * [Description]: 	Function to update the state of the application
 *
 *******************************************************************************/
void APP_Update(void)
{
 44a:	df 93       	push	r29
 44c:	cf 93       	push	r28
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(gu8_ReceiverBuffer); // Receive data from Uart
 452:	80 e6       	ldi	r24, 0x60	; 96
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 bf 01 	call	0x37e	; 0x37e <UART_receiveString>
	UART_sendString(gu8_ReceiverBuffer);    // Sent data from Uart
 45a:	80 e6       	ldi	r24, 0x60	; 96
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 8c 01 	call	0x318	; 0x318 <UART_sendString>
	UART_sendByte('\r');   				    // sent newline 
 462:	8d e0       	ldi	r24, 0x0D	; 13
 464:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_sendByte>
}
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	08 95       	ret

0000046e <main>:
#include"APP/APP.h"
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/
int main()
{
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
/********************************************************************************
*                           SYSTEM INITIALIZATION                              *
********************************************************************************/
	APP_Init();
 476:	0e 94 0c 02 	call	0x418	; 0x418 <APP_Init>
	while(1)
	{
/********************************************************************************
*                        APPLICATION	(SUPER LOOP)						    *
********************************************************************************/
		APP_Update();
 47a:	0e 94 25 02 	call	0x44a	; 0x44a <APP_Update>
 47e:	fd cf       	rjmp	.-6      	; 0x47a <main+0xc>

00000480 <__udivmodsi4>:
 480:	a1 e2       	ldi	r26, 0x21	; 33
 482:	1a 2e       	mov	r1, r26
 484:	aa 1b       	sub	r26, r26
 486:	bb 1b       	sub	r27, r27
 488:	fd 01       	movw	r30, r26
 48a:	0d c0       	rjmp	.+26     	; 0x4a6 <__udivmodsi4_ep>

0000048c <__udivmodsi4_loop>:
 48c:	aa 1f       	adc	r26, r26
 48e:	bb 1f       	adc	r27, r27
 490:	ee 1f       	adc	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	a2 17       	cp	r26, r18
 496:	b3 07       	cpc	r27, r19
 498:	e4 07       	cpc	r30, r20
 49a:	f5 07       	cpc	r31, r21
 49c:	20 f0       	brcs	.+8      	; 0x4a6 <__udivmodsi4_ep>
 49e:	a2 1b       	sub	r26, r18
 4a0:	b3 0b       	sbc	r27, r19
 4a2:	e4 0b       	sbc	r30, r20
 4a4:	f5 0b       	sbc	r31, r21

000004a6 <__udivmodsi4_ep>:
 4a6:	66 1f       	adc	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	1a 94       	dec	r1
 4b0:	69 f7       	brne	.-38     	; 0x48c <__udivmodsi4_loop>
 4b2:	60 95       	com	r22
 4b4:	70 95       	com	r23
 4b6:	80 95       	com	r24
 4b8:	90 95       	com	r25
 4ba:	9b 01       	movw	r18, r22
 4bc:	ac 01       	movw	r20, r24
 4be:	bd 01       	movw	r22, r26
 4c0:	cf 01       	movw	r24, r30
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
