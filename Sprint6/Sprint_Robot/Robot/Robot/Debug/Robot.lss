
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000015c2  00001656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008000a4  008000a4  0000169a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d39  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001361  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e7f  00000000  00000000  00006aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  0000893c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000138b  00000000  00000000  00009244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002264  00000000  00000000  0000a5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_1>
       8:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_2>
       c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 04 	call	0x854	; 0x854 <main>
      8a:	0c 94 df 0a 	jmp	0x15be	; 0x15be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Get_Distance>:
}

void Get_Distance(void)
{

	if (MCUCSR & (1<<ISC2))
      92:	04 b6       	in	r0, 0x34	; 52
      94:	06 fe       	sbrs	r0, 6
      96:	0a c0       	rjmp	.+20     	; 0xac <Get_Distance+0x1a>
	{	
		Status  =0 ;
      98:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <Status>
		MCUCSR &= ~(1<<ISC2);
      9c:	84 b7       	in	r24, 0x34	; 52
      9e:	8f 7b       	andi	r24, 0xBF	; 191
      a0:	84 bf       	out	0x34, r24	; 52
		TIM_Start(&TIMConfig);
      a2:	80 e6       	ldi	r24, 0x60	; 96
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	0e 94 b8 05 	call	0xb70	; 0xb70 <TIM_Start>
      aa:	08 95       	ret
	}else{

		Distance = (TCNT1) * 0.034/4  ;
      ac:	6c b5       	in	r22, 0x2c	; 44
      ae:	7d b5       	in	r23, 0x2d	; 45
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__floatunsisf>
      b8:	26 e9       	ldi	r18, 0x96	; 150
      ba:	33 e4       	ldi	r19, 0x43	; 67
      bc:	4b e0       	ldi	r20, 0x0B	; 11
      be:	5d e3       	ldi	r21, 0x3D	; 61
      c0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__mulsf3>
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	40 e8       	ldi	r20, 0x80	; 128
      ca:	5e e3       	ldi	r21, 0x3E	; 62
      cc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__mulsf3>
      d0:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fixunssfsi>
      d4:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <Distance+0x1>
      d8:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <Distance>
		TIM_Stop(TIM1);
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIM_Stop>
		Status  =1 ;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Status>
		MCUCSR |= (1<<ISC2);
      e8:	84 b7       	in	r24, 0x34	; 52
      ea:	80 64       	ori	r24, 0x40	; 64
      ec:	84 bf       	out	0x34, r24	; 52
		TCNT1 = 0 ; 
      ee:	1d bc       	out	0x2d, r1	; 45
      f0:	1c bc       	out	0x2c, r1	; 44
      f2:	08 95       	ret

000000f4 <APP_Init>:
void RobotMoving_SM(void);	 
void APP_Init(void)
{
	
	//Ultrasonic_Init(	&Ultrasonic_PINS );
	Motor_Init() ;
      f4:	0e 94 18 03 	call	0x630	; 0x630 <Motor_Init>
	EXTI_Init(&EXIT_Handler);
      f8:	8a e6       	ldi	r24, 0x6A	; 106
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 2f 04 	call	0x85e	; 0x85e <EXTI_Init>
	TIM_NormalModeInit(&TIMConfig);
     100:	80 e6       	ldi	r24, 0x60	; 96
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 fd 04 	call	0x9fa	; 0x9fa <TIM_NormalModeInit>
	EXIT_INT2_CallBack(Get_Distance);
     108:	89 e4       	ldi	r24, 0x49	; 73
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EXIT_INT2_CallBack>
	LCD_Initializaion();
     110:	0e 94 08 02 	call	0x410	; 0x410 <LCD_Initializaion>
	DDRB |= 0x02 ;
     114:	87 b3       	in	r24, 0x17	; 23
     116:	82 60       	ori	r24, 0x02	; 2
     118:	87 bb       	out	0x17, r24	; 23
	sei();
     11a:	78 94       	sei
	LCD_Send_Character_WithLoc(1,1,'B');
     11c:	42 e4       	ldi	r20, 0x42	; 66
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LCD_Send_Character_WithLoc>
     126:	08 95       	ret

00000128 <UltrasonicTriggerDistance>:

void UltrasonicTriggerDistance(void)
{
	

		PORTB |= 0x02 ;
     128:	88 b3       	in	r24, 0x18	; 24
     12a:	82 60       	ori	r24, 0x02	; 2
     12c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12e:	85 e3       	ldi	r24, 0x35	; 53
     130:	8a 95       	dec	r24
     132:	f1 f7       	brne	.-4      	; 0x130 <UltrasonicTriggerDistance+0x8>
     134:	00 00       	nop
		_delay_us(10);
		PORTB = 0 ;
     136:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	8f e3       	ldi	r24, 0x3F	; 63
     13a:	9c e9       	ldi	r25, 0x9C	; 156
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <UltrasonicTriggerDistance+0x14>
     140:	00 c0       	rjmp	.+0      	; 0x142 <UltrasonicTriggerDistance+0x1a>
     142:	00 00       	nop
		_delay_ms(10);
		while(!Status);	// wait until data to be ready
     144:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Status>
     148:	88 23       	and	r24, r24
     14a:	e1 f3       	breq	.-8      	; 0x144 <UltrasonicTriggerDistance+0x1c>

}
     14c:	08 95       	ret

0000014e <RobotMoving_SM>:
	
	
while(1)
{
	static uint8_t InerLoop = 0 ; 
	switch(State)
     14e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	b9 f0       	breq	.+46     	; 0x184 <RobotMoving_SM+0x36>
     156:	20 f0       	brcs	.+8      	; 0x160 <RobotMoving_SM+0x12>
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	09 f4       	brne	.+2      	; 0x15e <RobotMoving_SM+0x10>
     15c:	41 c0       	rjmp	.+130    	; 0x1e0 <RobotMoving_SM+0x92>
     15e:	69 c0       	rjmp	.+210    	; 0x232 <RobotMoving_SM+0xe4>

			}
				_delay_ms(1);
				LCD_Send_Command(0x01);
		}
		State = STATE_FORWARD ; 
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
		LCD_Send_String_WithLoc(1,1,"Exit Reset");
     166:	4c e8       	ldi	r20, 0x8C	; 140
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	61 e0       	ldi	r22, 0x01	; 1
     16c:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_Send_String_WithLoc>
     170:	2f ef       	ldi	r18, 0xFF	; 255
     172:	83 e2       	ldi	r24, 0x23	; 35
     174:	94 ef       	ldi	r25, 0xF4	; 244
     176:	21 50       	subi	r18, 0x01	; 1
     178:	80 40       	sbci	r24, 0x00	; 0
     17a:	90 40       	sbci	r25, 0x00	; 0
     17c:	e1 f7       	brne	.-8      	; 0x176 <RobotMoving_SM+0x28>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <RobotMoving_SM+0x32>
     180:	00 00       	nop
     182:	57 c0       	rjmp	.+174    	; 0x232 <RobotMoving_SM+0xe4>
		_delay_ms(5000) ;
			break;
			
			case STATE_FORWARD :     // Forward state  
					
					UltrasonicTriggerDistance();
     184:	0e 94 94 00 	call	0x128	; 0x128 <UltrasonicTriggerDistance>
					LCD_Send_Integer_WithLoc(1,1,Distance,6);
     188:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <Distance>
     18c:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <Distance+0x1>
     190:	26 e0       	ldi	r18, 0x06	; 6
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Send_Integer_WithLoc>
					if (Distance > Distance_50)
     19a:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Distance>
     19e:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <Distance+0x1>
     1a2:	83 33       	cpi	r24, 0x33	; 51
     1a4:	91 05       	cpc	r25, r1
     1a6:	38 f0       	brcs	.+14     	; 0x1b6 <RobotMoving_SM+0x68>
					{
						Speed = Speed_30 ;
     1a8:	8e e1       	ldi	r24, 0x1E	; 30
     1aa:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <Speed>
						State = STATE_FORWARD;	
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
     1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <RobotMoving_SM+0x86>
					}else if((Distance >= Distance_30 )&&(Distance <= Distance_50))
     1b6:	4e 97       	sbiw	r24, 0x1e	; 30
     1b8:	45 97       	sbiw	r24, 0x15	; 21
     1ba:	38 f4       	brcc	.+14     	; 0x1ca <RobotMoving_SM+0x7c>
					{
						Speed = Speed_80 ;
     1bc:	80 e5       	ldi	r24, 0x50	; 80
     1be:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <Speed>
						State = STATE_FORWARD;	
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <RobotMoving_SM+0x86>
					}else
					{
						Speed  = 0  ;
     1ca:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <Speed>
						State = STATE_RIGHT ; // jump to right state 
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
					}
					Motor_Dir(DIR_FORWARD , Speed) ;
     1d4:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <Speed>
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Motor_Dir>
						
				break;
     1de:	29 c0       	rjmp	.+82     	; 0x232 <RobotMoving_SM+0xe4>
			
		case  STATE_RIGHT :			// Right state 
				// turn right and  temp stop
						Motor_Dir(DIR_RIGHT , 60) ;
     1e0:	6c e3       	ldi	r22, 0x3C	; 60
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Motor_Dir>
     1e8:	2f ef       	ldi	r18, 0xFF	; 255
     1ea:	83 ec       	ldi	r24, 0xC3	; 195
     1ec:	99 e0       	ldi	r25, 0x09	; 9
     1ee:	21 50       	subi	r18, 0x01	; 1
     1f0:	80 40       	sbci	r24, 0x00	; 0
     1f2:	90 40       	sbci	r25, 0x00	; 0
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <RobotMoving_SM+0xa0>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <RobotMoving_SM+0xaa>
     1f8:	00 00       	nop
						_delay_ms(200);			
						Motor_Dir(DIR_RIGHT , 0) ;				
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Motor_Dir>
     202:	2f ef       	ldi	r18, 0xFF	; 255
     204:	89 e6       	ldi	r24, 0x69	; 105
     206:	98 e1       	ldi	r25, 0x18	; 24
     208:	21 50       	subi	r18, 0x01	; 1
     20a:	80 40       	sbci	r24, 0x00	; 0
     20c:	90 40       	sbci	r25, 0x00	; 0
     20e:	e1 f7       	brne	.-8      	; 0x208 <RobotMoving_SM+0xba>
     210:	00 c0       	rjmp	.+0      	; 0x212 <RobotMoving_SM+0xc4>
     212:	00 00       	nop
						_delay_ms(500);
						UltrasonicTriggerDistance();							// jump to forward state 
     214:	0e 94 94 00 	call	0x128	; 0x128 <UltrasonicTriggerDistance>
				if(Distance >= Distance_30 )
     218:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Distance>
     21c:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <Distance+0x1>
     220:	4e 97       	sbiw	r24, 0x1e	; 30
     222:	20 f0       	brcs	.+8      	; 0x22c <RobotMoving_SM+0xde>
				{
					State = STATE_FORWARD ; 
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
     22a:	03 c0       	rjmp	.+6      	; 0x232 <RobotMoving_SM+0xe4>
				}else
				{
					State = STATE_RIGHT ; 		// still wait in this state 			
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
     232:	8f e3       	ldi	r24, 0x3F	; 63
     234:	9c e9       	ldi	r25, 0x9C	; 156
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <RobotMoving_SM+0xe8>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <RobotMoving_SM+0xee>
     23c:	00 00       	nop
     23e:	87 cf       	rjmp	.-242    	; 0x14e <RobotMoving_SM>

00000240 <APP_UPdate>:
uint16_t   Distance ;

void APP_UPdate(void)
{

		RobotMoving_SM();
     240:	0e 94 a7 00 	call	0x14e	; 0x14e <RobotMoving_SM>

00000244 <LCD_Triger_Enable>:
	LCD_Send_Character_CurrLoc('.');
	LCD_Send_Integer_CurrLoc(decimalValue,5);
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Float_Withloc()*/
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cc e6       	ldi	r28, 0x6C	; 108
     24a:	d0 e0       	ldi	r29, 0x00	; 0
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	68 85       	ldd	r22, Y+8	; 0x08
     250:	8e 81       	ldd	r24, Y+6	; 0x06
     252:	9f 81       	ldd	r25, Y+7	; 0x07
     254:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     258:	85 e0       	ldi	r24, 0x05	; 5
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_Triger_Enable+0x16>
     25e:	00 00       	nop
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	68 85       	ldd	r22, Y+8	; 0x08
     264:	8e 81       	ldd	r24, Y+6	; 0x06
     266:	9f 81       	ldd	r25, Y+7	; 0x07
     268:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9f e1       	ldi	r25, 0x1F	; 31
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <LCD_Triger_Enable+0x2c>
     274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_Triger_Enable+0x32>
     276:	00 00       	nop
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <LCD_Send_4BitData>:
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	c8 2f       	mov	r28, r24
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	23 c0       	rjmp	.+70     	; 0x2d2 <LCD_Send_4BitData+0x54>
     28c:	8c 01       	movw	r16, r24
     28e:	0f 5f       	subi	r16, 0xFF	; 255
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	41 e0       	ldi	r20, 0x01	; 1
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	00 2e       	mov	r0, r16
     298:	02 c0       	rjmp	.+4      	; 0x29e <LCD_Send_4BitData+0x20>
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	0a 94       	dec	r0
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <LCD_Send_4BitData+0x1c>
     2a2:	2c 2f       	mov	r18, r28
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	42 23       	and	r20, r18
     2a8:	53 23       	and	r21, r19
     2aa:	00 2e       	mov	r0, r16
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <LCD_Send_4BitData+0x34>
     2ae:	55 95       	asr	r21
     2b0:	47 95       	ror	r20
     2b2:	0a 94       	dec	r0
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <LCD_Send_4BitData+0x30>
     2b6:	fc 01       	movw	r30, r24
     2b8:	ee 0f       	add	r30, r30
     2ba:	ff 1f       	adc	r31, r31
     2bc:	8e 0f       	add	r24, r30
     2be:	9f 1f       	adc	r25, r31
     2c0:	fc 01       	movw	r30, r24
     2c2:	e4 59       	subi	r30, 0x94	; 148
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	62 81       	ldd	r22, Z+2	; 0x02
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     2d0:	c8 01       	movw	r24, r16
     2d2:	87 30       	cpi	r24, 0x07	; 7
     2d4:	91 05       	cpc	r25, r1
     2d6:	d4 f2       	brlt	.-76     	; 0x28c <LCD_Send_4BitData+0xe>
     2d8:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Triger_Enable>
     2dc:	03 e0       	ldi	r16, 0x03	; 3
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	21 c0       	rjmp	.+66     	; 0x324 <LCD_Send_4BitData+0xa6>
     2e2:	c8 01       	movw	r24, r16
     2e4:	03 97       	sbiw	r24, 0x03	; 3
     2e6:	41 e0       	ldi	r20, 0x01	; 1
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <LCD_Send_4BitData+0x74>
     2ee:	44 0f       	add	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <LCD_Send_4BitData+0x70>
     2f6:	2c 2f       	mov	r18, r28
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	42 23       	and	r20, r18
     2fc:	53 23       	and	r21, r19
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <LCD_Send_4BitData+0x86>
     300:	55 95       	asr	r21
     302:	47 95       	ror	r20
     304:	8a 95       	dec	r24
     306:	e2 f7       	brpl	.-8      	; 0x300 <LCD_Send_4BitData+0x82>
     308:	f8 01       	movw	r30, r16
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e0 0f       	add	r30, r16
     310:	f1 1f       	adc	r31, r17
     312:	e4 59       	subi	r30, 0x94	; 148
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	62 81       	ldd	r22, Z+2	; 0x02
     318:	80 81       	ld	r24, Z
     31a:	91 81       	ldd	r25, Z+1	; 0x01
     31c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     320:	0f 5f       	subi	r16, 0xFF	; 255
     322:	1f 4f       	sbci	r17, 0xFF	; 255
     324:	07 30       	cpi	r16, 0x07	; 7
     326:	11 05       	cpc	r17, r1
     328:	e4 f2       	brlt	.-72     	; 0x2e2 <LCD_Send_4BitData+0x64>
     32a:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Triger_Enable>
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	08 95       	ret

00000336 <LCD_Send_Character_CurrLoc>:
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	18 2f       	mov	r17, r24
     33e:	cc e6       	ldi	r28, 0x6C	; 108
     340:	d0 e0       	ldi	r29, 0x00	; 0
     342:	41 e0       	ldi	r20, 0x01	; 1
     344:	6a 81       	ldd	r22, Y+2	; 0x02
     346:	88 81       	ld	r24, Y
     348:	99 81       	ldd	r25, Y+1	; 0x01
     34a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	6d 81       	ldd	r22, Y+5	; 0x05
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     35a:	81 2f       	mov	r24, r17
     35c:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_Send_4BitData>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	08 95       	ret

0000036a <LCD_Send_Command>:
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	18 2f       	mov	r17, r24
     372:	cc e6       	ldi	r28, 0x6C	; 108
     374:	d0 e0       	ldi	r29, 0x00	; 0
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	6a 81       	ldd	r22, Y+2	; 0x02
     37a:	88 81       	ld	r24, Y
     37c:	99 81       	ldd	r25, Y+1	; 0x01
     37e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	6d 81       	ldd	r22, Y+5	; 0x05
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     38e:	81 2f       	mov	r24, r17
     390:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_Send_4BitData>
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	08 95       	ret

0000039e <LCD_Goto_Location>:
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <LCD_Goto_Location+0x6>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	90 e8       	ldi	r25, 0x80	; 128
     3aa:	99 83       	std	Y+1, r25	; 0x01
     3ac:	90 ec       	ldi	r25, 0xC0	; 192
     3ae:	9a 83       	std	Y+2, r25	; 0x02
     3b0:	e8 2f       	mov	r30, r24
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	8c 0f       	add	r24, r28
     3bc:	9d 1f       	adc	r25, r29
     3be:	e8 0f       	add	r30, r24
     3c0:	f9 1f       	adc	r31, r25
     3c2:	80 81       	ld	r24, Z
     3c4:	86 0f       	add	r24, r22
     3c6:	81 50       	subi	r24, 0x01	; 1
     3c8:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Send_Command>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <LCD_Send_Character_WithLoc>:
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	14 2f       	mov	r17, r20
     3e0:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_Goto_Location>
     3e4:	cc e6       	ldi	r28, 0x6C	; 108
     3e6:	d0 e0       	ldi	r29, 0x00	; 0
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	6a 81       	ldd	r22, Y+2	; 0x02
     3ec:	88 81       	ld	r24, Y
     3ee:	99 81       	ldd	r25, Y+1	; 0x01
     3f0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	6d 81       	ldd	r22, Y+5	; 0x05
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     400:	81 2f       	mov	r24, r17
     402:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_Send_4BitData>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	08 95       	ret

00000410 <LCD_Initializaion>:
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <LCD_Initializaion+0xa>
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	2f ef       	ldi	r18, 0xFF	; 255
     422:	89 ef       	ldi	r24, 0xF9	; 249
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	21 50       	subi	r18, 0x01	; 1
     428:	80 40       	sbci	r24, 0x00	; 0
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	e1 f7       	brne	.-8      	; 0x426 <LCD_Initializaion+0x16>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_Initializaion+0x20>
     430:	00 00       	nop
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	8a 83       	std	Y+2, r24	; 0x02
     436:	1b 82       	std	Y+3, r1	; 0x03
     438:	00 e0       	ldi	r16, 0x00	; 0
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	12 c0       	rjmp	.+36     	; 0x462 <LCD_Initializaion+0x52>
     43e:	f8 01       	movw	r30, r16
     440:	ee 0f       	add	r30, r30
     442:	ff 1f       	adc	r31, r31
     444:	e0 0f       	add	r30, r16
     446:	f1 1f       	adc	r31, r17
     448:	e4 59       	subi	r30, 0x94	; 148
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	be 01       	movw	r22, r28
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <HAL_GPIO_Pin_Init>
     45e:	0f 5f       	subi	r16, 0xFF	; 255
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	07 30       	cpi	r16, 0x07	; 7
     464:	11 05       	cpc	r17, r1
     466:	5c f3       	brlt	.-42     	; 0x43e <LCD_Initializaion+0x2e>
     468:	83 e3       	ldi	r24, 0x33	; 51
     46a:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Send_Command>
     46e:	82 e3       	ldi	r24, 0x32	; 50
     470:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Send_Command>
     474:	88 e2       	ldi	r24, 0x28	; 40
     476:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Send_Command>
     47a:	8c e0       	ldi	r24, 0x0C	; 12
     47c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Send_Command>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Send_Command>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <LCD_Send_String_WithLoc>:
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ea 01       	movw	r28, r20
     49e:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_Goto_Location>
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <LCD_Send_String_WithLoc+0x12>
     4a4:	21 96       	adiw	r28, 0x01	; 1
     4a6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Send_Character_CurrLoc>
     4aa:	88 81       	ld	r24, Y
     4ac:	81 11       	cpse	r24, r1
     4ae:	fa cf       	rjmp	.-12     	; 0x4a4 <LCD_Send_String_WithLoc+0xc>
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <LCD_Send_Integer_WithLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_WithLoc(uint8_t y, uint8_t x, uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
     4b6:	8f 92       	push	r8
     4b8:	9f 92       	push	r9
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	98 2e       	mov	r9, r24
     4d4:	86 2e       	mov	r8, r22
     4d6:	ca 01       	movw	r24, r20
	LCD_Send_String_WithLoc(y,x,StringToDisplay);
	
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_WithLoc()*/
     4d8:	ad b6       	in	r10, 0x3d	; 61
     4da:	be b6       	in	r11, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_WithLoc(uint8_t y, uint8_t x, uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
	uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */
     4dc:	e2 2e       	mov	r14, r18
     4de:	f1 2c       	mov	r15, r1
     4e0:	2d b7       	in	r18, 0x3d	; 61
     4e2:	3e b7       	in	r19, 0x3e	; 62
     4e4:	2e 19       	sub	r18, r14
     4e6:	3f 09       	sbc	r19, r15
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	3e bf       	out	0x3e, r19	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	2f 5f       	subi	r18, 0xFF	; 255
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
     4f6:	69 01       	movw	r12, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4f8:	4a e0       	ldi	r20, 0x0A	; 10
     4fa:	b9 01       	movw	r22, r18
     4fc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__itoa_ncheck>
	itoa(IntegerToDisplay,(char *)StringToDisplay,10); /* convert from int num. to char num. */
	for (uint16_t i=0;i<NumberOfDigits;i++)
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	05 c0       	rjmp	.+10     	; 0x510 <LCD_Send_Integer_WithLoc+0x5a>
		LCD_Send_Character_CurrLoc(' ');
     506:	80 e2       	ldi	r24, 0x20	; 32
     508:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Send_Character_CurrLoc>
 */
LCD_Status_t LCD_Send_Integer_WithLoc(uint8_t y, uint8_t x, uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
	uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */
	itoa(IntegerToDisplay,(char *)StringToDisplay,10); /* convert from int num. to char num. */
	for (uint16_t i=0;i<NumberOfDigits;i++)
     50c:	0f 5f       	subi	r16, 0xFF	; 255
     50e:	1f 4f       	sbci	r17, 0xFF	; 255
     510:	0e 15       	cp	r16, r14
     512:	1f 05       	cpc	r17, r15
     514:	c0 f3       	brcs	.-16     	; 0x506 <LCD_Send_Integer_WithLoc+0x50>
		LCD_Send_Character_CurrLoc(' ');
		
	LCD_Send_String_WithLoc(y,x,StringToDisplay);
     516:	a6 01       	movw	r20, r12
     518:	68 2d       	mov	r22, r8
     51a:	89 2d       	mov	r24, r9
     51c:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_Send_String_WithLoc>
	
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_WithLoc()*/
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	be be       	out	0x3e, r11	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	ad be       	out	0x3d, r10	; 61
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	df 90       	pop	r13
     53a:	cf 90       	pop	r12
     53c:	bf 90       	pop	r11
     53e:	af 90       	pop	r10
     540:	9f 90       	pop	r9
     542:	8f 90       	pop	r8
     544:	08 95       	ret

00000546 <Motor_Stop>:
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
}


static void Motor_Stop(uint8_t Motor_num)
{
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
     552:	c8 2f       	mov	r28, r24
     554:	d0 e0       	ldi	r29, 0x00	; 0
     556:	7e 01       	movw	r14, r28
     558:	ee 0c       	add	r14, r14
     55a:	ff 1c       	adc	r15, r15
     55c:	87 01       	movw	r16, r14
     55e:	0c 0f       	add	r16, r28
     560:	1d 1f       	adc	r17, r29
     562:	00 0f       	add	r16, r16
     564:	11 1f       	adc	r17, r17
     566:	09 56       	subi	r16, 0x69	; 105
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	f8 01       	movw	r30, r16
     56e:	64 81       	ldd	r22, Z+4	; 0x04
     570:	80 81       	ld	r24, Z
     572:	91 81       	ldd	r25, Z+1	; 0x01
     574:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
     578:	e8 01       	movw	r28, r16
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	6d 81       	ldd	r22, Y+5	; 0x05
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	9b 81       	ldd	r25, Y+3	; 0x03
     582:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <Motor_ACW>:
	return MOTOR_OK ;
	
}

static void Motor_ACW(uint8_t Motor_num)
{
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_SET);
     5a0:	c8 2f       	mov	r28, r24
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
     5a4:	7e 01       	movw	r14, r28
     5a6:	ee 0c       	add	r14, r14
     5a8:	ff 1c       	adc	r15, r15
     5aa:	87 01       	movw	r16, r14
     5ac:	0c 0f       	add	r16, r28
     5ae:	1d 1f       	adc	r17, r29
     5b0:	00 0f       	add	r16, r16
     5b2:	11 1f       	adc	r17, r17
     5b4:	09 56       	subi	r16, 0x69	; 105
     5b6:	1f 4f       	sbci	r17, 0xFF	; 255
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	f8 01       	movw	r30, r16
     5bc:	64 81       	ldd	r22, Z+4	; 0x04
     5be:	80 81       	ld	r24, Z
     5c0:	91 81       	ldd	r25, Z+1	; 0x01
     5c2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
     5c6:	e8 01       	movw	r28, r16
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	6d 81       	ldd	r22, Y+5	; 0x05
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	9b 81       	ldd	r25, Y+3	; 0x03
     5d0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <Motor_CW>:


static void Motor_CW(uint8_t Motor_num)
{
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
     5ee:	c8 2f       	mov	r28, r24
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
     5f2:	7e 01       	movw	r14, r28
     5f4:	ee 0c       	add	r14, r14
     5f6:	ff 1c       	adc	r15, r15
     5f8:	87 01       	movw	r16, r14
     5fa:	0c 0f       	add	r16, r28
     5fc:	1d 1f       	adc	r17, r29
     5fe:	00 0f       	add	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	09 56       	subi	r16, 0x69	; 105
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	f8 01       	movw	r30, r16
     60a:	64 81       	ldd	r22, Z+4	; 0x04
     60c:	80 81       	ld	r24, Z
     60e:	91 81       	ldd	r25, Z+1	; 0x01
     610:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
     614:	e8 01       	movw	r28, r16
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	6d 81       	ldd	r22, Y+5	; 0x05
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	9b 81       	ldd	r25, Y+3	; 0x03
     61e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	08 95       	ret

00000630 <Motor_Init>:
static TIMInit_t  Tim_PWM_Handler ={ .Instance = TIM0 ,.COMPConfig.TIM8Bit.CompAction = TIM_COMP_PIN_OUT_Normal   , .TIM_Interrupt = TIM_0_IT_COMP ,.TimPreScaler = TIM_0_Prescaler_256  , .COMPConfig.TIM8Bit.CompValue = 0  };
#endif


MOTOR_STATUS_t Motor_Init(void)
{
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	00 d0       	rcall	.+0      	; 0x644 <Motor_Init+0x14>
     644:	1f 92       	push	r1
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
		
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
     64a:	19 82       	std	Y+1, r1	; 0x01
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	1b 82       	std	Y+3, r1	; 0x03
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	8a 83       	std	Y+2, r24	; 0x02
		if(Software_PWM_Init( GPIOD , GPIO_PIN_4 ,  &Tim_PWM_Handler ) != UTIL_OK)
     654:	42 e8       	ldi	r20, 0x82	; 130
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e1       	ldi	r22, 0x10	; 16
     65a:	80 e3       	ldi	r24, 0x30	; 48
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Software_PWM_Init>
     662:	81 11       	cpse	r24, r1
     664:	35 c0       	rjmp	.+106    	; 0x6d0 <Motor_Init+0xa0>
		{
			return MOTOR_PWM_ERROR ; 
		}
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
     666:	82 e8       	ldi	r24, 0x82	; 130
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 0d 08 	call	0x101a	; 0x101a <Software_PWM_Start>
     66e:	81 11       	cpse	r24, r1
     670:	31 c0       	rjmp	.+98     	; 0x6d4 <Motor_Init+0xa4>
     672:	d1 2c       	mov	r13, r1
     674:	25 c0       	rjmp	.+74     	; 0x6c0 <Motor_Init+0x90>
			return MOTOR_PWM_ERROR ;
		}
		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
		{
			PIN_CONFIG.pin = MOTORS.Motor[iter].Pin[MOTOR__L];
     676:	0d 2d       	mov	r16, r13
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	58 01       	movw	r10, r16
     67c:	aa 0c       	add	r10, r10
     67e:	bb 1c       	adc	r11, r11
     680:	75 01       	movw	r14, r10
     682:	e0 0e       	add	r14, r16
     684:	f1 1e       	adc	r15, r17
     686:	c7 01       	movw	r24, r14
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	9c 01       	movw	r18, r24
     68e:	29 56       	subi	r18, 0x69	; 105
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	79 01       	movw	r14, r18
     694:	f9 01       	movw	r30, r18
     696:	85 81       	ldd	r24, Z+5	; 0x05
     698:	89 83       	std	Y+1, r24	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[iter].Port[MOTOR__L] , &PIN_CONFIG);
     69a:	be 01       	movw	r22, r28
     69c:	6f 5f       	subi	r22, 0xFF	; 255
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	93 81       	ldd	r25, Z+3	; 0x03
     6a4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <HAL_GPIO_Pin_Init>
			PIN_CONFIG.pin = MOTORS.Motor[iter].Pin[MOTOR__H];
     6a8:	f7 01       	movw	r30, r14
     6aa:	84 81       	ldd	r24, Z+4	; 0x04
     6ac:	89 83       	std	Y+1, r24	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[iter].Port[MOTOR__H] , &PIN_CONFIG);
     6ae:	f7 01       	movw	r30, r14
     6b0:	be 01       	movw	r22, r28
     6b2:	6f 5f       	subi	r22, 0xFF	; 255
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	0e 94 dd 04 	call	0x9ba	; 0x9ba <HAL_GPIO_Pin_Init>
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ;
		}
		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
     6be:	d3 94       	inc	r13
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	fd 15       	cp	r31, r13
     6c4:	c0 f6       	brcc	.-80     	; 0x676 <Motor_Init+0x46>
			PIN_CONFIG.pin = MOTORS.Motor[iter].Pin[MOTOR__L];
			HAL_GPIO_Pin_Init(MOTORS.Motor[iter].Port[MOTOR__L] , &PIN_CONFIG);
			PIN_CONFIG.pin = MOTORS.Motor[iter].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[iter].Port[MOTOR__H] , &PIN_CONFIG);
		}
		DDRD |= GPIO_PIN_5 ;
     6c6:	81 b3       	in	r24, 0x11	; 17
     6c8:	80 62       	ori	r24, 0x20	; 32
     6ca:	81 bb       	out	0x11, r24	; 17

	return MOTOR_OK ; 
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <Motor_Init+0xa6>
{
		
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
		if(Software_PWM_Init( GPIOD , GPIO_PIN_4 ,  &Tim_PWM_Handler ) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ; 
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <Motor_Init+0xa6>
		}
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ;
     6d4:	83 e0       	ldi	r24, 0x03	; 3
			HAL_GPIO_Pin_Init(MOTORS.Motor[iter].Port[MOTOR__H] , &PIN_CONFIG);
		}
		DDRD |= GPIO_PIN_5 ;

	return MOTOR_OK ; 
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	08 95       	ret

000006f0 <Motor_Dir>:




MOTOR_STATUS_t Motor_Dir(Motor_DIR_t DIR , uint8_t Speed )
{
     6f0:	cf 93       	push	r28
	static	uint8_t Motor_Speed = 0 ;
	static	Motor_DIR_t Motor_Dir = DID_STOP ;
	
	if ((Motor_Speed == Speed)&&(Motor_Dir == DIR))
     6f2:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <Motor_Speed.1979>
     6f6:	96 13       	cpse	r25, r22
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <Motor_Dir+0x14>
     6fa:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Motor_Dir.1980>
     6fe:	98 17       	cp	r25, r24
     700:	09 f4       	brne	.+2      	; 0x704 <Motor_Dir+0x14>
     702:	62 c0       	rjmp	.+196    	; 0x7c8 <Motor_Dir+0xd8>
     704:	c6 2f       	mov	r28, r22
	{
		return MOTOR_OK ; 
	}
	
	switch(DIR)
     706:	82 30       	cpi	r24, 0x02	; 2
     708:	71 f1       	breq	.+92     	; 0x766 <Motor_Dir+0x76>
     70a:	30 f4       	brcc	.+12     	; 0x718 <Motor_Dir+0x28>
     70c:	88 23       	and	r24, r24
     70e:	e1 f1       	breq	.+120    	; 0x788 <Motor_Dir+0x98>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	09 f4       	brne	.+2      	; 0x716 <Motor_Dir+0x26>
     714:	49 c0       	rjmp	.+146    	; 0x7a8 <Motor_Dir+0xb8>
     716:	58 c0       	rjmp	.+176    	; 0x7c8 <Motor_Dir+0xd8>
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	a1 f0       	breq	.+40     	; 0x744 <Motor_Dir+0x54>
     71c:	84 30       	cpi	r24, 0x04	; 4
     71e:	09 f0       	breq	.+2      	; 0x722 <Motor_Dir+0x32>
     720:	53 c0       	rjmp	.+166    	; 0x7c8 <Motor_Dir+0xd8>
	{
		case DID_STOP :
			Motor_Stop(MOTOR_1);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 a3 02 	call	0x546	; 0x546 <Motor_Stop>
			Motor_Stop(MOTOR_2);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 a3 02 	call	0x546	; 0x546 <Motor_Stop>
			Motor_Dir = DID_STOP ; 
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Motor_Dir.1980>
			Motor_Speed = 0 ;
     734:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <Motor_Speed.1979>

			Software_PWM_UpdateDuty( 0 ,&Tim_PWM_Handler );
     738:	62 e8       	ldi	r22, 0x82	; 130
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 15 08 	call	0x102a	; 0x102a <Software_PWM_UpdateDuty>
		break; 
     742:	42 c0       	rjmp	.+132    	; 0x7c8 <Motor_Dir+0xd8>
		case  DIR_BACKWARD :
			Motor_ACW(MOTOR_1);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 ca 02 	call	0x594	; 0x594 <Motor_ACW>
			Motor_ACW(MOTOR_2);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 ca 02 	call	0x594	; 0x594 <Motor_ACW>
			Motor_Dir = DIR_BACKWARD ;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Motor_Dir.1980>
			Motor_Speed = Speed ;
     756:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
     75a:	62 e8       	ldi	r22, 0x82	; 130
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	8c 2f       	mov	r24, r28
     760:	0e 94 15 08 	call	0x102a	; 0x102a <Software_PWM_UpdateDuty>
		break; 
     764:	31 c0       	rjmp	.+98     	; 0x7c8 <Motor_Dir+0xd8>
		case  DIR_FORWARD :
			Motor_CW(MOTOR_1);
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Motor_CW>
			Motor_CW(MOTOR_2);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Motor_CW>
			Motor_Dir = DIR_FORWARD ;
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Motor_Dir.1980>
			Motor_Speed = Speed ;
     778:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
     77c:	62 e8       	ldi	r22, 0x82	; 130
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 15 08 	call	0x102a	; 0x102a <Software_PWM_UpdateDuty>
		break; 
     786:	20 c0       	rjmp	.+64     	; 0x7c8 <Motor_Dir+0xd8>
		case  DIR_LEFT :
			Motor_CW(MOTOR_1);
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Motor_CW>
			Motor_ACW(MOTOR_2);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 ca 02 	call	0x594	; 0x594 <Motor_ACW>
			Motor_Dir = DIR_LEFT ;
     794:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <Motor_Dir.1980>
			Motor_Speed = Speed ;
     798:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
     79c:	62 e8       	ldi	r22, 0x82	; 130
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	8c 2f       	mov	r24, r28
     7a2:	0e 94 15 08 	call	0x102a	; 0x102a <Software_PWM_UpdateDuty>
		break; 
     7a6:	10 c0       	rjmp	.+32     	; 0x7c8 <Motor_Dir+0xd8>
		case DIR_RIGHT :
			Motor_ACW(MOTOR_1);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	0e 94 ca 02 	call	0x594	; 0x594 <Motor_ACW>
			Motor_CW(MOTOR_2);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Motor_CW>
			Motor_Dir = DIR_RIGHT ;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Motor_Dir.1980>
			Motor_Speed = Speed ;
     7ba:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
     7be:	62 e8       	ldi	r22, 0x82	; 130
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	8c 2f       	mov	r24, r28
     7c4:	0e 94 15 08 	call	0x102a	; 0x102a <Software_PWM_UpdateDuty>
		
	}
	
	return MOTOR_OK ;
	
}
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <StartUltrsinocTregger>:


void StartUltrsinocTregger(void )
{
	PRIVATE uint8_t  Edge = 0 ;
	if(Edge == 0)
     7ce:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Edge.2076>
     7d2:	81 11       	cpse	r24, r1
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <StartUltrsinocTregger+0x1c>
	{
		TCNT1 = 0x00;
     7d6:	1d bc       	out	0x2d, r1	; 45
     7d8:	1c bc       	out	0x2c, r1	; 44
		TIM_InputCaptureModeInit(TIM16Bit_InputCapture_CAPTURE_EDGE_Falling);
     7da:	0e 94 a2 06 	call	0xd44	; 0xd44 <TIM_InputCaptureModeInit>
		Edge = 1  ;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Edge.2076>
		status = 0;
     7e4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <status>
     7e8:	0e c0       	rjmp	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	}
	else
	{
		TIM_InputCaptureModeInit(TIM16Bit_InputCapture_CAPTURE_EDGE_Rising);
     7ea:	80 e4       	ldi	r24, 0x40	; 64
     7ec:	0e 94 a2 06 	call	0xd44	; 0xd44 <TIM_InputCaptureModeInit>
		HighValue =  ICR1 ;
     7f0:	86 b5       	in	r24, 0x26	; 38
     7f2:	97 b5       	in	r25, 0x27	; 39
     7f4:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <HighValue+0x1>
     7f8:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <HighValue>
		Edge = 0   ;
     7fc:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Edge.2076>
		status = 1 ;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <status>
	}




	TIFR = (1<<ICF1);		/* clear capture flag */
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	88 bf       	out	0x38, r24	; 56
     80a:	08 95       	ret

0000080c <__vector_6>:
}


ISR(TIMER1_CAPT_vect)
{
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	2f 93       	push	r18
     818:	3f 93       	push	r19
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31

		StartUltrsinocTregger();
     82e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <StartUltrsinocTregger>
	
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	bf 91       	pop	r27
     838:	af 91       	pop	r26
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	7f 91       	pop	r23
     840:	6f 91       	pop	r22
     842:	5f 91       	pop	r21
     844:	4f 91       	pop	r20
     846:	3f 91       	pop	r19
     848:	2f 91       	pop	r18
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <main>:
extern uint16_t Distance ; 
extern Ultrasonic_GPIOPINS_t  Ultrasonic_PINS ; 

int main(void)
{
	APP_Init();
     854:	0e 94 7a 00 	call	0xf4	; 0xf4 <APP_Init>
    /* Replace with your application code */
    while (1) 
    {


		APP_UPdate();
     858:	0e 94 20 01 	call	0x240	; 0x240 <APP_UPdate>
     85c:	fd cf       	rjmp	.-6      	; 0x858 <main+0x4>

0000085e <EXTI_Init>:
 * param : Handler is a pointer to struct that hold all information a bout the INIT 
 * return : void 
*/  
void EXIT_DISABLE(EXIT_Handler_t * Handler)
{
	GICR &=~(1<<(5+Handler->EXTI_NUM));  /* disable the required INIT */
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	71 f4       	brne	.+28     	; 0x882 <__stack+0x23>
     866:	81 81       	ldd	r24, Z+1	; 0x01
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	21 f4       	brne	.+8      	; 0x874 <__stack+0x15>
     86c:	84 b7       	in	r24, 0x34	; 52
     86e:	8f 7b       	andi	r24, 0xBF	; 191
     870:	84 bf       	out	0x34, r24	; 52
     872:	03 c0       	rjmp	.+6      	; 0x87a <__stack+0x1b>
     874:	84 b7       	in	r24, 0x34	; 52
     876:	80 64       	ori	r24, 0x40	; 64
     878:	84 bf       	out	0x34, r24	; 52
     87a:	8b b7       	in	r24, 0x3b	; 59
     87c:	80 62       	ori	r24, 0x20	; 32
     87e:	8b bf       	out	0x3b, r24	; 59
     880:	20 c0       	rjmp	.+64     	; 0x8c2 <__stack+0x63>
     882:	85 b7       	in	r24, 0x35	; 53
     884:	80 7f       	andi	r24, 0xF0	; 240
     886:	85 bf       	out	0x35, r24	; 53
     888:	80 81       	ld	r24, Z
     88a:	81 11       	cpse	r24, r1
     88c:	08 c0       	rjmp	.+16     	; 0x89e <__stack+0x3f>
     88e:	95 b7       	in	r25, 0x35	; 53
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	89 2b       	or	r24, r25
     894:	85 bf       	out	0x35, r24	; 53
     896:	8b b7       	in	r24, 0x3b	; 59
     898:	80 64       	ori	r24, 0x40	; 64
     89a:	8b bf       	out	0x3b, r24	; 59
     89c:	12 c0       	rjmp	.+36     	; 0x8c2 <__stack+0x63>
     89e:	45 b7       	in	r20, 0x35	; 53
     8a0:	21 81       	ldd	r18, Z+1	; 0x01
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	b9 01       	movw	r22, r18
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	8a 95       	dec	r24
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	cb 01       	movw	r24, r22
     8b8:	84 2b       	or	r24, r20
     8ba:	85 bf       	out	0x35, r24	; 53
     8bc:	8b b7       	in	r24, 0x3b	; 59
     8be:	80 68       	ori	r24, 0x80	; 128
     8c0:	8b bf       	out	0x3b, r24	; 59
     8c2:	78 94       	sei
     8c4:	08 95       	ret

000008c6 <EXIT_INT2_CallBack>:
     8c6:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <ptr_INT2+0x1>
     8ca:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <ptr_INT2>
     8ce:	08 95       	ret

000008d0 <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31
	ptr_INT0();
     8f2:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <ptr_INT0>
     8f6:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <ptr_INT0+0x1>
     8fa:	09 95       	icall
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	bf 91       	pop	r27
     902:	af 91       	pop	r26
     904:	9f 91       	pop	r25
     906:	8f 91       	pop	r24
     908:	7f 91       	pop	r23
     90a:	6f 91       	pop	r22
     90c:	5f 91       	pop	r21
     90e:	4f 91       	pop	r20
     910:	3f 91       	pop	r19
     912:	2f 91       	pop	r18
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	ef 93       	push	r30
     93e:	ff 93       	push	r31
	ptr_INT1();
     940:	e0 91 cb 00 	lds	r30, 0x00CB	; 0x8000cb <ptr_INT1>
     944:	f0 91 cc 00 	lds	r31, 0x00CC	; 0x8000cc <ptr_INT1+0x1>
     948:	09 95       	icall
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	ptr_INT2();
     98e:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <ptr_INT2>
     992:	f0 91 ca 00 	lds	r31, 0x00CA	; 0x8000ca <ptr_INT2+0x1>
     996:	09 95       	icall
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	bf 91       	pop	r27
     99e:	af 91       	pop	r26
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	7f 91       	pop	r23
     9a6:	6f 91       	pop	r22
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	0f 90       	pop	r0
     9b6:	1f 90       	pop	r1
     9b8:	18 95       	reti

000009ba <HAL_GPIO_Pin_Init>:
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
	}
}/* END_FUN HAL_GPIO_READPIN()*/
     9ba:	fc 01       	movw	r30, r24
     9bc:	db 01       	movw	r26, r22
     9be:	11 96       	adiw	r26, 0x01	; 1
     9c0:	8c 91       	ld	r24, X
     9c2:	11 97       	sbiw	r26, 0x01	; 1
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <HAL_GPIO_Pin_Init+0x18>
     9c8:	8c 91       	ld	r24, X
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	89 2b       	or	r24, r25
     9ce:	81 83       	std	Z+1, r24	; 0x01
     9d0:	08 95       	ret
     9d2:	db 01       	movw	r26, r22
     9d4:	9c 91       	ld	r25, X
     9d6:	90 95       	com	r25
     9d8:	81 81       	ldd	r24, Z+1	; 0x01
     9da:	98 23       	and	r25, r24
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	08 95       	ret

000009e0 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
     9e0:	44 23       	and	r20, r20
     9e2:	29 f0       	breq	.+10     	; 0x9ee <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
     9e4:	fc 01       	movw	r30, r24
     9e6:	22 81       	ldd	r18, Z+2	; 0x02
     9e8:	62 2b       	or	r22, r18
     9ea:	62 83       	std	Z+2, r22	; 0x02
     9ec:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
     9ee:	60 95       	com	r22
     9f0:	fc 01       	movw	r30, r24
     9f2:	22 81       	ldd	r18, Z+2	; 0x02
     9f4:	62 23       	and	r22, r18
     9f6:	62 83       	std	Z+2, r22	; 0x02
     9f8:	08 95       	ret

000009fa <TIM_NormalModeInit>:

	return TIM_OK ;



}
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	89 f0       	breq	.+34     	; 0xa20 <TIM_NormalModeInit+0x26>
     9fe:	fc 01       	movw	r30, r24
     a00:	80 85       	ldd	r24, Z+8	; 0x08
     a02:	81 11       	cpse	r24, r1
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <TIM_NormalModeInit+0x10>
     a06:	13 be       	out	0x33, r1	; 51
     a08:	08 95       	ret
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	19 f4       	brne	.+6      	; 0xa14 <TIM_NormalModeInit+0x1a>
     a0e:	15 bc       	out	0x25, r1	; 37
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	31 f4       	brne	.+12     	; 0xa24 <TIM_NormalModeInit+0x2a>
     a18:	1f bc       	out	0x2f, r1	; 47
     a1a:	1e bc       	out	0x2e, r1	; 46
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	08 95       	ret
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	08 95       	ret

00000a28 <TIM_PWMMode_SetDuty>:
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	8c 01       	movw	r16, r24
     a3a:	c6 2f       	mov	r28, r22
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	09 f4       	brne	.+2      	; 0xa42 <TIM_PWMMode_SetDuty+0x1a>
     a40:	8b c0       	rjmp	.+278    	; 0xb58 <TIM_PWMMode_SetDuty+0x130>
     a42:	fc 01       	movw	r30, r24
     a44:	80 85       	ldd	r24, Z+8	; 0x08
     a46:	81 11       	cpse	r24, r1
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <TIM_PWMMode_SetDuty+0x32>
     a4a:	96 2f       	mov	r25, r22
     a4c:	64 e6       	ldi	r22, 0x64	; 100
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 46 0a 	call	0x148c	; 0x148c <__divmodhi4>
     a54:	6c bf       	out	0x3c, r22	; 60
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	82 c0       	rjmp	.+260    	; 0xb5e <TIM_PWMMode_SetDuty+0x136>
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	49 f4       	brne	.+18     	; 0xa70 <TIM_PWMMode_SetDuty+0x48>
     a5e:	96 2f       	mov	r25, r22
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	64 e6       	ldi	r22, 0x64	; 100
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 46 0a 	call	0x148c	; 0x148c <__divmodhi4>
     a6a:	63 bd       	out	0x23, r22	; 35
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	77 c0       	rjmp	.+238    	; 0xb5e <TIM_PWMMode_SetDuty+0x136>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	09 f0       	breq	.+2      	; 0xa76 <TIM_PWMMode_SetDuty+0x4e>
     a74:	73 c0       	rjmp	.+230    	; 0xb5c <TIM_PWMMode_SetDuty+0x134>
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	9f e0       	ldi	r25, 0x0F	; 15
     a7a:	97 bd       	out	0x27, r25	; 39
     a7c:	86 bd       	out	0x26, r24	; 38
     a7e:	f8 01       	movw	r30, r16
     a80:	86 81       	ldd	r24, Z+6	; 0x06
     a82:	8f 3f       	cpi	r24, 0xFF	; 255
     a84:	b9 f5       	brne	.+110    	; 0xaf4 <TIM_PWMMode_SetDuty+0xcc>
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	a2 81       	ldd	r26, Z+2	; 0x02
     a8c:	b3 81       	ldd	r27, Z+3	; 0x03
     a8e:	bc 01       	movw	r22, r24
     a90:	cd 01       	movw	r24, r26
     a92:	7f 70       	andi	r23, 0x0F	; 15
     a94:	88 27       	eor	r24, r24
     a96:	99 27       	eor	r25, r25
     a98:	0f 2e       	mov	r0, r31
     a9a:	f4 e6       	ldi	r31, 0x64	; 100
     a9c:	cf 2e       	mov	r12, r31
     a9e:	d1 2c       	mov	r13, r1
     aa0:	e1 2c       	mov	r14, r1
     aa2:	f1 2c       	mov	r15, r1
     aa4:	f0 2d       	mov	r31, r0
     aa6:	a7 01       	movw	r20, r14
     aa8:	96 01       	movw	r18, r12
     aaa:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     aae:	d0 e0       	ldi	r29, 0x00	; 0
     ab0:	c2 9f       	mul	r28, r18
     ab2:	c0 01       	movw	r24, r0
     ab4:	c3 9f       	mul	r28, r19
     ab6:	90 0d       	add	r25, r0
     ab8:	d2 9f       	mul	r29, r18
     aba:	90 0d       	add	r25, r0
     abc:	11 24       	eor	r1, r1
     abe:	9b bd       	out	0x2b, r25	; 43
     ac0:	8a bd       	out	0x2a, r24	; 42
     ac2:	f8 01       	movw	r30, r16
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	a2 81       	ldd	r26, Z+2	; 0x02
     aca:	b3 81       	ldd	r27, Z+3	; 0x03
     acc:	bc 01       	movw	r22, r24
     ace:	cd 01       	movw	r24, r26
     ad0:	7f 70       	andi	r23, 0x0F	; 15
     ad2:	88 27       	eor	r24, r24
     ad4:	99 27       	eor	r25, r25
     ad6:	a7 01       	movw	r20, r14
     ad8:	96 01       	movw	r18, r12
     ada:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     ade:	c2 9f       	mul	r28, r18
     ae0:	c0 01       	movw	r24, r0
     ae2:	c3 9f       	mul	r28, r19
     ae4:	90 0d       	add	r25, r0
     ae6:	d2 9f       	mul	r29, r18
     ae8:	90 0d       	add	r25, r0
     aea:	11 24       	eor	r1, r1
     aec:	99 bd       	out	0x29, r25	; 41
     aee:	88 bd       	out	0x28, r24	; 40
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	35 c0       	rjmp	.+106    	; 0xb5e <TIM_PWMMode_SetDuty+0x136>
     af4:	84 30       	cpi	r24, 0x04	; 4
     af6:	c1 f4       	brne	.+48     	; 0xb28 <TIM_PWMMode_SetDuty+0x100>
     af8:	f8 01       	movw	r30, r16
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	a2 81       	ldd	r26, Z+2	; 0x02
     b00:	b3 81       	ldd	r27, Z+3	; 0x03
     b02:	9c 01       	movw	r18, r24
     b04:	ad 01       	movw	r20, r26
     b06:	3f 70       	andi	r19, 0x0F	; 15
     b08:	44 27       	eor	r20, r20
     b0a:	55 27       	eor	r21, r21
     b0c:	a6 2f       	mov	r26, r22
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__muluhisi3>
     b14:	24 e6       	ldi	r18, 0x64	; 100
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     b20:	39 bd       	out	0x29, r19	; 41
     b22:	28 bd       	out	0x28, r18	; 40
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <TIM_PWMMode_SetDuty+0x136>
     b28:	f8 01       	movw	r30, r16
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	a2 81       	ldd	r26, Z+2	; 0x02
     b30:	b3 81       	ldd	r27, Z+3	; 0x03
     b32:	9c 01       	movw	r18, r24
     b34:	ad 01       	movw	r20, r26
     b36:	3f 70       	andi	r19, 0x0F	; 15
     b38:	44 27       	eor	r20, r20
     b3a:	55 27       	eor	r21, r21
     b3c:	a6 2f       	mov	r26, r22
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__muluhisi3>
     b44:	24 e6       	ldi	r18, 0x64	; 100
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     b50:	3b bd       	out	0x2b, r19	; 43
     b52:	2a bd       	out	0x2a, r18	; 42
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <TIM_PWMMode_SetDuty+0x136>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <TIM_PWMMode_SetDuty+0x136>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	08 95       	ret

00000b70 <TIM_Start>:
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	29 f1       	breq	.+74     	; 0xbbe <TIM_Start+0x4e>
     b74:	fc 01       	movw	r30, r24
     b76:	20 85       	ldd	r18, Z+8	; 0x08
     b78:	21 11       	cpse	r18, r1
     b7a:	09 c0       	rjmp	.+18     	; 0xb8e <TIM_Start+0x1e>
     b7c:	23 b7       	in	r18, 0x33	; 51
     b7e:	28 7f       	andi	r18, 0xF8	; 248
     b80:	23 bf       	out	0x33, r18	; 51
     b82:	23 b7       	in	r18, 0x33	; 51
     b84:	87 81       	ldd	r24, Z+7	; 0x07
     b86:	82 2b       	or	r24, r18
     b88:	83 bf       	out	0x33, r24	; 51
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	08 95       	ret
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	51 f4       	brne	.+20     	; 0xba6 <TIM_Start+0x36>
     b92:	25 b5       	in	r18, 0x25	; 37
     b94:	28 7f       	andi	r18, 0xF8	; 248
     b96:	25 bd       	out	0x25, r18	; 37
     b98:	25 b5       	in	r18, 0x25	; 37
     b9a:	fc 01       	movw	r30, r24
     b9c:	87 81       	ldd	r24, Z+7	; 0x07
     b9e:	82 2b       	or	r24, r18
     ba0:	85 bd       	out	0x25, r24	; 37
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	08 95       	ret
     ba6:	21 30       	cpi	r18, 0x01	; 1
     ba8:	61 f4       	brne	.+24     	; 0xbc2 <TIM_Start+0x52>
     baa:	2e b5       	in	r18, 0x2e	; 46
     bac:	28 7f       	andi	r18, 0xF8	; 248
     bae:	2e bd       	out	0x2e, r18	; 46
     bb0:	2e b5       	in	r18, 0x2e	; 46
     bb2:	fc 01       	movw	r30, r24
     bb4:	87 81       	ldd	r24, Z+7	; 0x07
     bb6:	82 2b       	or	r24, r18
     bb8:	8e bd       	out	0x2e, r24	; 46
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	08 95       	ret
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	08 95       	ret
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	08 95       	ret

00000bc6 <TIM_Stop>:
     bc6:	81 11       	cpse	r24, r1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <TIM_Stop+0x12>
     bca:	83 b7       	in	r24, 0x33	; 51
     bcc:	88 7f       	andi	r24, 0xF8	; 248
     bce:	83 bf       	out	0x33, r24	; 51
     bd0:	83 b7       	in	r24, 0x33	; 51
     bd2:	83 bf       	out	0x33, r24	; 51
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	39 f4       	brne	.+14     	; 0xbea <TIM_Stop+0x24>
     bdc:	85 b5       	in	r24, 0x25	; 37
     bde:	88 7f       	andi	r24, 0xF8	; 248
     be0:	85 bd       	out	0x25, r24	; 37
     be2:	85 b5       	in	r24, 0x25	; 37
     be4:	85 bd       	out	0x25, r24	; 37
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	39 f4       	brne	.+14     	; 0xbfc <TIM_Stop+0x36>
     bee:	8e b5       	in	r24, 0x2e	; 46
     bf0:	88 7f       	andi	r24, 0xF8	; 248
     bf2:	8e bd       	out	0x2e, r24	; 46
     bf4:	8e b5       	in	r24, 0x2e	; 46
     bf6:	8e bd       	out	0x2e, r24	; 46
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	08 95       	ret

00000c00 <TIM_PWMModeInit>:
 * brief : this function used to initialize TImer Instance as PWM  
 * parameter(input) : TIMConfig Hold all Timer Configuration 
 * return : current timer value 
 */
TIM_Status_t	TIM_PWMModeInit(TIMInit_t * TIMConfig )
{
     c00:	fc 01       	movw	r30, r24
	FUN_CHECK_PARAM(TIMConfig);
     c02:	89 2b       	or	r24, r25
     c04:	09 f4       	brne	.+2      	; 0xc08 <TIM_PWMModeInit+0x8>
     c06:	98 c0       	rjmp	.+304    	; 0xd38 <TIM_PWMModeInit+0x138>
	
	
	if (TIMConfig->Instance == TIM1)
     c08:	80 85       	ldd	r24, Z+8	; 0x08
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <TIM_PWMModeInit+0x10>
     c0e:	6d c0       	rjmp	.+218    	; 0xcea <TIM_PWMModeInit+0xea>
	{
		if(TIMConfig->TIMMode & 0x1000)
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	a2 81       	ldd	r26, Z+2	; 0x02
     c16:	b3 81       	ldd	r27, Z+3	; 0x03
     c18:	94 ff       	sbrs	r25, 4
     c1a:	33 c0       	rjmp	.+102    	; 0xc82 <TIM_PWMModeInit+0x82>
		{
			if( TIM_MODE_16Bit_MODE_COMP_PWM_FAST_8B == (TIMConfig->TIMMode&0xffff ))
     c1c:	aa 27       	eor	r26, r26
     c1e:	bb 27       	eor	r27, r27
     c20:	8f 3f       	cpi	r24, 0xFF	; 255
     c22:	20 e1       	ldi	r18, 0x10	; 16
     c24:	92 07       	cpc	r25, r18
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	29 f4       	brne	.+10     	; 0xc36 <TIM_PWMModeInit+0x36>
			{
				TCCR1A  =  0x01u ;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	8f bd       	out	0x2f, r24	; 47
				TCCR1B  =  0x01u<<3 ;
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	8e bd       	out	0x2e, r24	; 46
     c34:	1f c0       	rjmp	.+62     	; 0xc74 <TIM_PWMModeInit+0x74>
			}
			else if(TIM_MODE_16Bit_MODE_COMP_PWM_FAST_9B == (TIMConfig->TIMMode&0xffff))
     c36:	8f 3f       	cpi	r24, 0xFF	; 255
     c38:	21 e1       	ldi	r18, 0x11	; 17
     c3a:	92 07       	cpc	r25, r18
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	29 f4       	brne	.+10     	; 0xc4c <TIM_PWMModeInit+0x4c>
			{
				TCCR1A  =  0x02u ;
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	8f bd       	out	0x2f, r24	; 47
				TCCR1B  =  0x01u<<3 ;
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	8e bd       	out	0x2e, r24	; 46
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <TIM_PWMModeInit+0x74>
			}
			else if( TIM_MODE_16Bit_MODE_COMP_PWM_FAST_10B == (TIMConfig->TIMMode&0xffff))
     c4c:	8f 3f       	cpi	r24, 0xFF	; 255
     c4e:	23 e1       	ldi	r18, 0x13	; 19
     c50:	92 07       	cpc	r25, r18
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	29 f4       	brne	.+10     	; 0xc62 <TIM_PWMModeInit+0x62>
			{
				TCCR1A  =  0x03u ;
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	8f bd       	out	0x2f, r24	; 47
				TCCR1B  =  0x01u<<3 ;
     c5c:	88 e0       	ldi	r24, 0x08	; 8
     c5e:	8e bd       	out	0x2e, r24	; 46
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <TIM_PWMModeInit+0x74>
			}
			else if( TIM16Bit_MODE_COMP_PWM_FAST_MODE == (TIMConfig->TIMMode&0xffff ))
     c62:	8f 3f       	cpi	r24, 0xFF	; 255
     c64:	9f 41       	sbci	r25, 0x1F	; 31
     c66:	a1 05       	cpc	r26, r1
     c68:	b1 05       	cpc	r27, r1
     c6a:	21 f4       	brne	.+8      	; 0xc74 <TIM_PWMModeInit+0x74>
			{
				TCCR1A  =  0x02u ;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	8f bd       	out	0x2f, r24	; 47
				TCCR1B  =  0x03u<<3 ;
     c70:	88 e1       	ldi	r24, 0x18	; 24
     c72:	8e bd       	out	0x2e, r24	; 46
				
				
			}
			
		
			if(TIMConfig->TIM_Interrupt != 0)
     c74:	81 85       	ldd	r24, Z+9	; 0x09
     c76:	88 23       	and	r24, r24
     c78:	89 f0       	breq	.+34     	; 0xc9c <TIM_PWMModeInit+0x9c>
			{
				_TIM_IT_EN(TIMConfig->TIM_Interrupt) ;
     c7a:	99 b7       	in	r25, 0x39	; 57
     c7c:	89 2b       	or	r24, r25
     c7e:	89 bf       	out	0x39, r24	; 57
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <TIM_PWMModeInit+0x9c>
			}
		}else
		{
			/* TIM16Bit_MODE_COMP_PWM_PHASE_CORRECT */
			if( TIMConfig->TIMMode  & 0x2000)
     c82:	95 ff       	sbrs	r25, 5
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <TIM_PWMModeInit+0x90>
			{
				TCCR1A  =   0x02u ;
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	8f bd       	out	0x2f, r24	; 47
				TCCR1B  =   0x02u << 3 ;
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	8e bd       	out	0x2e, r24	; 46
     c8e:	06 c0       	rjmp	.+12     	; 0xc9c <TIM_PWMModeInit+0x9c>
			}
			else if( TIMConfig->TIMMode  & 0x4000)
     c90:	96 ff       	sbrs	r25, 6
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <TIM_PWMModeInit+0x9c>
			{
				TCCR1A  =  0x01u ;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	8f bd       	out	0x2f, r24	; 47
				TCCR1B  =  0x02u << 3 ;
     c98:	80 e1       	ldi	r24, 0x10	; 16
     c9a:	8e bd       	out	0x2e, r24	; 46

		}
		
		
		
		if(TIMConfig->COMPConfig.TIM16Bit.CompNum == COMP_A_B_)
     c9c:	26 81       	ldd	r18, Z+6	; 0x06
     c9e:	2f 3f       	cpi	r18, 0xFF	; 255
     ca0:	c1 f4       	brne	.+48     	; 0xcd2 <TIM_PWMModeInit+0xd2>
		{
			TCCR1A  |= TIMConfig->COMPConfig.TIM16Bit.CompAction << COMP_A_ |TIMConfig->COMPConfig.TIM16Bit.CompAction << COMP_B_  ;
     ca2:	2f b5       	in	r18, 0x2f	; 47
     ca4:	94 81       	ldd	r25, Z+4	; 0x04
     ca6:	89 2f       	mov	r24, r25
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	ac 01       	movw	r20, r24
     cac:	00 24       	eor	r0, r0
     cae:	56 95       	lsr	r21
     cb0:	47 95       	ror	r20
     cb2:	07 94       	ror	r0
     cb4:	56 95       	lsr	r21
     cb6:	47 95       	ror	r20
     cb8:	07 94       	ror	r0
     cba:	54 2f       	mov	r21, r20
     cbc:	40 2d       	mov	r20, r0
     cbe:	82 95       	swap	r24
     cc0:	92 95       	swap	r25
     cc2:	90 7f       	andi	r25, 0xF0	; 240
     cc4:	98 27       	eor	r25, r24
     cc6:	80 7f       	andi	r24, 0xF0	; 240
     cc8:	98 27       	eor	r25, r24
     cca:	84 2b       	or	r24, r20
     ccc:	82 2b       	or	r24, r18
     cce:	8f bd       	out	0x2f, r24	; 47
     cd0:	2b c0       	rjmp	.+86     	; 0xd28 <TIM_PWMModeInit+0x128>
		}else
		{
			TCCR1A  |= TIMConfig->COMPConfig.TIM16Bit.CompAction <<   TIMConfig->COMPConfig.TIM16Bit.CompNum  ;
     cd2:	3f b5       	in	r19, 0x2f	; 47
     cd4:	94 81       	ldd	r25, Z+4	; 0x04
     cd6:	89 2f       	mov	r24, r25
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <TIM_PWMModeInit+0xe0>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	2a 95       	dec	r18
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <TIM_PWMModeInit+0xdc>
     ce4:	83 2b       	or	r24, r19
     ce6:	8f bd       	out	0x2f, r24	; 47
     ce8:	1f c0       	rjmp	.+62     	; 0xd28 <TIM_PWMModeInit+0x128>
		}
	}
	else if ((TIMConfig->Instance == TIM0)|| (TIMConfig->Instance == TIM2))
     cea:	88 23       	and	r24, r24
     cec:	11 f0       	breq	.+4      	; 0xcf2 <TIM_PWMModeInit+0xf2>
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	29 f5       	brne	.+74     	; 0xd3c <TIM_PWMModeInit+0x13c>
	{
			
			if(TIMConfig->Instance == TIM0)
     cf2:	81 11       	cpse	r24, r1
     cf4:	0c c0       	rjmp	.+24     	; 0xd0e <TIM_PWMModeInit+0x10e>
			{
				SET_REGISTER_VAL(TCCR0 , TIM8Bit_COMP_OUT_MASK|TIM8Bit_MODE_MASK , TIMConfig->COMPConfig.TIM8Bit.CompAction |(TIMConfig->TIMMode >> 0x10 ) );
     cf6:	83 b7       	in	r24, 0x33	; 51
     cf8:	87 78       	andi	r24, 0x87	; 135
     cfa:	83 bf       	out	0x33, r24	; 51
     cfc:	93 b7       	in	r25, 0x33	; 51
     cfe:	24 81       	ldd	r18, Z+4	; 0x04
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	82 2b       	or	r24, r18
     d04:	89 2b       	or	r24, r25
     d06:	83 bf       	out	0x33, r24	; 51
				OCR0 = TIMConfig->COMPConfig.TIM8Bit.CompValue ;
     d08:	85 81       	ldd	r24, Z+5	; 0x05
     d0a:	8c bf       	out	0x3c, r24	; 60
     d0c:	0d c0       	rjmp	.+26     	; 0xd28 <TIM_PWMModeInit+0x128>
			}
			else if(TIMConfig->Instance == TIM2)
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	59 f4       	brne	.+22     	; 0xd28 <TIM_PWMModeInit+0x128>
			{
				SET_REGISTER_VAL(TCCR2 , TIM8Bit_COMP_OUT_MASK|TIM8Bit_MODE_MASK , TIMConfig->COMPConfig.TIM8Bit.CompAction  | (TIMConfig->TIMMode >> 0x10 ) );
     d12:	85 b5       	in	r24, 0x25	; 37
     d14:	87 78       	andi	r24, 0x87	; 135
     d16:	85 bd       	out	0x25, r24	; 37
     d18:	95 b5       	in	r25, 0x25	; 37
     d1a:	24 81       	ldd	r18, Z+4	; 0x04
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	82 2b       	or	r24, r18
     d20:	89 2b       	or	r24, r25
     d22:	85 bd       	out	0x25, r24	; 37
				OCR2 = TIMConfig->COMPConfig.TIM8Bit.CompValue ;
     d24:	85 81       	ldd	r24, Z+5	; 0x05
     d26:	83 bd       	out	0x23, r24	; 35
		
		return TIM_CONFIG_ERROR ;
	}
	
	
	if(TIMConfig->TIM_Interrupt != TIM_IT_DIS)
     d28:	81 85       	ldd	r24, Z+9	; 0x09
     d2a:	88 23       	and	r24, r24
     d2c:	49 f0       	breq	.+18     	; 0xd40 <TIM_PWMModeInit+0x140>
	{
		_TIM_IT_EN(TIMConfig->TIM_Interrupt) ;
     d2e:	99 b7       	in	r25, 0x39	; 57
     d30:	89 2b       	or	r24, r25
     d32:	89 bf       	out	0x39, r24	; 57
	}
	
	
	
	return TIM_OK ;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	08 95       	ret
 * parameter(input) : TIMConfig Hold all Timer Configuration 
 * return : current timer value 
 */
TIM_Status_t	TIM_PWMModeInit(TIMInit_t * TIMConfig )
{
	FUN_CHECK_PARAM(TIMConfig);
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	08 95       	ret
				
			}
		
		}else{
		
		return TIM_CONFIG_ERROR ;
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	08 95       	ret
		_TIM_IT_EN(TIMConfig->TIM_Interrupt) ;
	}
	
	
	
	return TIM_OK ;
     d40:	80 e0       	ldi	r24, 0x00	; 0

}
     d42:	08 95       	ret

00000d44 <TIM_InputCaptureModeInit>:
 * return : current timer value 
 */
TIM_Status_t TIM_InputCaptureModeInit( uint8_t Edge  )
{
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
     d44:	9e b5       	in	r25, 0x2e	; 46
     d46:	9f 7b       	andi	r25, 0xBF	; 191
     d48:	9e bd       	out	0x2e, r25	; 46
     d4a:	9e b5       	in	r25, 0x2e	; 46
     d4c:	89 2b       	or	r24, r25
     d4e:	8e bd       	out	0x2e, r24	; 46
	
	return TIM_OK ;
	
}
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret

00000d54 <TIM_CallBack_FuctionSet>:


  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
     d54:	61 15       	cp	r22, r1
     d56:	71 05       	cpc	r23, r1
     d58:	e1 f0       	breq	.+56     	; 0xd92 <TIM_CallBack_FuctionSet+0x3e>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
     d5a:	88 30       	cpi	r24, 0x08	; 8
     d5c:	e1 f0       	breq	.+56     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
     d5e:	38 f4       	brcc	.+14     	; 0xd6e <TIM_CallBack_FuctionSet+0x1a>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	89 f0       	breq	.+34     	; 0xd86 <TIM_CallBack_FuctionSet+0x32>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	b9 f0       	breq	.+46     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	59 f4       	brne	.+22     	; 0xd82 <TIM_CallBack_FuctionSet+0x2e>
     d6c:	14 c0       	rjmp	.+40     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
     d6e:	80 32       	cpi	r24, 0x20	; 32
     d70:	91 f0       	breq	.+36     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
     d72:	18 f4       	brcc	.+6      	; 0xd7a <TIM_CallBack_FuctionSet+0x26>
     d74:	80 31       	cpi	r24, 0x10	; 16
     d76:	79 f0       	breq	.+30     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <TIM_CallBack_FuctionSet+0x2e>
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	61 f0       	breq	.+24     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
     d7e:	80 38       	cpi	r24, 0x80	; 128
     d80:	51 f0       	breq	.+20     	; 0xd96 <TIM_CallBack_FuctionSet+0x42>
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	08 95       	ret
	}
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
     d86:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <COMPMatch0_Fun+0x1>
     d8a:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
     d8e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
     d90:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret
	}
	
	


	return TIM_OK ; 
     d96:	80 e0       	ldi	r24, 0x00	; 0
	
}
     d98:	08 95       	ret

00000d9a <__vector_10>:




ISR(TIMER0_COMP_vect)
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
	
	COMPMatch0_Fun();
     dbc:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <COMPMatch0_Fun>
     dc0:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <COMPMatch0_Fun+0x1>
     dc4:	09 95       	icall
	
	
}
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <PWM_Toggle_Timer2>:
	


return UTIL_OK ;

}
     de8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Duty_TIM2>
     dec:	81 11       	cpse	r24, r1
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <PWM_Toggle_Timer2+0x1c>
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <PWMTim2_PIN>
     df6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <PWMTim2_PORT>
     dfa:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <PWMTim2_PORT+0x1>
     dfe:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     e02:	08 95       	ret
     e04:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <ON.2006>
     e08:	81 11       	cpse	r24, r1
     e0a:	10 c0       	rjmp	.+32     	; 0xe2c <PWM_Toggle_Timer2+0x44>
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <PWMTim2_PIN>
     e12:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <PWMTim2_PORT>
     e16:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <PWMTim2_PORT+0x1>
     e1a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     e1e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Duty_TIM2>
     e22:	83 bd       	out	0x23, r24	; 35
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <ON.2006>
     e2a:	08 95       	ret
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <PWMTim2_PIN>
     e32:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <PWMTim2_PORT>
     e36:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <PWMTim2_PORT+0x1>
     e3a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     e3e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Duty_TIM2>
     e42:	81 95       	neg	r24
     e44:	83 bd       	out	0x23, r24	; 35
     e46:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <ON.2006>
     e4a:	08 95       	ret

00000e4c <PWM_Toggle_Timer1>:
     e4c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <Duty_TIM1>
     e50:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <Duty_TIM1+0x1>
     e54:	89 2b       	or	r24, r25
     e56:	61 f1       	breq	.+88     	; 0xeb0 <PWM_Toggle_Timer1+0x64>
     e58:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <ON.2010>
     e5c:	81 11       	cpse	r24, r1
     e5e:	13 c0       	rjmp	.+38     	; 0xe86 <PWM_Toggle_Timer1+0x3a>
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	60 91 bd 00 	lds	r22, 0x00BD	; 0x8000bd <PWMTim1_PIN>
     e66:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <PWMTim1_PORT>
     e6a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <PWMTim1_PORT+0x1>
     e6e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     e72:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <Duty_TIM1>
     e76:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <Duty_TIM1+0x1>
     e7a:	9b bd       	out	0x2b, r25	; 43
     e7c:	8a bd       	out	0x2a, r24	; 42
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <ON.2010>
     e84:	08 95       	ret
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	60 91 bd 00 	lds	r22, 0x00BD	; 0x8000bd <PWMTim1_PIN>
     e8c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <PWMTim1_PORT>
     e90:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <PWMTim1_PORT+0x1>
     e94:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     e98:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <Duty_TIM1>
     e9c:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <Duty_TIM1+0x1>
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f e0       	ldi	r25, 0x0F	; 15
     ea4:	82 1b       	sub	r24, r18
     ea6:	93 0b       	sbc	r25, r19
     ea8:	9b bd       	out	0x2b, r25	; 43
     eaa:	8a bd       	out	0x2a, r24	; 42
     eac:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <ON.2010>
     eb0:	08 95       	ret

00000eb2 <PWM_Toggle_Timer0>:
     eb2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Duty_TIM0>
     eb6:	81 11       	cpse	r24, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <PWM_Toggle_Timer0+0x28>
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <PWMTim0_PIN>
     ec0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <PWMTim0_PORT>
     ec4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <PWMTim0_PORT+0x1>
     ec8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	60 e2       	ldi	r22, 0x20	; 32
     ed0:	80 e3       	ldi	r24, 0x30	; 48
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     ed8:	08 95       	ret
     eda:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <ON.2002>
     ede:	81 11       	cpse	r24, r1
     ee0:	16 c0       	rjmp	.+44     	; 0xf0e <PWM_Toggle_Timer0+0x5c>
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <PWMTim0_PIN>
     ee8:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <PWMTim0_PORT>
     eec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <PWMTim0_PORT+0x1>
     ef0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	60 e2       	ldi	r22, 0x20	; 32
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     f00:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Duty_TIM0>
     f04:	8c bf       	out	0x3c, r24	; 60
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <ON.2002>
     f0c:	08 95       	ret
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <PWMTim0_PIN>
     f14:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <PWMTim0_PORT>
     f18:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <PWMTim0_PORT+0x1>
     f1c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	60 e2       	ldi	r22, 0x20	; 32
     f24:	80 e3       	ldi	r24, 0x30	; 48
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <HAL_GPIO_WRITEPIN>
     f2c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Duty_TIM0>
     f30:	81 95       	neg	r24
     f32:	8c bf       	out	0x3c, r24	; 60
     f34:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <ON.2002>
     f38:	08 95       	ret

00000f3a <Software_PWM_Init>:
 * Param (input) : PIN_Num Pin number in selected port 
 * Param (input) : Tim_PWM_Handler {Pointer to timer configuration register 
 * Return : Utilies_Status_t typedef to Status 
 */
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
	
	if(Tim_PWM_Handler == NULL)
     f44:	41 15       	cp	r20, r1
     f46:	51 05       	cpc	r21, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <Software_PWM_Init+0x12>
     f4a:	5e c0       	rjmp	.+188    	; 0x1008 <Software_PWM_Init+0xce>
     f4c:	ea 01       	movw	r28, r20
     f4e:	f6 2e       	mov	r15, r22
     f50:	8c 01       	movw	r16, r24

	
	
	
	#if SOFTWARE_PWM_CTC_MODE
	Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f e0       	ldi	r25, 0x0F	; 15
     f56:	a8 e0       	ldi	r26, 0x08	; 8
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	88 83       	st	Y, r24
     f5c:	99 83       	std	Y+1, r25	; 0x01
     f5e:	aa 83       	std	Y+2, r26	; 0x02
     f60:	bb 83       	std	Y+3, r27	; 0x03
		Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
	}else
	{
		;
	}
	TIM_PWMModeInit(Tim_PWM_Handler) ;
     f62:	ca 01       	movw	r24, r20
     f64:	0e 94 00 06 	call	0xc00	; 0xc00 <TIM_PWMModeInit>
	
	if (Tim_PWM_Handler->Instance  == TIM0)
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	91 11       	cpse	r25, r1
     f6c:	1a c0       	rjmp	.+52     	; 0xfa2 <Software_PWM_Init+0x68>
	{
		PWMTim0_PIN.mode = GPIO_MODE_OUTPUT ;
     f6e:	e0 ec       	ldi	r30, 0xC0	; 192
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	81 83       	std	Z+1, r24	; 0x01
		PWMTim0_PIN.pin = PIN_Num ;
     f76:	f0 82       	st	Z, r15
		PWMTim0_PIN.pull = GPIO_NOPULL ;
     f78:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim0_PIN );
     f7a:	bf 01       	movw	r22, r30
     f7c:	c8 01       	movw	r24, r16
     f7e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <HAL_GPIO_Pin_Init>
		
		PWMTim0_PORT = PORT ;
     f82:	10 93 b9 00 	sts	0x00B9, r17	; 0x8000b9 <PWMTim0_PORT+0x1>
     f86:	00 93 b8 00 	sts	0x00B8, r16	; 0x8000b8 <PWMTim0_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
     f8a:	69 e5       	ldi	r22, 0x59	; 89
     f8c:	77 e0       	ldi	r23, 0x07	; 7
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	0e 94 aa 06 	call	0xd54	; 0xd54 <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);
     f94:	69 e5       	ldi	r22, 0x59	; 89
     f96:	77 e0       	ldi	r23, 0x07	; 7
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	0e 94 aa 06 	call	0xd54	; 0xd54 <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	36 c0       	rjmp	.+108    	; 0x100e <Software_PWM_Init+0xd4>
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);

	}else if (Tim_PWM_Handler->Instance == TIM1)
     fa2:	91 30       	cpi	r25, 0x01	; 1
     fa4:	a9 f4       	brne	.+42     	; 0xfd0 <Software_PWM_Init+0x96>
	{	
		PWMTim1_PIN.mode = GPIO_MODE_OUTPUT ;
     fa6:	ed eb       	ldi	r30, 0xBD	; 189
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	81 83       	std	Z+1, r24	; 0x01
		PWMTim1_PIN.pin = PIN_Num ;
     fae:	f0 82       	st	Z, r15
		PWMTim1_PIN.pull = GPIO_NOPULL ;
     fb0:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
     fb2:	bf 01       	movw	r22, r30
     fb4:	c8 01       	movw	r24, r16
     fb6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <HAL_GPIO_Pin_Init>
		PWMTim1_PORT = PORT ;
     fba:	10 93 b7 00 	sts	0x00B7, r17	; 0x8000b7 <PWMTim1_PORT+0x1>
     fbe:	00 93 b6 00 	sts	0x00B6, r16	; 0x8000b6 <PWMTim1_PORT>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
     fc2:	66 e2       	ldi	r22, 0x26	; 38
     fc4:	77 e0       	ldi	r23, 0x07	; 7
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	0e 94 aa 06 	call	0xd54	; 0xd54 <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	1f c0       	rjmp	.+62     	; 0x100e <Software_PWM_Init+0xd4>
		PWMTim1_PIN.pin = PIN_Num ;
		PWMTim1_PIN.pull = GPIO_NOPULL ;
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
		PWMTim1_PORT = PORT ;
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
	}else if(Tim_PWM_Handler->Instance == TIM2)
     fd0:	92 30       	cpi	r25, 0x02	; 2
     fd2:	e1 f4       	brne	.+56     	; 0x100c <Software_PWM_Init+0xd2>
	{	
		PWMTim2_PIN.mode = GPIO_MODE_OUTPUT ;
     fd4:	ea eb       	ldi	r30, 0xBA	; 186
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	81 83       	std	Z+1, r24	; 0x01
		PWMTim2_PIN.pin = PIN_Num ;
     fdc:	f0 82       	st	Z, r15
		PWMTim2_PIN.pull = GPIO_NOPULL ;
     fde:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim2_PIN );	
     fe0:	bf 01       	movw	r22, r30
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <HAL_GPIO_Pin_Init>
		PWMTim2_PORT = PORT ;
     fe8:	10 93 b5 00 	sts	0x00B5, r17	; 0x8000b5 <PWMTim2_PORT+0x1>
     fec:	00 93 b4 00 	sts	0x00B4, r16	; 0x8000b4 <PWMTim2_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_2_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
     ff0:	64 ef       	ldi	r22, 0xF4	; 244
     ff2:	76 e0       	ldi	r23, 0x06	; 6
     ff4:	80 e4       	ldi	r24, 0x40	; 64
     ff6:	0e 94 aa 06 	call	0xd54	; 0xd54 <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
     ffa:	64 ef       	ldi	r22, 0xF4	; 244
     ffc:	76 e0       	ldi	r23, 0x06	; 6
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	0e 94 aa 06 	call	0xd54	; 0xd54 <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	03 c0       	rjmp	.+6      	; 0x100e <Software_PWM_Init+0xd4>
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
	
	if(Tim_PWM_Handler == NULL)
	{
		return UTIL_PARAM_ERROR ;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	01 c0       	rjmp	.+2      	; 0x100e <Software_PWM_Init+0xd4>
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
		
	}else
	{
		return UTIL_TIM_ERROR ;
    100c:	82 e0       	ldi	r24, 0x02	; 2
		
	
	
	return  UTIL_OK ; 
	
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	08 95       	ret

0000101a <Software_PWM_Start>:


Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	21 f0       	breq	.+8      	; 0x1026 <Software_PWM_Start+0xc>
	}else
	{
		;
	}
	
	TIM_Start(TIMConfig) ;
    101e:	0e 94 b8 05 	call	0xb70	; 0xb70 <TIM_Start>
	return UTIL_OK ;
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret
Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
	{
		return UTIL_PARAM_ERROR ;
    1026:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM_Start(TIMConfig) ;
	return UTIL_OK ;

}
    1028:	08 95       	ret

0000102a <Software_PWM_UpdateDuty>:
 * param (input): Tim_PWM_Handler pointer to selected timer configuration that contain Prescaller 
 * param (input): SetDuty desired Duty cycle From (0 t0 100 )
 * return : Utilies_Status_t status 
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
		if (Tim_PWM_Handler == NULL)
    1040:	61 15       	cp	r22, r1
    1042:	71 05       	cpc	r23, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <Software_PWM_UpdateDuty+0x1e>
    1046:	71 c0       	rjmp	.+226    	; 0x112a <Software_PWM_UpdateDuty+0x100>
    1048:	eb 01       	movw	r28, r22
    104a:	18 2f       	mov	r17, r24
		{
			return UTIL_PARAM_ERROR ;
			}else
			{
				 if(TIM_Stop(Tim_PWM_Handler->Instance) == TIM_OK)
    104c:	88 85       	ldd	r24, Y+8	; 0x08
    104e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIM_Stop>
    1052:	81 11       	cpse	r24, r1
    1054:	6c c0       	rjmp	.+216    	; 0x112e <Software_PWM_UpdateDuty+0x104>
				 {
	
						if(TIM_PWMMode_SetDuty(Tim_PWM_Handler , SetDuty) == TIM_OK)
    1056:	61 2f       	mov	r22, r17
    1058:	ce 01       	movw	r24, r28
    105a:	0e 94 14 05 	call	0xa28	; 0xa28 <TIM_PWMMode_SetDuty>
    105e:	81 11       	cpse	r24, r1
    1060:	68 c0       	rjmp	.+208    	; 0x1132 <Software_PWM_UpdateDuty+0x108>
						{
							if(TIM_Start(Tim_PWM_Handler) == TIM_OK)
    1062:	ce 01       	movw	r24, r28
    1064:	0e 94 b8 05 	call	0xb70	; 0xb70 <TIM_Start>
    1068:	81 11       	cpse	r24, r1
    106a:	65 c0       	rjmp	.+202    	; 0x1136 <Software_PWM_UpdateDuty+0x10c>
			}
			
		
			
			
			if (Tim_PWM_Handler->Instance == TIM1)
    106c:	88 85       	ldd	r24, Y+8	; 0x08
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	41 f5       	brne	.+80     	; 0x10c2 <Software_PWM_UpdateDuty+0x98>
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
    1072:	88 81       	ld	r24, Y
    1074:	99 81       	ldd	r25, Y+1	; 0x01
    1076:	aa 81       	ldd	r26, Y+2	; 0x02
    1078:	bb 81       	ldd	r27, Y+3	; 0x03
    107a:	4c 01       	movw	r8, r24
    107c:	5d 01       	movw	r10, r26
    107e:	2f e0       	ldi	r18, 0x0F	; 15
    1080:	92 22       	and	r9, r18
    1082:	aa 24       	eor	r10, r10
    1084:	bb 24       	eor	r11, r11
    1086:	61 2f       	mov	r22, r17
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 4d 09 	call	0x129a	; 0x129a <__floatsisf>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	48 ec       	ldi	r20, 0xC8	; 200
    1098:	52 e4       	ldi	r21, 0x42	; 66
    109a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__mulsf3>
    109e:	6b 01       	movw	r12, r22
    10a0:	7c 01       	movw	r14, r24
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	0e 94 4b 09 	call	0x1296	; 0x1296 <__floatunsisf>
    10aa:	a7 01       	movw	r20, r14
    10ac:	96 01       	movw	r18, r12
    10ae:	0e 94 aa 08 	call	0x1154	; 0x1154 <__divsf3>
    10b2:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fixunssfsi>
    10b6:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <Duty_TIM1+0x1>
    10ba:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <Duty_TIM1>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	3d c0       	rjmp	.+122    	; 0x113c <Software_PWM_UpdateDuty+0x112>
			if (Tim_PWM_Handler->Instance == TIM1)
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
    10c2:	81 11       	cpse	r24, r1
    10c4:	18 c0       	rjmp	.+48     	; 0x10f6 <Software_PWM_UpdateDuty+0xcc>
			{
				  Duty_TIM0 = (255 *(SetDuty/100.0));
    10c6:	61 2f       	mov	r22, r17
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 4d 09 	call	0x129a	; 0x129a <__floatsisf>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	48 ec       	ldi	r20, 0xC8	; 200
    10d8:	52 e4       	ldi	r21, 0x42	; 66
    10da:	0e 94 aa 08 	call	0x1154	; 0x1154 <__divsf3>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	53 e4       	ldi	r21, 0x43	; 67
    10e6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__mulsf3>
    10ea:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fixunssfsi>
    10ee:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <Duty_TIM0>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	23 c0       	rjmp	.+70     	; 0x113c <Software_PWM_UpdateDuty+0x112>
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
			{
				  Duty_TIM0 = (255 *(SetDuty/100.0));
			}else if (Tim_PWM_Handler->Instance == TIM2)
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	01 f5       	brne	.+64     	; 0x113a <Software_PWM_UpdateDuty+0x110>
			{
				 Duty_TIM2 = (uint8_t)(255 * (SetDuty/100.0) );
    10fa:	61 2f       	mov	r22, r17
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 4d 09 	call	0x129a	; 0x129a <__floatsisf>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	48 ec       	ldi	r20, 0xC8	; 200
    110c:	52 e4       	ldi	r21, 0x42	; 66
    110e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__divsf3>
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	53 e4       	ldi	r21, 0x43	; 67
    111a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__mulsf3>
    111e:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fixunssfsi>
    1122:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <Duty_TIM2>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	09 c0       	rjmp	.+18     	; 0x113c <Software_PWM_UpdateDuty+0x112>
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
		if (Tim_PWM_Handler == NULL)
		{
			return UTIL_PARAM_ERROR ;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	07 c0       	rjmp	.+14     	; 0x113c <Software_PWM_UpdateDuty+0x112>
							return UTIL_TIM_ERROR ;
						}
					}
					else
					{
						return UTIL_TIM_ERROR ; 
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	05 c0       	rjmp	.+10     	; 0x113c <Software_PWM_UpdateDuty+0x112>
								return UTIL_TIM_ERROR ;
							}
						}
						else
						{
							return UTIL_TIM_ERROR ;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	03 c0       	rjmp	.+6      	; 0x113c <Software_PWM_UpdateDuty+0x112>
							{
								;
							}
							else
							{
								return UTIL_TIM_ERROR ;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	01 c0       	rjmp	.+2      	; 0x113c <Software_PWM_UpdateDuty+0x112>
			}else if (Tim_PWM_Handler->Instance == TIM2)
			{
				 Duty_TIM2 = (uint8_t)(255 * (SetDuty/100.0) );
			}else
			{
				return UTIL_TIM_ERROR ;
    113a:	82 e0       	ldi	r24, 0x02	; 2
			}
			#endif 
			
		
		return UTIL_OK ; 
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	8f 90       	pop	r8
    1152:	08 95       	ret

00001154 <__divsf3>:
    1154:	0e 94 be 08 	call	0x117c	; 0x117c <__divsf3x>
    1158:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__fp_round>
    115c:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_pscB>
    1160:	58 f0       	brcs	.+22     	; 0x1178 <__divsf3+0x24>
    1162:	0e 94 91 09 	call	0x1322	; 0x1322 <__fp_pscA>
    1166:	40 f0       	brcs	.+16     	; 0x1178 <__divsf3+0x24>
    1168:	29 f4       	brne	.+10     	; 0x1174 <__divsf3+0x20>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	29 f0       	breq	.+10     	; 0x1178 <__divsf3+0x24>
    116e:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__fp_inf>
    1172:	51 11       	cpse	r21, r1
    1174:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_szero>
    1178:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_nan>

0000117c <__divsf3x>:
    117c:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_split3>
    1180:	68 f3       	brcs	.-38     	; 0x115c <__divsf3+0x8>

00001182 <__divsf3_pse>:
    1182:	99 23       	and	r25, r25
    1184:	b1 f3       	breq	.-20     	; 0x1172 <__divsf3+0x1e>
    1186:	55 23       	and	r21, r21
    1188:	91 f3       	breq	.-28     	; 0x116e <__divsf3+0x1a>
    118a:	95 1b       	sub	r25, r21
    118c:	55 0b       	sbc	r21, r21
    118e:	bb 27       	eor	r27, r27
    1190:	aa 27       	eor	r26, r26
    1192:	62 17       	cp	r22, r18
    1194:	73 07       	cpc	r23, r19
    1196:	84 07       	cpc	r24, r20
    1198:	38 f0       	brcs	.+14     	; 0x11a8 <__divsf3_pse+0x26>
    119a:	9f 5f       	subi	r25, 0xFF	; 255
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	44 1f       	adc	r20, r20
    11a4:	aa 1f       	adc	r26, r26
    11a6:	a9 f3       	breq	.-22     	; 0x1192 <__divsf3_pse+0x10>
    11a8:	35 d0       	rcall	.+106    	; 0x1214 <__divsf3_pse+0x92>
    11aa:	0e 2e       	mov	r0, r30
    11ac:	3a f0       	brmi	.+14     	; 0x11bc <__divsf3_pse+0x3a>
    11ae:	e0 e8       	ldi	r30, 0x80	; 128
    11b0:	32 d0       	rcall	.+100    	; 0x1216 <__divsf3_pse+0x94>
    11b2:	91 50       	subi	r25, 0x01	; 1
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	e6 95       	lsr	r30
    11b8:	00 1c       	adc	r0, r0
    11ba:	ca f7       	brpl	.-14     	; 0x11ae <__divsf3_pse+0x2c>
    11bc:	2b d0       	rcall	.+86     	; 0x1214 <__divsf3_pse+0x92>
    11be:	fe 2f       	mov	r31, r30
    11c0:	29 d0       	rcall	.+82     	; 0x1214 <__divsf3_pse+0x92>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	bb 1f       	adc	r27, r27
    11ca:	26 17       	cp	r18, r22
    11cc:	37 07       	cpc	r19, r23
    11ce:	48 07       	cpc	r20, r24
    11d0:	ab 07       	cpc	r26, r27
    11d2:	b0 e8       	ldi	r27, 0x80	; 128
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <__divsf3_pse+0x56>
    11d6:	bb 0b       	sbc	r27, r27
    11d8:	80 2d       	mov	r24, r0
    11da:	bf 01       	movw	r22, r30
    11dc:	ff 27       	eor	r31, r31
    11de:	93 58       	subi	r25, 0x83	; 131
    11e0:	5f 4f       	sbci	r21, 0xFF	; 255
    11e2:	3a f0       	brmi	.+14     	; 0x11f2 <__divsf3_pse+0x70>
    11e4:	9e 3f       	cpi	r25, 0xFE	; 254
    11e6:	51 05       	cpc	r21, r1
    11e8:	78 f0       	brcs	.+30     	; 0x1208 <__divsf3_pse+0x86>
    11ea:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__fp_inf>
    11ee:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_szero>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	e4 f3       	brlt	.-8      	; 0x11ee <__divsf3_pse+0x6c>
    11f6:	98 3e       	cpi	r25, 0xE8	; 232
    11f8:	d4 f3       	brlt	.-12     	; 0x11ee <__divsf3_pse+0x6c>
    11fa:	86 95       	lsr	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f7 95       	ror	r31
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	c9 f7       	brne	.-14     	; 0x11fa <__divsf3_pse+0x78>
    1208:	88 0f       	add	r24, r24
    120a:	91 1d       	adc	r25, r1
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	97 f9       	bld	r25, 7
    1212:	08 95       	ret
    1214:	e1 e0       	ldi	r30, 0x01	; 1
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	bb 1f       	adc	r27, r27
    121e:	62 17       	cp	r22, r18
    1220:	73 07       	cpc	r23, r19
    1222:	84 07       	cpc	r24, r20
    1224:	ba 07       	cpc	r27, r26
    1226:	20 f0       	brcs	.+8      	; 0x1230 <__divsf3_pse+0xae>
    1228:	62 1b       	sub	r22, r18
    122a:	73 0b       	sbc	r23, r19
    122c:	84 0b       	sbc	r24, r20
    122e:	ba 0b       	sbc	r27, r26
    1230:	ee 1f       	adc	r30, r30
    1232:	88 f7       	brcc	.-30     	; 0x1216 <__divsf3_pse+0x94>
    1234:	e0 95       	com	r30
    1236:	08 95       	ret

00001238 <__fixunssfsi>:
    1238:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_splitA>
    123c:	88 f0       	brcs	.+34     	; 0x1260 <__fixunssfsi+0x28>
    123e:	9f 57       	subi	r25, 0x7F	; 127
    1240:	98 f0       	brcs	.+38     	; 0x1268 <__fixunssfsi+0x30>
    1242:	b9 2f       	mov	r27, r25
    1244:	99 27       	eor	r25, r25
    1246:	b7 51       	subi	r27, 0x17	; 23
    1248:	b0 f0       	brcs	.+44     	; 0x1276 <__fixunssfsi+0x3e>
    124a:	e1 f0       	breq	.+56     	; 0x1284 <__fixunssfsi+0x4c>
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	1a f0       	brmi	.+6      	; 0x125c <__fixunssfsi+0x24>
    1256:	ba 95       	dec	r27
    1258:	c9 f7       	brne	.-14     	; 0x124c <__fixunssfsi+0x14>
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <__fixunssfsi+0x4c>
    125c:	b1 30       	cpi	r27, 0x01	; 1
    125e:	91 f0       	breq	.+36     	; 0x1284 <__fixunssfsi+0x4c>
    1260:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__fp_zero>
    1264:	b1 e0       	ldi	r27, 0x01	; 1
    1266:	08 95       	ret
    1268:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_zero>
    126c:	67 2f       	mov	r22, r23
    126e:	78 2f       	mov	r23, r24
    1270:	88 27       	eor	r24, r24
    1272:	b8 5f       	subi	r27, 0xF8	; 248
    1274:	39 f0       	breq	.+14     	; 0x1284 <__fixunssfsi+0x4c>
    1276:	b9 3f       	cpi	r27, 0xF9	; 249
    1278:	cc f3       	brlt	.-14     	; 0x126c <__fixunssfsi+0x34>
    127a:	86 95       	lsr	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	b3 95       	inc	r27
    1282:	d9 f7       	brne	.-10     	; 0x127a <__fixunssfsi+0x42>
    1284:	3e f4       	brtc	.+14     	; 0x1294 <__fixunssfsi+0x5c>
    1286:	90 95       	com	r25
    1288:	80 95       	com	r24
    128a:	70 95       	com	r23
    128c:	61 95       	neg	r22
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	08 95       	ret

00001296 <__floatunsisf>:
    1296:	e8 94       	clt
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <__floatsisf+0x12>

0000129a <__floatsisf>:
    129a:	97 fb       	bst	r25, 7
    129c:	3e f4       	brtc	.+14     	; 0x12ac <__floatsisf+0x12>
    129e:	90 95       	com	r25
    12a0:	80 95       	com	r24
    12a2:	70 95       	com	r23
    12a4:	61 95       	neg	r22
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	8f 4f       	sbci	r24, 0xFF	; 255
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	99 23       	and	r25, r25
    12ae:	a9 f0       	breq	.+42     	; 0x12da <__floatsisf+0x40>
    12b0:	f9 2f       	mov	r31, r25
    12b2:	96 e9       	ldi	r25, 0x96	; 150
    12b4:	bb 27       	eor	r27, r27
    12b6:	93 95       	inc	r25
    12b8:	f6 95       	lsr	r31
    12ba:	87 95       	ror	r24
    12bc:	77 95       	ror	r23
    12be:	67 95       	ror	r22
    12c0:	b7 95       	ror	r27
    12c2:	f1 11       	cpse	r31, r1
    12c4:	f8 cf       	rjmp	.-16     	; 0x12b6 <__floatsisf+0x1c>
    12c6:	fa f4       	brpl	.+62     	; 0x1306 <__floatsisf+0x6c>
    12c8:	bb 0f       	add	r27, r27
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <__floatsisf+0x36>
    12cc:	60 ff       	sbrs	r22, 0
    12ce:	1b c0       	rjmp	.+54     	; 0x1306 <__floatsisf+0x6c>
    12d0:	6f 5f       	subi	r22, 0xFF	; 255
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	16 c0       	rjmp	.+44     	; 0x1306 <__floatsisf+0x6c>
    12da:	88 23       	and	r24, r24
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <__floatsisf+0x48>
    12de:	96 e9       	ldi	r25, 0x96	; 150
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <__floatsisf+0x6a>
    12e2:	77 23       	and	r23, r23
    12e4:	21 f0       	breq	.+8      	; 0x12ee <__floatsisf+0x54>
    12e6:	9e e8       	ldi	r25, 0x8E	; 142
    12e8:	87 2f       	mov	r24, r23
    12ea:	76 2f       	mov	r23, r22
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <__floatsisf+0x5e>
    12ee:	66 23       	and	r22, r22
    12f0:	71 f0       	breq	.+28     	; 0x130e <__floatsisf+0x74>
    12f2:	96 e8       	ldi	r25, 0x86	; 134
    12f4:	86 2f       	mov	r24, r22
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	2a f0       	brmi	.+10     	; 0x1306 <__floatsisf+0x6c>
    12fc:	9a 95       	dec	r25
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	da f7       	brpl	.-10     	; 0x12fc <__floatsisf+0x62>
    1306:	88 0f       	add	r24, r24
    1308:	96 95       	lsr	r25
    130a:	87 95       	ror	r24
    130c:	97 f9       	bld	r25, 7
    130e:	08 95       	ret

00001310 <__fp_inf>:
    1310:	97 f9       	bld	r25, 7
    1312:	9f 67       	ori	r25, 0x7F	; 127
    1314:	80 e8       	ldi	r24, 0x80	; 128
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	08 95       	ret

0000131c <__fp_nan>:
    131c:	9f ef       	ldi	r25, 0xFF	; 255
    131e:	80 ec       	ldi	r24, 0xC0	; 192
    1320:	08 95       	ret

00001322 <__fp_pscA>:
    1322:	00 24       	eor	r0, r0
    1324:	0a 94       	dec	r0
    1326:	16 16       	cp	r1, r22
    1328:	17 06       	cpc	r1, r23
    132a:	18 06       	cpc	r1, r24
    132c:	09 06       	cpc	r0, r25
    132e:	08 95       	ret

00001330 <__fp_pscB>:
    1330:	00 24       	eor	r0, r0
    1332:	0a 94       	dec	r0
    1334:	12 16       	cp	r1, r18
    1336:	13 06       	cpc	r1, r19
    1338:	14 06       	cpc	r1, r20
    133a:	05 06       	cpc	r0, r21
    133c:	08 95       	ret

0000133e <__fp_round>:
    133e:	09 2e       	mov	r0, r25
    1340:	03 94       	inc	r0
    1342:	00 0c       	add	r0, r0
    1344:	11 f4       	brne	.+4      	; 0x134a <__fp_round+0xc>
    1346:	88 23       	and	r24, r24
    1348:	52 f0       	brmi	.+20     	; 0x135e <__fp_round+0x20>
    134a:	bb 0f       	add	r27, r27
    134c:	40 f4       	brcc	.+16     	; 0x135e <__fp_round+0x20>
    134e:	bf 2b       	or	r27, r31
    1350:	11 f4       	brne	.+4      	; 0x1356 <__fp_round+0x18>
    1352:	60 ff       	sbrs	r22, 0
    1354:	04 c0       	rjmp	.+8      	; 0x135e <__fp_round+0x20>
    1356:	6f 5f       	subi	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	8f 4f       	sbci	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__fp_split3>:
    1360:	57 fd       	sbrc	r21, 7
    1362:	90 58       	subi	r25, 0x80	; 128
    1364:	44 0f       	add	r20, r20
    1366:	55 1f       	adc	r21, r21
    1368:	59 f0       	breq	.+22     	; 0x1380 <__fp_splitA+0x10>
    136a:	5f 3f       	cpi	r21, 0xFF	; 255
    136c:	71 f0       	breq	.+28     	; 0x138a <__fp_splitA+0x1a>
    136e:	47 95       	ror	r20

00001370 <__fp_splitA>:
    1370:	88 0f       	add	r24, r24
    1372:	97 fb       	bst	r25, 7
    1374:	99 1f       	adc	r25, r25
    1376:	61 f0       	breq	.+24     	; 0x1390 <__fp_splitA+0x20>
    1378:	9f 3f       	cpi	r25, 0xFF	; 255
    137a:	79 f0       	breq	.+30     	; 0x139a <__fp_splitA+0x2a>
    137c:	87 95       	ror	r24
    137e:	08 95       	ret
    1380:	12 16       	cp	r1, r18
    1382:	13 06       	cpc	r1, r19
    1384:	14 06       	cpc	r1, r20
    1386:	55 1f       	adc	r21, r21
    1388:	f2 cf       	rjmp	.-28     	; 0x136e <__fp_split3+0xe>
    138a:	46 95       	lsr	r20
    138c:	f1 df       	rcall	.-30     	; 0x1370 <__fp_splitA>
    138e:	08 c0       	rjmp	.+16     	; 0x13a0 <__fp_splitA+0x30>
    1390:	16 16       	cp	r1, r22
    1392:	17 06       	cpc	r1, r23
    1394:	18 06       	cpc	r1, r24
    1396:	99 1f       	adc	r25, r25
    1398:	f1 cf       	rjmp	.-30     	; 0x137c <__fp_splitA+0xc>
    139a:	86 95       	lsr	r24
    139c:	71 05       	cpc	r23, r1
    139e:	61 05       	cpc	r22, r1
    13a0:	08 94       	sec
    13a2:	08 95       	ret

000013a4 <__fp_zero>:
    13a4:	e8 94       	clt

000013a6 <__fp_szero>:
    13a6:	bb 27       	eor	r27, r27
    13a8:	66 27       	eor	r22, r22
    13aa:	77 27       	eor	r23, r23
    13ac:	cb 01       	movw	r24, r22
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret

000013b2 <__mulsf3>:
    13b2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3x>
    13b6:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__fp_round>
    13ba:	0e 94 91 09 	call	0x1322	; 0x1322 <__fp_pscA>
    13be:	38 f0       	brcs	.+14     	; 0x13ce <__mulsf3+0x1c>
    13c0:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_pscB>
    13c4:	20 f0       	brcs	.+8      	; 0x13ce <__mulsf3+0x1c>
    13c6:	95 23       	and	r25, r21
    13c8:	11 f0       	breq	.+4      	; 0x13ce <__mulsf3+0x1c>
    13ca:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__fp_inf>
    13ce:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_nan>
    13d2:	11 24       	eor	r1, r1
    13d4:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_szero>

000013d8 <__mulsf3x>:
    13d8:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_split3>
    13dc:	70 f3       	brcs	.-36     	; 0x13ba <__mulsf3+0x8>

000013de <__mulsf3_pse>:
    13de:	95 9f       	mul	r25, r21
    13e0:	c1 f3       	breq	.-16     	; 0x13d2 <__mulsf3+0x20>
    13e2:	95 0f       	add	r25, r21
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	55 1f       	adc	r21, r21
    13e8:	62 9f       	mul	r22, r18
    13ea:	f0 01       	movw	r30, r0
    13ec:	72 9f       	mul	r23, r18
    13ee:	bb 27       	eor	r27, r27
    13f0:	f0 0d       	add	r31, r0
    13f2:	b1 1d       	adc	r27, r1
    13f4:	63 9f       	mul	r22, r19
    13f6:	aa 27       	eor	r26, r26
    13f8:	f0 0d       	add	r31, r0
    13fa:	b1 1d       	adc	r27, r1
    13fc:	aa 1f       	adc	r26, r26
    13fe:	64 9f       	mul	r22, r20
    1400:	66 27       	eor	r22, r22
    1402:	b0 0d       	add	r27, r0
    1404:	a1 1d       	adc	r26, r1
    1406:	66 1f       	adc	r22, r22
    1408:	82 9f       	mul	r24, r18
    140a:	22 27       	eor	r18, r18
    140c:	b0 0d       	add	r27, r0
    140e:	a1 1d       	adc	r26, r1
    1410:	62 1f       	adc	r22, r18
    1412:	73 9f       	mul	r23, r19
    1414:	b0 0d       	add	r27, r0
    1416:	a1 1d       	adc	r26, r1
    1418:	62 1f       	adc	r22, r18
    141a:	83 9f       	mul	r24, r19
    141c:	a0 0d       	add	r26, r0
    141e:	61 1d       	adc	r22, r1
    1420:	22 1f       	adc	r18, r18
    1422:	74 9f       	mul	r23, r20
    1424:	33 27       	eor	r19, r19
    1426:	a0 0d       	add	r26, r0
    1428:	61 1d       	adc	r22, r1
    142a:	23 1f       	adc	r18, r19
    142c:	84 9f       	mul	r24, r20
    142e:	60 0d       	add	r22, r0
    1430:	21 1d       	adc	r18, r1
    1432:	82 2f       	mov	r24, r18
    1434:	76 2f       	mov	r23, r22
    1436:	6a 2f       	mov	r22, r26
    1438:	11 24       	eor	r1, r1
    143a:	9f 57       	subi	r25, 0x7F	; 127
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	9a f0       	brmi	.+38     	; 0x1466 <__mulsf3_pse+0x88>
    1440:	f1 f0       	breq	.+60     	; 0x147e <__mulsf3_pse+0xa0>
    1442:	88 23       	and	r24, r24
    1444:	4a f0       	brmi	.+18     	; 0x1458 <__mulsf3_pse+0x7a>
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	bb 1f       	adc	r27, r27
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	a9 f7       	brne	.-22     	; 0x1442 <__mulsf3_pse+0x64>
    1458:	9e 3f       	cpi	r25, 0xFE	; 254
    145a:	51 05       	cpc	r21, r1
    145c:	80 f0       	brcs	.+32     	; 0x147e <__mulsf3_pse+0xa0>
    145e:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__fp_inf>
    1462:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_szero>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	e4 f3       	brlt	.-8      	; 0x1462 <__mulsf3_pse+0x84>
    146a:	98 3e       	cpi	r25, 0xE8	; 232
    146c:	d4 f3       	brlt	.-12     	; 0x1462 <__mulsf3_pse+0x84>
    146e:	86 95       	lsr	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b7 95       	ror	r27
    1476:	f7 95       	ror	r31
    1478:	e7 95       	ror	r30
    147a:	9f 5f       	subi	r25, 0xFF	; 255
    147c:	c1 f7       	brne	.-16     	; 0x146e <__mulsf3_pse+0x90>
    147e:	fe 2b       	or	r31, r30
    1480:	88 0f       	add	r24, r24
    1482:	91 1d       	adc	r25, r1
    1484:	96 95       	lsr	r25
    1486:	87 95       	ror	r24
    1488:	97 f9       	bld	r25, 7
    148a:	08 95       	ret

0000148c <__divmodhi4>:
    148c:	97 fb       	bst	r25, 7
    148e:	07 2e       	mov	r0, r23
    1490:	16 f4       	brtc	.+4      	; 0x1496 <__divmodhi4+0xa>
    1492:	00 94       	com	r0
    1494:	07 d0       	rcall	.+14     	; 0x14a4 <__divmodhi4_neg1>
    1496:	77 fd       	sbrc	r23, 7
    1498:	09 d0       	rcall	.+18     	; 0x14ac <__divmodhi4_neg2>
    149a:	0e 94 87 0a 	call	0x150e	; 0x150e <__udivmodhi4>
    149e:	07 fc       	sbrc	r0, 7
    14a0:	05 d0       	rcall	.+10     	; 0x14ac <__divmodhi4_neg2>
    14a2:	3e f4       	brtc	.+14     	; 0x14b2 <__divmodhi4_exit>

000014a4 <__divmodhi4_neg1>:
    14a4:	90 95       	com	r25
    14a6:	81 95       	neg	r24
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	08 95       	ret

000014ac <__divmodhi4_neg2>:
    14ac:	70 95       	com	r23
    14ae:	61 95       	neg	r22
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255

000014b2 <__divmodhi4_exit>:
    14b2:	08 95       	ret

000014b4 <__udivmodsi4>:
    14b4:	a1 e2       	ldi	r26, 0x21	; 33
    14b6:	1a 2e       	mov	r1, r26
    14b8:	aa 1b       	sub	r26, r26
    14ba:	bb 1b       	sub	r27, r27
    14bc:	fd 01       	movw	r30, r26
    14be:	0d c0       	rjmp	.+26     	; 0x14da <__udivmodsi4_ep>

000014c0 <__udivmodsi4_loop>:
    14c0:	aa 1f       	adc	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	ee 1f       	adc	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	a2 17       	cp	r26, r18
    14ca:	b3 07       	cpc	r27, r19
    14cc:	e4 07       	cpc	r30, r20
    14ce:	f5 07       	cpc	r31, r21
    14d0:	20 f0       	brcs	.+8      	; 0x14da <__udivmodsi4_ep>
    14d2:	a2 1b       	sub	r26, r18
    14d4:	b3 0b       	sbc	r27, r19
    14d6:	e4 0b       	sbc	r30, r20
    14d8:	f5 0b       	sbc	r31, r21

000014da <__udivmodsi4_ep>:
    14da:	66 1f       	adc	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	1a 94       	dec	r1
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <__udivmodsi4_loop>
    14e6:	60 95       	com	r22
    14e8:	70 95       	com	r23
    14ea:	80 95       	com	r24
    14ec:	90 95       	com	r25
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	bd 01       	movw	r22, r26
    14f4:	cf 01       	movw	r24, r30
    14f6:	08 95       	ret

000014f8 <__muluhisi3>:
    14f8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__umulhisi3>
    14fc:	a5 9f       	mul	r26, r21
    14fe:	90 0d       	add	r25, r0
    1500:	b4 9f       	mul	r27, r20
    1502:	90 0d       	add	r25, r0
    1504:	a4 9f       	mul	r26, r20
    1506:	80 0d       	add	r24, r0
    1508:	91 1d       	adc	r25, r1
    150a:	11 24       	eor	r1, r1
    150c:	08 95       	ret

0000150e <__udivmodhi4>:
    150e:	aa 1b       	sub	r26, r26
    1510:	bb 1b       	sub	r27, r27
    1512:	51 e1       	ldi	r21, 0x11	; 17
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <__udivmodhi4_ep>

00001516 <__udivmodhi4_loop>:
    1516:	aa 1f       	adc	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	a6 17       	cp	r26, r22
    151c:	b7 07       	cpc	r27, r23
    151e:	10 f0       	brcs	.+4      	; 0x1524 <__udivmodhi4_ep>
    1520:	a6 1b       	sub	r26, r22
    1522:	b7 0b       	sbc	r27, r23

00001524 <__udivmodhi4_ep>:
    1524:	88 1f       	adc	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	5a 95       	dec	r21
    152a:	a9 f7       	brne	.-22     	; 0x1516 <__udivmodhi4_loop>
    152c:	80 95       	com	r24
    152e:	90 95       	com	r25
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	08 95       	ret

00001536 <__umulhisi3>:
    1536:	a2 9f       	mul	r26, r18
    1538:	b0 01       	movw	r22, r0
    153a:	b3 9f       	mul	r27, r19
    153c:	c0 01       	movw	r24, r0
    153e:	a3 9f       	mul	r26, r19
    1540:	70 0d       	add	r23, r0
    1542:	81 1d       	adc	r24, r1
    1544:	11 24       	eor	r1, r1
    1546:	91 1d       	adc	r25, r1
    1548:	b2 9f       	mul	r27, r18
    154a:	70 0d       	add	r23, r0
    154c:	81 1d       	adc	r24, r1
    154e:	11 24       	eor	r1, r1
    1550:	91 1d       	adc	r25, r1
    1552:	08 95       	ret

00001554 <__itoa_ncheck>:
    1554:	bb 27       	eor	r27, r27
    1556:	4a 30       	cpi	r20, 0x0A	; 10
    1558:	31 f4       	brne	.+12     	; 0x1566 <__itoa_ncheck+0x12>
    155a:	99 23       	and	r25, r25
    155c:	22 f4       	brpl	.+8      	; 0x1566 <__itoa_ncheck+0x12>
    155e:	bd e2       	ldi	r27, 0x2D	; 45
    1560:	90 95       	com	r25
    1562:	81 95       	neg	r24
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__utoa_common>

0000156a <__utoa_ncheck>:
    156a:	bb 27       	eor	r27, r27

0000156c <__utoa_common>:
    156c:	fb 01       	movw	r30, r22
    156e:	55 27       	eor	r21, r21
    1570:	aa 27       	eor	r26, r26
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	aa 1f       	adc	r26, r26
    1578:	a4 17       	cp	r26, r20
    157a:	10 f0       	brcs	.+4      	; 0x1580 <__utoa_common+0x14>
    157c:	a4 1b       	sub	r26, r20
    157e:	83 95       	inc	r24
    1580:	50 51       	subi	r21, 0x10	; 16
    1582:	b9 f7       	brne	.-18     	; 0x1572 <__utoa_common+0x6>
    1584:	a0 5d       	subi	r26, 0xD0	; 208
    1586:	aa 33       	cpi	r26, 0x3A	; 58
    1588:	08 f0       	brcs	.+2      	; 0x158c <__utoa_common+0x20>
    158a:	a9 5d       	subi	r26, 0xD9	; 217
    158c:	a1 93       	st	Z+, r26
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	79 f7       	brne	.-34     	; 0x1570 <__utoa_common+0x4>
    1592:	b1 11       	cpse	r27, r1
    1594:	b1 93       	st	Z+, r27
    1596:	11 92       	st	Z+, r1
    1598:	cb 01       	movw	r24, r22
    159a:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <strrev>

0000159e <strrev>:
    159e:	dc 01       	movw	r26, r24
    15a0:	fc 01       	movw	r30, r24
    15a2:	67 2f       	mov	r22, r23
    15a4:	71 91       	ld	r23, Z+
    15a6:	77 23       	and	r23, r23
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <strrev+0x4>
    15aa:	32 97       	sbiw	r30, 0x02	; 2
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <strrev+0x18>
    15ae:	7c 91       	ld	r23, X
    15b0:	6d 93       	st	X+, r22
    15b2:	70 83       	st	Z, r23
    15b4:	62 91       	ld	r22, -Z
    15b6:	ae 17       	cp	r26, r30
    15b8:	bf 07       	cpc	r27, r31
    15ba:	c8 f3       	brcs	.-14     	; 0x15ae <strrev+0x10>
    15bc:	08 95       	ret

000015be <_exit>:
    15be:	f8 94       	cli

000015c0 <__stop_program>:
    15c0:	ff cf       	rjmp	.-2      	; 0x15c0 <__stop_program>
