/******************************************************************************
 *
 * [MODULE]: KEYPAD
 *
 * [FILE NAME]: keypad.c
 *
 * [DESCRIPTION]: Source file for the Keypad driver
 *
 * [AUTHOR]: Ahmed Hassan
 *
 *******************************************************************************/

#include "keypad.h"

/*******************************************************************************
 *                      Functions Prototypes(Private)                          *
 *******************************************************************************/

#if (N_col == 3)
/*
 * Description: Function responsible for mapping the switch number in the keypad to
 * its corresponding functional number in the proteus for 4x3 keypad
 */
static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t button_number);
#elif (N_col == 4)
/*
 * Description: Function responsible for mapping the switch number in the keypad to
 * its corresponding functional number in the proteus for 4x4 keypad
 */
static uint8_t KeyPad_4x4_adjustKeyNumber(uint8 button_number);
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*******************************************************************************
* Service Name: KEYPAD_Init
* Service ID[hex]: 0x10
* Sync/Async: Synchronous
* Reentrancy: Non reentrant
* Parameters (in): void
* Parameters (in/out): None
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function to Initialize the KEYPAD module
********************************************************************************/
Std_ReturnType KEYPAD_Init(void)
{
	/* Local variable to store the counter value */
	uint8_t au8_counter;

	/* Set columns pins to output initially High */
	for(au8_counter = 0; au8_counter < N_col; au8_counter++)
	{
		DIO_setPinDirection(KEYPAD_PORT, (PIN_4 | au8_counter), OUTPUT);
		DIO_writePin(KEYPAD_PORT, (PIN_4 | au8_counter), HIGH);
	}

	/* Set rows pins to input and set pull up resistors */
	for(au8_counter = 0; au8_counter < N_row; au8_counter++)
	{
		DIO_setPinDirection(KEYPAD_PORT, (PIN_0 | au8_counter), INPUT);
		DIO_writePin(KEYPAD_PORT, (PIN_0 | au8_counter), HIGH);
	}

	/* return success status */
	return E_OK;
}

/*******************************************************************************
* Service Name: KEYPAD_getPressedKey
* Service ID[hex]: 0x20
* Sync/Async: Synchronous
* Reentrancy: reentrant
* Parameters (in): void
* Parameters (in/out): None
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function responsible for getting the pressed keypad key
********************************************************************************/
Std_ReturnType KEYPAD_getPressedKey(uint8_t * au8_data)
{
	uint8_t au8_ColumnCounter;
	uint8_t au8_RowCounter;
	uint8_t au8_KeyStatus;
	uint8_t au8_Flag = NOT_PRESSED;

	DDRD = 0xFF;

	/* Loops on every column */
	for(au8_ColumnCounter = 0; au8_ColumnCounter < N_col; au8_ColumnCounter++)
	{
		/* Set column value to low */
		DIO_writePin(KEYPAD_PORT, (PIN_4 | au8_ColumnCounter) , LOW);

		/* Loops on every row */
		for(au8_RowCounter = 0; au8_RowCounter < N_row; au8_RowCounter++)
		{
			/* Read row value */
			DIO_readPin(KEYPAD_PORT, (PIN_0 | au8_RowCounter), &au8_KeyStatus);
			/* Check if row is pressed */
			if(au8_KeyStatus == PRESSED)
			{
				au8_Flag = PRESSED;
				*au8_data = KeyPad_4x3_adjustKeyNumber((au8_RowCounter * N_col) + (au8_ColumnCounter+1));

				if(au8_KeyStatus == PRESSED)
				{
					DIO_readPin(KEYPAD_PORT, (PIN_0 | au8_RowCounter), &au8_KeyStatus);
					PORTD = ~PORTD;
				}
				break;
			}
		}
		/* Return column value to HIGH */
		DIO_writePin(KEYPAD_PORT, (PIN_4 | au8_ColumnCounter), HIGH);

		if(PRESSED == au8_Flag)
		{
			break;
		}
	}
	/* return success status */
	return E_OK;
}

#if (N_col == 3) 
/*******************************************************************************
* Service Name: KeyPad_4x3_adjustKeyNumber
* Service ID[hex]: 0x30
* Sync/Async: Synchronous
* Reentrancy: reentrant
* Parameters (in): au8_button_number
* Parameters (in/out): None
* Parameters (out): None
* Return value: uint8_t
* Description: Function responsible for getting the actual number pressed
********************************************************************************/
static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t au8_button_number)
{
	switch(au8_button_number)
	{
	case 10: return '*'; /* ASCII Code of = */
	break;
	case 11: return 0;
	break;
	case 12: return '#'; /* ASCII Code of + */
	break;
	default: return au8_button_number;
	}
} 

#elif (N_col == 4)
/*******************************************************************************
* Service Name: KeyPad_4x4_adjustKeyNumber
* Service ID[hex]: 0x40
* Sync/Async: Synchronous
* Reentrancy: reentrant
* Parameters (in): au8_button_number
* Parameters (in/out): None
* Parameters (out): None
* Return value: uint8_t
* Description: Function responsible for getting the actual number pressed
********************************************************************************/
static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t au8_button_number)
{
	switch(au8_button_number)
	{
	case 1: return 7;
	break;
	case 2: return 8;
	break;
	case 3: return 9;
	break;
	case 4: return '%'; /* ASCII Code of % */
	break;
	case 5: return 4;
	break;
	case 6: return 5;
	break;
	case 7: return 6;
	break;
	case 8: return '*'; /* ASCII Code of '*' */
	break;
	case 9: return 1;
	break;
	case 10: return 2;
	break;
	case 11: return 3;
	break;
	case 12: return '-'; /* ASCII Code of '-' */
	break;
	case 13: return 13;  /* ASCII of Enter */
	break;
	case 14: return 0;
	break;
	case 15: return '='; /* ASCII Code of '=' */
	break;
	case 16: return '+'; /* ASCII Code of '+' */
	break;
	default: return au8_button_number;
	}
} 

#endif
