
MC2_EX1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000ee8  2**0
                  ALLOC
  2 .stab         0000174c  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000df3  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2f 07 	call	0xe5e	; 0xe5e <main>
  74:	0c 94 38 07 	jmp	0xe70	; 0xe70 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TWI_SetSlaveAddress>:

/*******************************************************************************
 * brief: Function To Set Slave address                                        *
 *******************************************************************************/
void TWI_SetSlaveAddress(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	TWAR = (SlaveAddr << 1); //Shift the register left
  84:	e2 e2       	ldi	r30, 0x22	; 34
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 e3       	ldi	r24, 0x30	; 48
  8a:	80 83       	st	Z, r24
}
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

00000092 <TWI_Init>:
/*******************************************************************************
 * brief: Function To Initialize TWI Module                                    *
 *******************************************************************************/
void TWI_Init()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*-----SET ADDRESS IN CASE OF IT'S IN SLAVE MODE---- */
	TWI_SetSlaveAddress();
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <TWI_SetSlaveAddress>
	/*-----SETTING THE FREQ-----*/
	TWBR = Bit_rate;
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8e e1       	ldi	r24, 0x1E	; 30
  a4:	80 83       	st	Z, r24
	TWSR &= Prescaler;
  a6:	a1 e2       	ldi	r26, 0x21	; 33
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e1 e2       	ldi	r30, 0x21	; 33
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	8c 93       	st	X, r24
	/*Initial Value for TWI_Control_REGISTER is zeros so I set only what I need and ignore the rest*/
	/*-----ENABLE ACKNOWLEDGE----*/
	Set_Bit(TWCR, TWEA);
  b4:	a6 e5       	ldi	r26, 0x56	; 86
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e6 e5       	ldi	r30, 0x56	; 86
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	8c 93       	st	X, r24
	/*-----ENABLE THE PREIPHERAL ITSELF-----*/
	Set_Bit(TWCR, TWEN);
  c2:	a6 e5       	ldi	r26, 0x56	; 86
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e6 e5       	ldi	r30, 0x56	; 86
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8c 93       	st	X, r24
}
  d0:	cf 91       	pop	r28
  d2:	df 91       	pop	r29
  d4:	08 95       	ret

000000d6 <TWI_SendStartCondition>:

/*******************************************************************************
 * brief: Function To Start TWI Module                                          *
 *******************************************************************************/
void TWI_SendStartCondition( )
{
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);//(EN_TWI | SEND_START | CLR_FLAG);
  de:	e6 e5       	ldi	r30, 0x56	; 86
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	84 ea       	ldi	r24, 0xA4	; 164
  e4:	80 83       	st	Z, r24
	while ((Get_Bit(TWCR, TWINT)) != 1)
  e6:	e6 e5       	ldi	r30, 0x56	; 86
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 1f       	adc	r24, r24
  ee:	88 27       	eor	r24, r24
  f0:	88 1f       	adc	r24, r24
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	c1 f7       	brne	.-16     	; 0xe6 <TWI_SendStartCondition+0x10>
		;/*Wait for TWINT Flag set.
		 This indicates that the START condition has been transmitted*/
}
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <TWI_SendStopCondition>:
/*******************************************************************************
 * brief: Function To Stop TWI Module                                          *
 *******************************************************************************/
void TWI_SendStopCondition( )
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
	/*Wait for TWINT Flag set.
			 This indicates that the STOP condition has been transmitted*/
	TWCR =(1<<TWEN)|(1<<TWSTO)|(1<<TWINT); //(EN_TWI | CLR_FLAG | SEND_STOP);
 104:	e6 e5       	ldi	r30, 0x56	; 86
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	84 e9       	ldi	r24, 0x94	; 148
 10a:	80 83       	st	Z, r24
}
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <TWI_SendSLAWrite>:
/*******************************************************************************
 * brief: Function To Write Address about another module                    *
 *******************************************************************************/
void TWI_SendSLAWrite(uint8_t SlvAdr)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	0f 92       	push	r0
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	89 83       	std	Y+1, r24	; 0x01

	TWDR = ((SlvAdr << 1) | 0);
 11e:	e3 e2       	ldi	r30, 0x23	; 35
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	88 0f       	add	r24, r24
 126:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);//(EN_TWI | CLR_FLAG);// CLEAR FLAG TO SEND DATA
 128:	e6 e5       	ldi	r30, 0x56	; 86
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 83       	st	Z, r24
	while (Get_Bit(TWCR,TWINT) == 0)
 130:	e6 e5       	ldi	r30, 0x56	; 86
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	dc f7       	brge	.-10     	; 0x130 <TWI_SendSLAWrite+0x1e>
		;

}
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret

00000142 <TWI_SendSLARead>:
/*******************************************************************************
 * brief: Function To Read From another module                              *
 *******************************************************************************/
void TWI_SendSLARead(  uint8_t SlvAdr) {
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	0f 92       	push	r0
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	89 83       	std	Y+1, r24	; 0x01
	TWDR = ((SlvAdr << 1) | 1);
 14e:	e3 e2       	ldi	r30, 0x23	; 35
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
	TWCR = (EN_TWI | CLR_FLAG);
 160:	e6 e5       	ldi	r30, 0x56	; 86
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 83       	st	Z, r24
	while (Get_Bit(TWCR,TWINT) == 0)
 168:	e6 e5       	ldi	r30, 0x56	; 86
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 23       	and	r24, r24
 170:	dc f7       	brge	.-10     	; 0x168 <TWI_SendSLARead+0x26>
		;
}
 172:	0f 90       	pop	r0
 174:	cf 91       	pop	r28
 176:	df 91       	pop	r29
 178:	08 95       	ret

0000017a <TWI_SendData>:
/*******************************************************************************
 * brief: Function To Write data in another module                          *
 *******************************************************************************/
void TWI_SendData(  uint8_t Data){
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	0f 92       	push	r0
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Data;
 186:	e3 e2       	ldi	r30, 0x23	; 35
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);//(EN_TWI | CLR_FLAG);
 18e:	e6 e5       	ldi	r30, 0x56	; 86
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	84 e8       	ldi	r24, 0x84	; 132
 194:	80 83       	st	Z, r24
	while (Get_Bit(TWCR,TWINT) == 0)
 196:	e6 e5       	ldi	r30, 0x56	; 86
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	dc f7       	brge	.-10     	; 0x196 <TWI_SendData+0x1c>
		;
}
 1a0:	0f 90       	pop	r0
 1a2:	cf 91       	pop	r28
 1a4:	df 91       	pop	r29
 1a6:	08 95       	ret

000001a8 <TWI_getStatus>:

/*******************************************************************************
 * brief: Function To Get the Status About TWI                                *
 *******************************************************************************/
uint8_t TWI_getStatus(void)
{
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 1b2:	e1 e2       	ldi	r30, 0x21	; 33
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 7f       	andi	r24, 0xF8	; 248
 1ba:	89 83       	std	Y+1, r24	; 0x01
    return status;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1be:	0f 90       	pop	r0
 1c0:	cf 91       	pop	r28
 1c2:	df 91       	pop	r29
 1c4:	08 95       	ret

000001c6 <TWI_SendChar>:
/*******************************************************************************
 * brief: Function To Send character to another module                         *
 *******************************************************************************/
void TWI_SendChar(  uint8_t SlvAdr, uint8_t Data)
{
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <TWI_SendChar+0x6>
 1cc:	0f 92       	push	r0
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	8a 83       	std	Y+2, r24	; 0x02
 1d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_counter =0;
 1d6:	19 82       	std	Y+1, r1	; 0x01
	/*SENDING START CONDITION*/
	for(au8_counter=0;au8_counter<100;au8_counter++);
 1d8:	19 82       	std	Y+1, r1	; 0x01
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <TWI_SendChar+0x1c>
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	84 36       	cpi	r24, 0x64	; 100
 1e6:	d0 f3       	brcs	.-12     	; 0x1dc <TWI_SendChar+0x16>
	TWI_SendStartCondition();
 1e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <TWI_SendStartCondition>
	/*--SEND SALVE ADDRESS WITH WRITE OPERATION--*/
	TWI_SendSLAWrite(SlvAdr);
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	0e 94 89 00 	call	0x112	; 0x112 <TWI_SendSLAWrite>
	for(au8_counter=0;au8_counter<100;au8_counter++);
 1f2:	19 82       	std	Y+1, r1	; 0x01
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <TWI_SendChar+0x36>
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	89 83       	std	Y+1, r24	; 0x01
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	84 36       	cpi	r24, 0x64	; 100
 200:	d0 f3       	brcs	.-12     	; 0x1f6 <TWI_SendChar+0x30>
	/*--SENDING DATA--*/
	TWI_SendData(Data);
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_SendData>
	for(au8_counter=0;au8_counter<100;au8_counter++);
 208:	19 82       	std	Y+1, r1	; 0x01
 20a:	03 c0       	rjmp	.+6      	; 0x212 <TWI_SendChar+0x4c>
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	d0 f3       	brcs	.-12     	; 0x20c <TWI_SendChar+0x46>
	/*--SENDING STOP CONDITION*/
	TWI_SendStopCondition();
 218:	0e 94 7e 00 	call	0xfc	; 0xfc <TWI_SendStopCondition>

}
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

00000228 <TWI_RecDataAck>:
/*******************************************************************************
 * brief: Function To Read with acknowladge from another module                *
 *******************************************************************************/
void TWI_RecDataAck( uint8_t* data)
{
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	00 d0       	rcall	.+0      	; 0x22e <TWI_RecDataAck+0x6>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	89 83       	std	Y+1, r24	; 0x01
	TWCR|=(TWEA<<1);
 236:	a6 e5       	ldi	r26, 0x56	; 86
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e6 e5       	ldi	r30, 0x56	; 86
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	8c 60       	ori	r24, 0x0C	; 12
 242:	8c 93       	st	X, r24
	while (Get_Bit(TWCR,TWINT) == 0)
 244:	e6 e5       	ldi	r30, 0x56	; 86
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 23       	and	r24, r24
 24c:	dc f7       	brge	.-10     	; 0x244 <TWI_RecDataAck+0x1c>
		;
	*data = TWDR;
 24e:	e3 e2       	ldi	r30, 0x23	; 35
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	e9 81       	ldd	r30, Y+1	; 0x01
 256:	fa 81       	ldd	r31, Y+2	; 0x02
 258:	80 83       	st	Z, r24
}
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	cf 91       	pop	r28
 260:	df 91       	pop	r29
 262:	08 95       	ret

00000264 <TWI_readWithNACK>:
/*******************************************************************************
 * brief: Function To Read without acknowladge from another module                *
 *******************************************************************************/

uint8_t TWI_readWithNACK(void)
{
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT = 1
	 * Enable TWI Module TWEN = 1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 26c:	e6 e5       	ldi	r30, 0x56	; 86
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	84 e8       	ldi	r24, 0x84	; 132
 272:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 274:	e6 e5       	ldi	r30, 0x56	; 86
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	88 23       	and	r24, r24
 27c:	dc f7       	brge	.-10     	; 0x274 <TWI_readWithNACK+0x10>

    /* Read Data */
    return TWDR;
 27e:	e3 e2       	ldi	r30, 0x23	; 35
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
}
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <TWI_RecChar>:
/*******************************************************************************
 * brief: Function To Read character from another module                       *
 *******************************************************************************/
void TWI_RecChar( uint8_t SlvAdr, uint8_t* Data)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <TWI_RecChar+0x6>
 290:	0f 92       	push	r0
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	89 83       	std	Y+1, r24	; 0x01
 298:	7b 83       	std	Y+3, r23	; 0x03
 29a:	6a 83       	std	Y+2, r22	; 0x02
	/*SENDING START CONDITION*/

	TWI_SendStartCondition();
 29c:	0e 94 6b 00 	call	0xd6	; 0xd6 <TWI_SendStartCondition>
	/*--SEND SALVE ADDRESS WITH Read OPERATION--*/
	TWI_SendSLARead( SlvAdr);
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	0e 94 a1 00 	call	0x142	; 0x142 <TWI_SendSLARead>
	/*--READ DATA FROM ANOTHER DEVICE WITH ACKNOWLADGE*/
	TWI_RecDataAck( Data);
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	9b 81       	ldd	r25, Y+3	; 0x03
 2aa:	0e 94 14 01 	call	0x228	; 0x228 <TWI_RecDataAck>
	/*--SENDING STOP CONDITION*/
	TWI_SendStopCondition();
 2ae:	0e 94 7e 00 	call	0xfc	; 0xfc <TWI_SendStopCondition>
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	cf 91       	pop	r28
 2ba:	df 91       	pop	r29
 2bc:	08 95       	ret

000002be <TWI_EnableInterrupt>:
/*******************************************************************************
 * brief: Function To Enable Interrupt for this module                           *
 *******************************************************************************/
void TWI_EnableInterrupt( )
{
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TWCR, TWIE); //Disable ISR for the TWI peripheral
 2c6:	a6 e5       	ldi	r26, 0x56	; 86
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e6 e5       	ldi	r30, 0x56	; 86
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	8c 93       	st	X, r24
}
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	08 95       	ret

000002da <TWI_DisableInterrupt>:
/*******************************************************************************
 * brief: Function To Disable Interrupt for this module                           *
 *******************************************************************************/
void TWI_DisableInterrupt( )
{
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR, TWIE); //Disable ISR for the TWI peripheral
 2e2:	a6 e5       	ldi	r26, 0x56	; 86
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e6 e5       	ldi	r30, 0x56	; 86
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	8c 93       	st	X, r24
}
 2f0:	cf 91       	pop	r28
 2f2:	df 91       	pop	r29
 2f4:	08 95       	ret

000002f6 <TWI_SlaOperDetermination>:
void TWI_SlaOperDetermination(  uint8_t* Oper)
{
 2f6:	df 93       	push	r29
 2f8:	cf 93       	push	r28
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <TWI_SlaOperDetermination+0x6>
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
	*Oper = Get_Bit(TWDR, 0);
 304:	e3 e2       	ldi	r30, 0x23	; 35
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	81 70       	andi	r24, 0x01	; 1
 30c:	e9 81       	ldd	r30, Y+1	; 0x01
 30e:	fa 81       	ldd	r31, Y+2	; 0x02
 310:	80 83       	st	Z, r24
}
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	cf 91       	pop	r28
 318:	df 91       	pop	r29
 31a:	08 95       	ret

0000031c <TWI_SetCallback>:
/*******************************************************************************
 * brief: Function To Set Interrupt for this module                           *
 *******************************************************************************/
void TWI_SetCallback( Ptr_VoidFuncVoid_t Callback)
{
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	00 d0       	rcall	.+0      	; 0x322 <TWI_SetCallback+0x6>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	9a 83       	std	Y+2, r25	; 0x02
 328:	89 83       	std	Y+1, r24	; 0x01
	G_TWI_CALLBACK = Callback;
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	90 93 61 00 	sts	0x0061, r25
 332:	80 93 60 00 	sts	0x0060, r24
}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	08 95       	ret

00000340 <__vector_19>:
/*******************************************************************************
 * brief: Function To write Interrupt with here                                 *
 *******************************************************************************/
void __vector_19(void) __attribute__((signal)); // Serial Transfer Complete
void __vector_19(void)
{
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
	G_TWI_CALLBACK();
 36a:	e0 91 60 00 	lds	r30, 0x0060
 36e:	f0 91 61 00 	lds	r31, 0x0061
 372:	09 95       	icall
}
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <GI_EnableGI>:


#include"globalInterrupt.h"

void GI_EnableGI (void)
{
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REGISTER,I_BIT);
 3a2:	af e5       	ldi	r26, 0x5F	; 95
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	ef e5       	ldi	r30, 0x5F	; 95
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	8c 93       	st	X, r24
}
 3b0:	cf 91       	pop	r28
 3b2:	df 91       	pop	r29
 3b4:	08 95       	ret

000003b6 <GI_DisableGI>:


void GI_DisableGI (void)
{
 3b6:	df 93       	push	r29
 3b8:	cf 93       	push	r28
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REGISTER, I_BIT);
 3be:	af e5       	ldi	r26, 0x5F	; 95
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	ef e5       	ldi	r30, 0x5F	; 95
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	8f 77       	andi	r24, 0x7F	; 127
 3ca:	8c 93       	st	X, r24
}
 3cc:	cf 91       	pop	r28
 3ce:	df 91       	pop	r29
 3d0:	08 95       	ret

000003d2 <DIO_setPortDirection>:

/********************************************************************
*  API to Set Port Direction                                       *
*  *****************************************************************/
ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
 3d2:	df 93       	push	r29
 3d4:	cf 93       	push	r28
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <DIO_setPortDirection+0x6>
 3d8:	00 d0       	rcall	.+0      	; 0x3da <DIO_setPortDirection+0x8>
 3da:	0f 92       	push	r0
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
 3e0:	8a 83       	std	Y+2, r24	; 0x02
 3e2:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 3e4:	19 82       	std	Y+1, r1	; 0x01
	//Check for the ports if it is between 0 to 3
    switch (PortID)
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	3d 83       	std	Y+5, r19	; 0x05
 3ee:	2c 83       	std	Y+4, r18	; 0x04
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
 3f2:	9d 81       	ldd	r25, Y+5	; 0x05
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	91 05       	cpc	r25, r1
 3f8:	d1 f0       	breq	.+52     	; 0x42e <DIO_setPortDirection+0x5c>
 3fa:	2c 81       	ldd	r18, Y+4	; 0x04
 3fc:	3d 81       	ldd	r19, Y+5	; 0x05
 3fe:	22 30       	cpi	r18, 0x02	; 2
 400:	31 05       	cpc	r19, r1
 402:	2c f4       	brge	.+10     	; 0x40e <DIO_setPortDirection+0x3c>
 404:	8c 81       	ldd	r24, Y+4	; 0x04
 406:	9d 81       	ldd	r25, Y+5	; 0x05
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	61 f0       	breq	.+24     	; 0x424 <DIO_setPortDirection+0x52>
 40c:	1f c0       	rjmp	.+62     	; 0x44c <DIO_setPortDirection+0x7a>
 40e:	2c 81       	ldd	r18, Y+4	; 0x04
 410:	3d 81       	ldd	r19, Y+5	; 0x05
 412:	22 30       	cpi	r18, 0x02	; 2
 414:	31 05       	cpc	r19, r1
 416:	81 f0       	breq	.+32     	; 0x438 <DIO_setPortDirection+0x66>
 418:	8c 81       	ldd	r24, Y+4	; 0x04
 41a:	9d 81       	ldd	r25, Y+5	; 0x05
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	91 05       	cpc	r25, r1
 420:	81 f0       	breq	.+32     	; 0x442 <DIO_setPortDirection+0x70>
 422:	14 c0       	rjmp	.+40     	; 0x44c <DIO_setPortDirection+0x7a>
    {
    case PORTa :
        DDRA = PortDirection;
 424:	ea e3       	ldi	r30, 0x3A	; 58
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	80 83       	st	Z, r24
 42c:	11 c0       	rjmp	.+34     	; 0x450 <DIO_setPortDirection+0x7e>
        break;
    case PORTb :
        DDRB = PortDirection;
 42e:	e7 e3       	ldi	r30, 0x37	; 55
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	80 83       	st	Z, r24
 436:	0c c0       	rjmp	.+24     	; 0x450 <DIO_setPortDirection+0x7e>
        break;
    case PORTc :
        DDRC = PortDirection;
 438:	e4 e3       	ldi	r30, 0x34	; 52
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	80 83       	st	Z, r24
 440:	07 c0       	rjmp	.+14     	; 0x450 <DIO_setPortDirection+0x7e>
        break;
    case PORTd :
        DDRD = PortDirection;
 442:	e1 e3       	ldi	r30, 0x31	; 49
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	80 83       	st	Z, r24
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_setPortDirection+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
 450:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPortDirection
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	cf 91       	pop	r28
 45e:	df 91       	pop	r29
 460:	08 95       	ret

00000462 <DIO_setPinDirection>:

/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
 462:	df 93       	push	r29
 464:	cf 93       	push	r28
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	28 97       	sbiw	r28, 0x08	; 8
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	8a 83       	std	Y+2, r24	; 0x02
 478:	6b 83       	std	Y+3, r22	; 0x03
 47a:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 47c:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 30       	cpi	r24, 0x08	; 8
 482:	08 f0       	brcs	.+2      	; 0x486 <DIO_setPinDirection+0x24>
 484:	f4 c0       	rjmp	.+488    	; 0x66e <DIO_setPinDirection+0x20c>
	{
		if (DIO_u8_OUTPUT==PinDirection)
 486:	8c 81       	ldd	r24, Y+4	; 0x04
 488:	8f 3f       	cpi	r24, 0xFF	; 255
 48a:	09 f0       	breq	.+2      	; 0x48e <DIO_setPinDirection+0x2c>
 48c:	72 c0       	rjmp	.+228    	; 0x572 <DIO_setPinDirection+0x110>
		{
			switch (PortID)
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	38 87       	std	Y+8, r19	; 0x08
 496:	2f 83       	std	Y+7, r18	; 0x07
 498:	8f 81       	ldd	r24, Y+7	; 0x07
 49a:	98 85       	ldd	r25, Y+8	; 0x08
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	91 05       	cpc	r25, r1
 4a0:	49 f1       	breq	.+82     	; 0x4f4 <DIO_setPinDirection+0x92>
 4a2:	2f 81       	ldd	r18, Y+7	; 0x07
 4a4:	38 85       	ldd	r19, Y+8	; 0x08
 4a6:	22 30       	cpi	r18, 0x02	; 2
 4a8:	31 05       	cpc	r19, r1
 4aa:	2c f4       	brge	.+10     	; 0x4b6 <DIO_setPinDirection+0x54>
 4ac:	8f 81       	ldd	r24, Y+7	; 0x07
 4ae:	98 85       	ldd	r25, Y+8	; 0x08
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	61 f0       	breq	.+24     	; 0x4cc <DIO_setPinDirection+0x6a>
 4b4:	5b c0       	rjmp	.+182    	; 0x56c <DIO_setPinDirection+0x10a>
 4b6:	2f 81       	ldd	r18, Y+7	; 0x07
 4b8:	38 85       	ldd	r19, Y+8	; 0x08
 4ba:	22 30       	cpi	r18, 0x02	; 2
 4bc:	31 05       	cpc	r19, r1
 4be:	71 f1       	breq	.+92     	; 0x51c <DIO_setPinDirection+0xba>
 4c0:	8f 81       	ldd	r24, Y+7	; 0x07
 4c2:	98 85       	ldd	r25, Y+8	; 0x08
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	91 05       	cpc	r25, r1
 4c8:	e9 f1       	breq	.+122    	; 0x544 <DIO_setPinDirection+0xe2>
 4ca:	50 c0       	rjmp	.+160    	; 0x56c <DIO_setPinDirection+0x10a>
			{
			case PORTa :
				SET_BIT(DDRA, PinNumber);
 4cc:	aa e3       	ldi	r26, 0x3A	; 58
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	ea e3       	ldi	r30, 0x3A	; 58
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	48 2f       	mov	r20, r24
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 2e       	mov	r0, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_setPinDirection+0x88>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	0a 94       	dec	r0
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_setPinDirection+0x84>
 4ee:	84 2b       	or	r24, r20
 4f0:	8c 93       	st	X, r24
 4f2:	bf c0       	rjmp	.+382    	; 0x672 <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				SET_BIT(DDRB, PinNumber);
 4f4:	a7 e3       	ldi	r26, 0x37	; 55
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e7 e3       	ldi	r30, 0x37	; 55
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	48 2f       	mov	r20, r24
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_setPinDirection+0xb0>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_setPinDirection+0xac>
 516:	84 2b       	or	r24, r20
 518:	8c 93       	st	X, r24
 51a:	ab c0       	rjmp	.+342    	; 0x672 <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				SET_BIT(DDRC, PinNumber);
 51c:	a4 e3       	ldi	r26, 0x34	; 52
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e4 e3       	ldi	r30, 0x34	; 52
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	48 2f       	mov	r20, r24
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 2e       	mov	r0, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_setPinDirection+0xd8>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_setPinDirection+0xd4>
 53e:	84 2b       	or	r24, r20
 540:	8c 93       	st	X, r24
 542:	97 c0       	rjmp	.+302    	; 0x672 <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				SET_BIT(DDRD, PinNumber);
 544:	a1 e3       	ldi	r26, 0x31	; 49
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e1 e3       	ldi	r30, 0x31	; 49
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_setPinDirection+0x100>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_setPinDirection+0xfc>
 566:	84 2b       	or	r24, r20
 568:	8c 93       	st	X, r24
 56a:	83 c0       	rjmp	.+262    	; 0x672 <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	80 c0       	rjmp	.+256    	; 0x672 <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT

		else if (DIO_u8_INPUT == PinDirection)
 572:	8c 81       	ldd	r24, Y+4	; 0x04
 574:	88 23       	and	r24, r24
 576:	09 f0       	breq	.+2      	; 0x57a <DIO_setPinDirection+0x118>
 578:	77 c0       	rjmp	.+238    	; 0x668 <DIO_setPinDirection+0x206>
		{
			switch (PortID)
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	3e 83       	std	Y+6, r19	; 0x06
 582:	2d 83       	std	Y+5, r18	; 0x05
 584:	8d 81       	ldd	r24, Y+5	; 0x05
 586:	9e 81       	ldd	r25, Y+6	; 0x06
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	91 05       	cpc	r25, r1
 58c:	59 f1       	breq	.+86     	; 0x5e4 <DIO_setPinDirection+0x182>
 58e:	2d 81       	ldd	r18, Y+5	; 0x05
 590:	3e 81       	ldd	r19, Y+6	; 0x06
 592:	22 30       	cpi	r18, 0x02	; 2
 594:	31 05       	cpc	r19, r1
 596:	2c f4       	brge	.+10     	; 0x5a2 <DIO_setPinDirection+0x140>
 598:	8d 81       	ldd	r24, Y+5	; 0x05
 59a:	9e 81       	ldd	r25, Y+6	; 0x06
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	69 f0       	breq	.+26     	; 0x5ba <DIO_setPinDirection+0x158>
 5a0:	60 c0       	rjmp	.+192    	; 0x662 <DIO_setPinDirection+0x200>
 5a2:	2d 81       	ldd	r18, Y+5	; 0x05
 5a4:	3e 81       	ldd	r19, Y+6	; 0x06
 5a6:	22 30       	cpi	r18, 0x02	; 2
 5a8:	31 05       	cpc	r19, r1
 5aa:	89 f1       	breq	.+98     	; 0x60e <DIO_setPinDirection+0x1ac>
 5ac:	8d 81       	ldd	r24, Y+5	; 0x05
 5ae:	9e 81       	ldd	r25, Y+6	; 0x06
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	91 05       	cpc	r25, r1
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <DIO_setPinDirection+0x156>
 5b6:	40 c0       	rjmp	.+128    	; 0x638 <DIO_setPinDirection+0x1d6>
 5b8:	54 c0       	rjmp	.+168    	; 0x662 <DIO_setPinDirection+0x200>
			{
			case PORTa :
				CLEAR_BIT(DDRA, PinNumber);
 5ba:	aa e3       	ldi	r26, 0x3A	; 58
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	ea e3       	ldi	r30, 0x3A	; 58
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	48 2f       	mov	r20, r24
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 2e       	mov	r0, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_setPinDirection+0x176>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_setPinDirection+0x172>
 5dc:	80 95       	com	r24
 5de:	84 23       	and	r24, r20
 5e0:	8c 93       	st	X, r24
 5e2:	47 c0       	rjmp	.+142    	; 0x672 <DIO_setPinDirection+0x210>
				break;
			case PORTb :
				CLEAR_BIT(DDRB, PinNumber);
 5e4:	a7 e3       	ldi	r26, 0x37	; 55
 5e6:	b0 e0       	ldi	r27, 0x00	; 0
 5e8:	e7 e3       	ldi	r30, 0x37	; 55
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	48 2f       	mov	r20, r24
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 2e       	mov	r0, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_setPinDirection+0x1a0>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_setPinDirection+0x19c>
 606:	80 95       	com	r24
 608:	84 23       	and	r24, r20
 60a:	8c 93       	st	X, r24
 60c:	32 c0       	rjmp	.+100    	; 0x672 <DIO_setPinDirection+0x210>
				break;
			case PORTc :
				CLEAR_BIT(DDRC, PinNumber);
 60e:	a4 e3       	ldi	r26, 0x34	; 52
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	e4 e3       	ldi	r30, 0x34	; 52
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	48 2f       	mov	r20, r24
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 2e       	mov	r0, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_setPinDirection+0x1ca>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_setPinDirection+0x1c6>
 630:	80 95       	com	r24
 632:	84 23       	and	r24, r20
 634:	8c 93       	st	X, r24
 636:	1d c0       	rjmp	.+58     	; 0x672 <DIO_setPinDirection+0x210>
				break;
			case PORTd :
				CLEAR_BIT(DDRD, PinNumber);
 638:	a1 e3       	ldi	r26, 0x31	; 49
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e1 e3       	ldi	r30, 0x31	; 49
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	48 2f       	mov	r20, r24
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 2e       	mov	r0, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_setPinDirection+0x1f4>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	0a 94       	dec	r0
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_setPinDirection+0x1f0>
 65a:	80 95       	com	r24
 65c:	84 23       	and	r24, r20
 65e:	8c 93       	st	X, r24
 660:	08 c0       	rjmp	.+16     	; 0x672 <DIO_setPinDirection+0x210>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	05 c0       	rjmp	.+10     	; 0x672 <DIO_setPinDirection+0x210>
                break;
			} //END of SWITCH
		} // END of ELSE IF that check for the direction if it is INPUT
		else
		{
			u8_ERROR_STAT = ERROR_NOK;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	89 83       	std	Y+1, r24	; 0x01
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_setPinDirection+0x210>
		} //END OF ELSE
	}	  //END of IF That checking the port and pin number
	else
	{
		u8_ERROR_STAT = ERROR_NOK;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	89 83       	std	Y+1, r24	; 0x01

	}	  //END of ELSE
	return u8_ERROR_STAT;
 672:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_setPinDirection
 674:	28 96       	adiw	r28, 0x08	; 8
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	f8 94       	cli
 67a:	de bf       	out	0x3e, r29	; 62
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	cd bf       	out	0x3d, r28	; 61
 680:	cf 91       	pop	r28
 682:	df 91       	pop	r29
 684:	08 95       	ret

00000686 <DIO_writePortValue>:
/********************************************************************
*   API to Write Port  Value                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
 686:	df 93       	push	r29
 688:	cf 93       	push	r28
 68a:	00 d0       	rcall	.+0      	; 0x68c <DIO_writePortValue+0x6>
 68c:	00 d0       	rcall	.+0      	; 0x68e <DIO_writePortValue+0x8>
 68e:	0f 92       	push	r0
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	8a 83       	std	Y+2, r24	; 0x02
 696:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 698:	19 82       	std	Y+1, r1	; 0x01
    switch (PortID)
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	3d 83       	std	Y+5, r19	; 0x05
 6a2:	2c 83       	std	Y+4, r18	; 0x04
 6a4:	8c 81       	ldd	r24, Y+4	; 0x04
 6a6:	9d 81       	ldd	r25, Y+5	; 0x05
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	91 05       	cpc	r25, r1
 6ac:	d1 f0       	breq	.+52     	; 0x6e2 <DIO_writePortValue+0x5c>
 6ae:	2c 81       	ldd	r18, Y+4	; 0x04
 6b0:	3d 81       	ldd	r19, Y+5	; 0x05
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	31 05       	cpc	r19, r1
 6b6:	2c f4       	brge	.+10     	; 0x6c2 <DIO_writePortValue+0x3c>
 6b8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ba:	9d 81       	ldd	r25, Y+5	; 0x05
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	61 f0       	breq	.+24     	; 0x6d8 <DIO_writePortValue+0x52>
 6c0:	1f c0       	rjmp	.+62     	; 0x700 <DIO_writePortValue+0x7a>
 6c2:	2c 81       	ldd	r18, Y+4	; 0x04
 6c4:	3d 81       	ldd	r19, Y+5	; 0x05
 6c6:	22 30       	cpi	r18, 0x02	; 2
 6c8:	31 05       	cpc	r19, r1
 6ca:	81 f0       	breq	.+32     	; 0x6ec <DIO_writePortValue+0x66>
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	9d 81       	ldd	r25, Y+5	; 0x05
 6d0:	83 30       	cpi	r24, 0x03	; 3
 6d2:	91 05       	cpc	r25, r1
 6d4:	81 f0       	breq	.+32     	; 0x6f6 <DIO_writePortValue+0x70>
 6d6:	14 c0       	rjmp	.+40     	; 0x700 <DIO_writePortValue+0x7a>
    {
    case PORTa :
        PORTA = PortValue;
 6d8:	eb e3       	ldi	r30, 0x3B	; 59
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	80 83       	st	Z, r24
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <DIO_writePortValue+0x7e>
        break;
    case PORTb :
        PORTB = PortValue;
 6e2:	e8 e3       	ldi	r30, 0x38	; 56
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8b 81       	ldd	r24, Y+3	; 0x03
 6e8:	80 83       	st	Z, r24
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <DIO_writePortValue+0x7e>
        break;
    case PORTc :
        PORTC = PortValue;
 6ec:	e5 e3       	ldi	r30, 0x35	; 53
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	80 83       	st	Z, r24
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <DIO_writePortValue+0x7e>
        break;
    case PORTd :
        PORTD = PortValue;
 6f6:	e2 e3       	ldi	r30, 0x32	; 50
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	80 83       	st	Z, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_writePortValue+0x7e>
        break;
    default:
        u8_ERROR_STAT = ERROR_NOK;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	89 83       	std	Y+1, r24	; 0x01
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
 704:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END DIO_writePortValue
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <DIO_writePinValue>:
/********************************************************************
*   API to Write Pin  Value                                         *
*  *****************************************************************/

ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	28 97       	sbiw	r28, 0x08	; 8
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	8a 83       	std	Y+2, r24	; 0x02
 72c:	6b 83       	std	Y+3, r22	; 0x03
 72e:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 730:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
	if ( (PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	88 30       	cpi	r24, 0x08	; 8
 736:	08 f0       	brcs	.+2      	; 0x73a <DIO_writePinValue+0x24>
 738:	f4 c0       	rjmp	.+488    	; 0x922 <__stack+0xc3>
	{
		if (DIO_u8_HIGH==PinDirection)
 73a:	8c 81       	ldd	r24, Y+4	; 0x04
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	09 f0       	breq	.+2      	; 0x742 <DIO_writePinValue+0x2c>
 740:	72 c0       	rjmp	.+228    	; 0x826 <DIO_writePinValue+0x110>
		{
			switch (PortID)
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	28 2f       	mov	r18, r24
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	38 87       	std	Y+8, r19	; 0x08
 74a:	2f 83       	std	Y+7, r18	; 0x07
 74c:	8f 81       	ldd	r24, Y+7	; 0x07
 74e:	98 85       	ldd	r25, Y+8	; 0x08
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	91 05       	cpc	r25, r1
 754:	49 f1       	breq	.+82     	; 0x7a8 <DIO_writePinValue+0x92>
 756:	2f 81       	ldd	r18, Y+7	; 0x07
 758:	38 85       	ldd	r19, Y+8	; 0x08
 75a:	22 30       	cpi	r18, 0x02	; 2
 75c:	31 05       	cpc	r19, r1
 75e:	2c f4       	brge	.+10     	; 0x76a <DIO_writePinValue+0x54>
 760:	8f 81       	ldd	r24, Y+7	; 0x07
 762:	98 85       	ldd	r25, Y+8	; 0x08
 764:	00 97       	sbiw	r24, 0x00	; 0
 766:	61 f0       	breq	.+24     	; 0x780 <DIO_writePinValue+0x6a>
 768:	5b c0       	rjmp	.+182    	; 0x820 <DIO_writePinValue+0x10a>
 76a:	2f 81       	ldd	r18, Y+7	; 0x07
 76c:	38 85       	ldd	r19, Y+8	; 0x08
 76e:	22 30       	cpi	r18, 0x02	; 2
 770:	31 05       	cpc	r19, r1
 772:	71 f1       	breq	.+92     	; 0x7d0 <DIO_writePinValue+0xba>
 774:	8f 81       	ldd	r24, Y+7	; 0x07
 776:	98 85       	ldd	r25, Y+8	; 0x08
 778:	83 30       	cpi	r24, 0x03	; 3
 77a:	91 05       	cpc	r25, r1
 77c:	e9 f1       	breq	.+122    	; 0x7f8 <DIO_writePinValue+0xe2>
 77e:	50 c0       	rjmp	.+160    	; 0x820 <DIO_writePinValue+0x10a>
			{
			case PORTa :
				SET_BIT(PORTA, PinNumber);
 780:	ab e3       	ldi	r26, 0x3B	; 59
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	eb e3       	ldi	r30, 0x3B	; 59
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	48 2f       	mov	r20, r24
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	28 2f       	mov	r18, r24
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 2e       	mov	r0, r18
 798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_writePinValue+0x88>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	0a 94       	dec	r0
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_writePinValue+0x84>
 7a2:	84 2b       	or	r24, r20
 7a4:	8c 93       	st	X, r24
 7a6:	bf c0       	rjmp	.+382    	; 0x926 <__stack+0xc7>
				break;
			case PORTb :
				SET_BIT(PORTB, PinNumber);
 7a8:	a8 e3       	ldi	r26, 0x38	; 56
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	e8 e3       	ldi	r30, 0x38	; 56
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	48 2f       	mov	r20, r24
 7b4:	8b 81       	ldd	r24, Y+3	; 0x03
 7b6:	28 2f       	mov	r18, r24
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 2e       	mov	r0, r18
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_writePinValue+0xb0>
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_writePinValue+0xac>
 7ca:	84 2b       	or	r24, r20
 7cc:	8c 93       	st	X, r24
 7ce:	ab c0       	rjmp	.+342    	; 0x926 <__stack+0xc7>
				break;
			case PORTc :
				SET_BIT(PORTC, PinNumber);
 7d0:	a5 e3       	ldi	r26, 0x35	; 53
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	e5 e3       	ldi	r30, 0x35	; 53
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	48 2f       	mov	r20, r24
 7dc:	8b 81       	ldd	r24, Y+3	; 0x03
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 2e       	mov	r0, r18
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_writePinValue+0xd8>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	0a 94       	dec	r0
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_writePinValue+0xd4>
 7f2:	84 2b       	or	r24, r20
 7f4:	8c 93       	st	X, r24
 7f6:	97 c0       	rjmp	.+302    	; 0x926 <__stack+0xc7>
				break;
			case PORTd :
				SET_BIT(PORTD, PinNumber);
 7f8:	a2 e3       	ldi	r26, 0x32	; 50
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e2 e3       	ldi	r30, 0x32	; 50
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	48 2f       	mov	r20, r24
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 2e       	mov	r0, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_writePinValue+0x100>
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	0a 94       	dec	r0
 818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_writePinValue+0xfc>
 81a:	84 2b       	or	r24, r20
 81c:	8c 93       	st	X, r24
 81e:	83 c0       	rjmp	.+262    	; 0x926 <__stack+0xc7>
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	80 c0       	rjmp	.+256    	; 0x926 <__stack+0xc7>
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT
		else if (DIO_u8_LOW==PinDirection)
 826:	8c 81       	ldd	r24, Y+4	; 0x04
 828:	88 23       	and	r24, r24
 82a:	09 f0       	breq	.+2      	; 0x82e <DIO_writePinValue+0x118>
 82c:	77 c0       	rjmp	.+238    	; 0x91c <__stack+0xbd>
		{
			switch (PortID)
 82e:	8a 81       	ldd	r24, Y+2	; 0x02
 830:	28 2f       	mov	r18, r24
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	3e 83       	std	Y+6, r19	; 0x06
 836:	2d 83       	std	Y+5, r18	; 0x05
 838:	8d 81       	ldd	r24, Y+5	; 0x05
 83a:	9e 81       	ldd	r25, Y+6	; 0x06
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	91 05       	cpc	r25, r1
 840:	59 f1       	breq	.+86     	; 0x898 <__stack+0x39>
 842:	2d 81       	ldd	r18, Y+5	; 0x05
 844:	3e 81       	ldd	r19, Y+6	; 0x06
 846:	22 30       	cpi	r18, 0x02	; 2
 848:	31 05       	cpc	r19, r1
 84a:	2c f4       	brge	.+10     	; 0x856 <DIO_writePinValue+0x140>
 84c:	8d 81       	ldd	r24, Y+5	; 0x05
 84e:	9e 81       	ldd	r25, Y+6	; 0x06
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	69 f0       	breq	.+26     	; 0x86e <__stack+0xf>
 854:	60 c0       	rjmp	.+192    	; 0x916 <__stack+0xb7>
 856:	2d 81       	ldd	r18, Y+5	; 0x05
 858:	3e 81       	ldd	r19, Y+6	; 0x06
 85a:	22 30       	cpi	r18, 0x02	; 2
 85c:	31 05       	cpc	r19, r1
 85e:	89 f1       	breq	.+98     	; 0x8c2 <__stack+0x63>
 860:	8d 81       	ldd	r24, Y+5	; 0x05
 862:	9e 81       	ldd	r25, Y+6	; 0x06
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	91 05       	cpc	r25, r1
 868:	09 f4       	brne	.+2      	; 0x86c <__stack+0xd>
 86a:	40 c0       	rjmp	.+128    	; 0x8ec <__stack+0x8d>
 86c:	54 c0       	rjmp	.+168    	; 0x916 <__stack+0xb7>
			{
			case PORTa :
				CLEAR_BIT(PORTA, PinNumber);
 86e:	ab e3       	ldi	r26, 0x3B	; 59
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	eb e3       	ldi	r30, 0x3B	; 59
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	48 2f       	mov	r20, r24
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 2e       	mov	r0, r18
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	0a 94       	dec	r0
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	80 95       	com	r24
 892:	84 23       	and	r24, r20
 894:	8c 93       	st	X, r24
 896:	47 c0       	rjmp	.+142    	; 0x926 <__stack+0xc7>
				break;
			case PORTb :
				CLEAR_BIT(PORTB, PinNumber);
 898:	a8 e3       	ldi	r26, 0x38	; 56
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e8 e3       	ldi	r30, 0x38	; 56
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	48 2f       	mov	r20, r24
 8a4:	8b 81       	ldd	r24, Y+3	; 0x03
 8a6:	28 2f       	mov	r18, r24
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	02 2e       	mov	r0, r18
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	0a 94       	dec	r0
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	80 95       	com	r24
 8bc:	84 23       	and	r24, r20
 8be:	8c 93       	st	X, r24
 8c0:	32 c0       	rjmp	.+100    	; 0x926 <__stack+0xc7>
				break;
			case PORTc :
				CLEAR_BIT(PORTC, PinNumber);
 8c2:	a5 e3       	ldi	r26, 0x35	; 53
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e5 e3       	ldi	r30, 0x35	; 53
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	48 2f       	mov	r20, r24
 8ce:	8b 81       	ldd	r24, Y+3	; 0x03
 8d0:	28 2f       	mov	r18, r24
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 2e       	mov	r0, r18
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	0a 94       	dec	r0
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
 8e4:	80 95       	com	r24
 8e6:	84 23       	and	r24, r20
 8e8:	8c 93       	st	X, r24
 8ea:	1d c0       	rjmp	.+58     	; 0x926 <__stack+0xc7>
				break;
			case PORTd :
				CLEAR_BIT(PORTD, PinNumber);
 8ec:	a2 e3       	ldi	r26, 0x32	; 50
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e2 e3       	ldi	r30, 0x32	; 50
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	48 2f       	mov	r20, r24
 8f8:	8b 81       	ldd	r24, Y+3	; 0x03
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 2e       	mov	r0, r18
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	0a 94       	dec	r0
 90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
 90e:	80 95       	com	r24
 910:	84 23       	and	r24, r20
 912:	8c 93       	st	X, r24
 914:	08 c0       	rjmp	.+16     	; 0x926 <__stack+0xc7>
				break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	89 83       	std	Y+1, r24	; 0x01
 91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0xc7>
			} //END of SWITCH
		} // END OF ELSE IF
		else
        {
            /*INVALID PIN DIRECTION*/
			u8_ERROR_STAT = ERROR_NOK;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	89 83       	std	Y+1, r24	; 0x01
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
		} //END OF ELSE
	}	  //END OF IF
	else
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	89 83       	std	Y+1, r24	; 0x01
	}	  //END of ELSE
	return u8_ERROR_STAT ;
 926:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_writePinValue
 928:	28 96       	adiw	r28, 0x08	; 8
 92a:	0f b6       	in	r0, 0x3f	; 63
 92c:	f8 94       	cli
 92e:	de bf       	out	0x3e, r29	; 62
 930:	0f be       	out	0x3f, r0	; 63
 932:	cd bf       	out	0x3d, r28	; 61
 934:	cf 91       	pop	r28
 936:	df 91       	pop	r29
 938:	08 95       	ret

0000093a <DIO_readPort>:
/********************************************************************
*   API to Read Port  Value                                        *
*  *****************************************************************/
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
 93a:	df 93       	push	r29
 93c:	cf 93       	push	r28
 93e:	00 d0       	rcall	.+0      	; 0x940 <DIO_readPort+0x6>
 940:	00 d0       	rcall	.+0      	; 0x942 <DIO_readPort+0x8>
 942:	00 d0       	rcall	.+0      	; 0x944 <DIO_readPort+0xa>
 944:	cd b7       	in	r28, 0x3d	; 61
 946:	de b7       	in	r29, 0x3e	; 62
 948:	8a 83       	std	Y+2, r24	; 0x02
 94a:	7c 83       	std	Y+4, r23	; 0x04
 94c:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 94e:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
 950:	8b 81       	ldd	r24, Y+3	; 0x03
 952:	9c 81       	ldd	r25, Y+4	; 0x04
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	19 f4       	brne	.+6      	; 0x95e <DIO_readPort+0x24>
    {
        u8_ERROR_STAT = ERROR_NOK;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	89 83       	std	Y+1, r24	; 0x01
 95c:	3d c0       	rjmp	.+122    	; 0x9d8 <DIO_readPort+0x9e>
	}
	else
	{
    switch (PortID)
 95e:	8a 81       	ldd	r24, Y+2	; 0x02
 960:	28 2f       	mov	r18, r24
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	3e 83       	std	Y+6, r19	; 0x06
 966:	2d 83       	std	Y+5, r18	; 0x05
 968:	8d 81       	ldd	r24, Y+5	; 0x05
 96a:	9e 81       	ldd	r25, Y+6	; 0x06
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	91 05       	cpc	r25, r1
 970:	e1 f0       	breq	.+56     	; 0x9aa <DIO_readPort+0x70>
 972:	2d 81       	ldd	r18, Y+5	; 0x05
 974:	3e 81       	ldd	r19, Y+6	; 0x06
 976:	22 30       	cpi	r18, 0x02	; 2
 978:	31 05       	cpc	r19, r1
 97a:	2c f4       	brge	.+10     	; 0x986 <DIO_readPort+0x4c>
 97c:	8d 81       	ldd	r24, Y+5	; 0x05
 97e:	9e 81       	ldd	r25, Y+6	; 0x06
 980:	00 97       	sbiw	r24, 0x00	; 0
 982:	61 f0       	breq	.+24     	; 0x99c <DIO_readPort+0x62>
 984:	27 c0       	rjmp	.+78     	; 0x9d4 <DIO_readPort+0x9a>
 986:	2d 81       	ldd	r18, Y+5	; 0x05
 988:	3e 81       	ldd	r19, Y+6	; 0x06
 98a:	22 30       	cpi	r18, 0x02	; 2
 98c:	31 05       	cpc	r19, r1
 98e:	a1 f0       	breq	.+40     	; 0x9b8 <DIO_readPort+0x7e>
 990:	8d 81       	ldd	r24, Y+5	; 0x05
 992:	9e 81       	ldd	r25, Y+6	; 0x06
 994:	83 30       	cpi	r24, 0x03	; 3
 996:	91 05       	cpc	r25, r1
 998:	b1 f0       	breq	.+44     	; 0x9c6 <DIO_readPort+0x8c>
 99a:	1c c0       	rjmp	.+56     	; 0x9d4 <DIO_readPort+0x9a>
    {
    case PORTa :
        *(PortState) = PINA;
 99c:	e9 e3       	ldi	r30, 0x39	; 57
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	eb 81       	ldd	r30, Y+3	; 0x03
 9a4:	fc 81       	ldd	r31, Y+4	; 0x04
 9a6:	80 83       	st	Z, r24
 9a8:	17 c0       	rjmp	.+46     	; 0x9d8 <DIO_readPort+0x9e>
        break;
    case PORTb :
        *(PortState) = PINB;
 9aa:	e6 e3       	ldi	r30, 0x36	; 54
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	eb 81       	ldd	r30, Y+3	; 0x03
 9b2:	fc 81       	ldd	r31, Y+4	; 0x04
 9b4:	80 83       	st	Z, r24
 9b6:	10 c0       	rjmp	.+32     	; 0x9d8 <DIO_readPort+0x9e>
        break;
    case PORTc :
        *(PortState) = PINC;
 9b8:	e3 e3       	ldi	r30, 0x33	; 51
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	eb 81       	ldd	r30, Y+3	; 0x03
 9c0:	fc 81       	ldd	r31, Y+4	; 0x04
 9c2:	80 83       	st	Z, r24
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <DIO_readPort+0x9e>
        break;
    case PORTd :
        *(PortState) = PIND;
 9c6:	e0 e3       	ldi	r30, 0x30	; 48
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	80 81       	ld	r24, Z
 9cc:	eb 81       	ldd	r30, Y+3	; 0x03
 9ce:	fc 81       	ldd	r31, Y+4	; 0x04
 9d0:	80 83       	st	Z, r24
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <DIO_readPort+0x9e>
        break;
    default:
            /*INVALID PORT NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	89 83       	std	Y+1, r24	; 0x01
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
}	  //END of DIO_readPort
 9da:	26 96       	adiw	r28, 0x06	; 6
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	f8 94       	cli
 9e0:	de bf       	out	0x3e, r29	; 62
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	cd bf       	out	0x3d, r28	; 61
 9e6:	cf 91       	pop	r28
 9e8:	df 91       	pop	r29
 9ea:	08 95       	ret

000009ec <DIO_readPin>:
/********************************************************************
*   API to Read Pin  Value                                          *
*  *****************************************************************/
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
 9ec:	df 93       	push	r29
 9ee:	cf 93       	push	r28
 9f0:	cd b7       	in	r28, 0x3d	; 61
 9f2:	de b7       	in	r29, 0x3e	; 62
 9f4:	27 97       	sbiw	r28, 0x07	; 7
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	cd bf       	out	0x3d, r28	; 61
 a00:	8a 83       	std	Y+2, r24	; 0x02
 a02:	6b 83       	std	Y+3, r22	; 0x03
 a04:	5d 83       	std	Y+5, r21	; 0x05
 a06:	4c 83       	std	Y+4, r20	; 0x04
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 a08:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
 a0a:	8c 81       	ldd	r24, Y+4	; 0x04
 a0c:	9d 81       	ldd	r25, Y+5	; 0x05
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	19 f4       	brne	.+6      	; 0xa18 <DIO_readPin+0x2c>
    {
        u8_ERROR_STAT = ERROR_NOK;
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	89 83       	std	Y+1, r24	; 0x01
 a16:	7a c0       	rjmp	.+244    	; 0xb0c <DIO_readPin+0x120>
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 a18:	8b 81       	ldd	r24, Y+3	; 0x03
 a1a:	88 30       	cpi	r24, 0x08	; 8
 a1c:	08 f0       	brcs	.+2      	; 0xa20 <DIO_readPin+0x34>
 a1e:	74 c0       	rjmp	.+232    	; 0xb08 <DIO_readPin+0x11c>
        {
            switch (PortID)
 a20:	8a 81       	ldd	r24, Y+2	; 0x02
 a22:	28 2f       	mov	r18, r24
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	3f 83       	std	Y+7, r19	; 0x07
 a28:	2e 83       	std	Y+6, r18	; 0x06
 a2a:	4e 81       	ldd	r20, Y+6	; 0x06
 a2c:	5f 81       	ldd	r21, Y+7	; 0x07
 a2e:	41 30       	cpi	r20, 0x01	; 1
 a30:	51 05       	cpc	r21, r1
 a32:	59 f1       	breq	.+86     	; 0xa8a <DIO_readPin+0x9e>
 a34:	8e 81       	ldd	r24, Y+6	; 0x06
 a36:	9f 81       	ldd	r25, Y+7	; 0x07
 a38:	82 30       	cpi	r24, 0x02	; 2
 a3a:	91 05       	cpc	r25, r1
 a3c:	34 f4       	brge	.+12     	; 0xa4a <DIO_readPin+0x5e>
 a3e:	2e 81       	ldd	r18, Y+6	; 0x06
 a40:	3f 81       	ldd	r19, Y+7	; 0x07
 a42:	21 15       	cp	r18, r1
 a44:	31 05       	cpc	r19, r1
 a46:	69 f0       	breq	.+26     	; 0xa62 <DIO_readPin+0x76>
 a48:	5c c0       	rjmp	.+184    	; 0xb02 <DIO_readPin+0x116>
 a4a:	4e 81       	ldd	r20, Y+6	; 0x06
 a4c:	5f 81       	ldd	r21, Y+7	; 0x07
 a4e:	42 30       	cpi	r20, 0x02	; 2
 a50:	51 05       	cpc	r21, r1
 a52:	79 f1       	breq	.+94     	; 0xab2 <DIO_readPin+0xc6>
 a54:	8e 81       	ldd	r24, Y+6	; 0x06
 a56:	9f 81       	ldd	r25, Y+7	; 0x07
 a58:	83 30       	cpi	r24, 0x03	; 3
 a5a:	91 05       	cpc	r25, r1
 a5c:	09 f4       	brne	.+2      	; 0xa60 <DIO_readPin+0x74>
 a5e:	3d c0       	rjmp	.+122    	; 0xada <DIO_readPin+0xee>
 a60:	50 c0       	rjmp	.+160    	; 0xb02 <DIO_readPin+0x116>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
 a62:	e9 e3       	ldi	r30, 0x39	; 57
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	28 2f       	mov	r18, r24
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	8b 81       	ldd	r24, Y+3	; 0x03
 a6e:	88 2f       	mov	r24, r24
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	a9 01       	movw	r20, r18
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_readPin+0x8e>
 a76:	55 95       	asr	r21
 a78:	47 95       	ror	r20
 a7a:	8a 95       	dec	r24
 a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_readPin+0x8a>
 a7e:	ca 01       	movw	r24, r20
 a80:	81 70       	andi	r24, 0x01	; 1
 a82:	ec 81       	ldd	r30, Y+4	; 0x04
 a84:	fd 81       	ldd	r31, Y+5	; 0x05
 a86:	80 83       	st	Z, r24
 a88:	41 c0       	rjmp	.+130    	; 0xb0c <DIO_readPin+0x120>
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
 a8a:	e6 e3       	ldi	r30, 0x36	; 54
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	80 81       	ld	r24, Z
 a90:	28 2f       	mov	r18, r24
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	8b 81       	ldd	r24, Y+3	; 0x03
 a96:	88 2f       	mov	r24, r24
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	a9 01       	movw	r20, r18
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_readPin+0xb6>
 a9e:	55 95       	asr	r21
 aa0:	47 95       	ror	r20
 aa2:	8a 95       	dec	r24
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_readPin+0xb2>
 aa6:	ca 01       	movw	r24, r20
 aa8:	81 70       	andi	r24, 0x01	; 1
 aaa:	ec 81       	ldd	r30, Y+4	; 0x04
 aac:	fd 81       	ldd	r31, Y+5	; 0x05
 aae:	80 83       	st	Z, r24
 ab0:	2d c0       	rjmp	.+90     	; 0xb0c <DIO_readPin+0x120>
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
 ab2:	e3 e3       	ldi	r30, 0x33	; 51
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	80 81       	ld	r24, Z
 ab8:	28 2f       	mov	r18, r24
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	8b 81       	ldd	r24, Y+3	; 0x03
 abe:	88 2f       	mov	r24, r24
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	a9 01       	movw	r20, r18
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_readPin+0xde>
 ac6:	55 95       	asr	r21
 ac8:	47 95       	ror	r20
 aca:	8a 95       	dec	r24
 acc:	e2 f7       	brpl	.-8      	; 0xac6 <DIO_readPin+0xda>
 ace:	ca 01       	movw	r24, r20
 ad0:	81 70       	andi	r24, 0x01	; 1
 ad2:	ec 81       	ldd	r30, Y+4	; 0x04
 ad4:	fd 81       	ldd	r31, Y+5	; 0x05
 ad6:	80 83       	st	Z, r24
 ad8:	19 c0       	rjmp	.+50     	; 0xb0c <DIO_readPin+0x120>
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
 ada:	e0 e3       	ldi	r30, 0x30	; 48
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z
 ae0:	28 2f       	mov	r18, r24
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	8b 81       	ldd	r24, Y+3	; 0x03
 ae6:	88 2f       	mov	r24, r24
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	a9 01       	movw	r20, r18
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_readPin+0x106>
 aee:	55 95       	asr	r21
 af0:	47 95       	ror	r20
 af2:	8a 95       	dec	r24
 af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_readPin+0x102>
 af6:	ca 01       	movw	r24, r20
 af8:	81 70       	andi	r24, 0x01	; 1
 afa:	ec 81       	ldd	r30, Y+4	; 0x04
 afc:	fd 81       	ldd	r31, Y+5	; 0x05
 afe:	80 83       	st	Z, r24
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <DIO_readPin+0x120>
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	89 83       	std	Y+1, r24	; 0x01
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_readPin+0x120>
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	89 83       	std	Y+1, r24	; 0x01
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
}    //END of DIO_readPint
 b0e:	27 96       	adiw	r28, 0x07	; 7
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	de bf       	out	0x3e, r29	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	cd bf       	out	0x3d, r28	; 61
 b1a:	cf 91       	pop	r28
 b1c:	df 91       	pop	r29
 b1e:	08 95       	ret

00000b20 <DIO_TogglePin>:
 * */
/********************************************************************
*   API to toggle pin                                               *
*  *****************************************************************/
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
 b20:	df 93       	push	r29
 b22:	cf 93       	push	r28
 b24:	00 d0       	rcall	.+0      	; 0xb26 <DIO_TogglePin+0x6>
 b26:	00 d0       	rcall	.+0      	; 0xb28 <DIO_TogglePin+0x8>
 b28:	0f 92       	push	r0
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
 b2e:	8a 83       	std	Y+2, r24	; 0x02
 b30:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 b32:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 b34:	8b 81       	ldd	r24, Y+3	; 0x03
 b36:	88 30       	cpi	r24, 0x08	; 8
 b38:	08 f0       	brcs	.+2      	; 0xb3c <DIO_TogglePin+0x1c>
 b3a:	72 c0       	rjmp	.+228    	; 0xc20 <DIO_TogglePin+0x100>
    {
        switch (PortID)
 b3c:	8a 81       	ldd	r24, Y+2	; 0x02
 b3e:	28 2f       	mov	r18, r24
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	3d 83       	std	Y+5, r19	; 0x05
 b44:	2c 83       	std	Y+4, r18	; 0x04
 b46:	8c 81       	ldd	r24, Y+4	; 0x04
 b48:	9d 81       	ldd	r25, Y+5	; 0x05
 b4a:	81 30       	cpi	r24, 0x01	; 1
 b4c:	91 05       	cpc	r25, r1
 b4e:	49 f1       	breq	.+82     	; 0xba2 <DIO_TogglePin+0x82>
 b50:	2c 81       	ldd	r18, Y+4	; 0x04
 b52:	3d 81       	ldd	r19, Y+5	; 0x05
 b54:	22 30       	cpi	r18, 0x02	; 2
 b56:	31 05       	cpc	r19, r1
 b58:	2c f4       	brge	.+10     	; 0xb64 <DIO_TogglePin+0x44>
 b5a:	8c 81       	ldd	r24, Y+4	; 0x04
 b5c:	9d 81       	ldd	r25, Y+5	; 0x05
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	61 f0       	breq	.+24     	; 0xb7a <DIO_TogglePin+0x5a>
 b62:	5b c0       	rjmp	.+182    	; 0xc1a <DIO_TogglePin+0xfa>
 b64:	2c 81       	ldd	r18, Y+4	; 0x04
 b66:	3d 81       	ldd	r19, Y+5	; 0x05
 b68:	22 30       	cpi	r18, 0x02	; 2
 b6a:	31 05       	cpc	r19, r1
 b6c:	71 f1       	breq	.+92     	; 0xbca <DIO_TogglePin+0xaa>
 b6e:	8c 81       	ldd	r24, Y+4	; 0x04
 b70:	9d 81       	ldd	r25, Y+5	; 0x05
 b72:	83 30       	cpi	r24, 0x03	; 3
 b74:	91 05       	cpc	r25, r1
 b76:	e9 f1       	breq	.+122    	; 0xbf2 <DIO_TogglePin+0xd2>
 b78:	50 c0       	rjmp	.+160    	; 0xc1a <DIO_TogglePin+0xfa>
        {
        case PORTa :
            TOGGLE_BIT(PORTA, PinNumber);
 b7a:	ab e3       	ldi	r26, 0x3B	; 59
 b7c:	b0 e0       	ldi	r27, 0x00	; 0
 b7e:	eb e3       	ldi	r30, 0x3B	; 59
 b80:	f0 e0       	ldi	r31, 0x00	; 0
 b82:	80 81       	ld	r24, Z
 b84:	48 2f       	mov	r20, r24
 b86:	8b 81       	ldd	r24, Y+3	; 0x03
 b88:	28 2f       	mov	r18, r24
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	02 2e       	mov	r0, r18
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <DIO_TogglePin+0x78>
 b94:	88 0f       	add	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	0a 94       	dec	r0
 b9a:	e2 f7       	brpl	.-8      	; 0xb94 <DIO_TogglePin+0x74>
 b9c:	84 27       	eor	r24, r20
 b9e:	8c 93       	st	X, r24
 ba0:	41 c0       	rjmp	.+130    	; 0xc24 <DIO_TogglePin+0x104>
            break;
        case PORTb :
            TOGGLE_BIT(PORTB, PinNumber);
 ba2:	a8 e3       	ldi	r26, 0x38	; 56
 ba4:	b0 e0       	ldi	r27, 0x00	; 0
 ba6:	e8 e3       	ldi	r30, 0x38	; 56
 ba8:	f0 e0       	ldi	r31, 0x00	; 0
 baa:	80 81       	ld	r24, Z
 bac:	48 2f       	mov	r20, r24
 bae:	8b 81       	ldd	r24, Y+3	; 0x03
 bb0:	28 2f       	mov	r18, r24
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	02 2e       	mov	r0, r18
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_TogglePin+0xa0>
 bbc:	88 0f       	add	r24, r24
 bbe:	99 1f       	adc	r25, r25
 bc0:	0a 94       	dec	r0
 bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_TogglePin+0x9c>
 bc4:	84 27       	eor	r24, r20
 bc6:	8c 93       	st	X, r24
 bc8:	2d c0       	rjmp	.+90     	; 0xc24 <DIO_TogglePin+0x104>
            break;
        case PORTc :
            TOGGLE_BIT(PORTC, PinNumber);
 bca:	a5 e3       	ldi	r26, 0x35	; 53
 bcc:	b0 e0       	ldi	r27, 0x00	; 0
 bce:	e5 e3       	ldi	r30, 0x35	; 53
 bd0:	f0 e0       	ldi	r31, 0x00	; 0
 bd2:	80 81       	ld	r24, Z
 bd4:	48 2f       	mov	r20, r24
 bd6:	8b 81       	ldd	r24, Y+3	; 0x03
 bd8:	28 2f       	mov	r18, r24
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	02 2e       	mov	r0, r18
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <DIO_TogglePin+0xc8>
 be4:	88 0f       	add	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	0a 94       	dec	r0
 bea:	e2 f7       	brpl	.-8      	; 0xbe4 <DIO_TogglePin+0xc4>
 bec:	84 27       	eor	r24, r20
 bee:	8c 93       	st	X, r24
 bf0:	19 c0       	rjmp	.+50     	; 0xc24 <DIO_TogglePin+0x104>
            break;
        case PORTd :
            TOGGLE_BIT(PORTD, PinNumber);
 bf2:	a2 e3       	ldi	r26, 0x32	; 50
 bf4:	b0 e0       	ldi	r27, 0x00	; 0
 bf6:	e2 e3       	ldi	r30, 0x32	; 50
 bf8:	f0 e0       	ldi	r31, 0x00	; 0
 bfa:	80 81       	ld	r24, Z
 bfc:	48 2f       	mov	r20, r24
 bfe:	8b 81       	ldd	r24, Y+3	; 0x03
 c00:	28 2f       	mov	r18, r24
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	02 2e       	mov	r0, r18
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <DIO_TogglePin+0xf0>
 c0c:	88 0f       	add	r24, r24
 c0e:	99 1f       	adc	r25, r25
 c10:	0a 94       	dec	r0
 c12:	e2 f7       	brpl	.-8      	; 0xc0c <DIO_TogglePin+0xec>
 c14:	84 27       	eor	r24, r20
 c16:	8c 93       	st	X, r24
 c18:	05 c0       	rjmp	.+10     	; 0xc24 <DIO_TogglePin+0x104>
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 c1a:	81 e0       	ldi	r24, 0x01	; 1
 c1c:	89 83       	std	Y+1, r24	; 0x01
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_TogglePin+0x104>
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	89 83       	std	Y+1, r24	; 0x01
    }	  //END of ELSE
    return u8_ERROR_STAT ;
 c24:	89 81       	ldd	r24, Y+1	; 0x01
}
 c26:	0f 90       	pop	r0
 c28:	0f 90       	pop	r0
 c2a:	0f 90       	pop	r0
 c2c:	0f 90       	pop	r0
 c2e:	0f 90       	pop	r0
 c30:	cf 91       	pop	r28
 c32:	df 91       	pop	r29
 c34:	08 95       	ret

00000c36 <DIO_SetPullupRes>:

/********************************************************************
*   API to PullUp Resistor                                              *
*  *****************************************************************/
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
 c36:	df 93       	push	r29
 c38:	cf 93       	push	r28
 c3a:	00 d0       	rcall	.+0      	; 0xc3c <DIO_SetPullupRes+0x6>
 c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_SetPullupRes+0x8>
 c3e:	0f 92       	push	r0
 c40:	cd b7       	in	r28, 0x3d	; 61
 c42:	de b7       	in	r29, 0x3e	; 62
 c44:	8a 83       	std	Y+2, r24	; 0x02
 c46:	6b 83       	std	Y+3, r22	; 0x03
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 c48:	19 82       	std	Y+1, r1	; 0x01
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 c4a:	8b 81       	ldd	r24, Y+3	; 0x03
 c4c:	88 30       	cpi	r24, 0x08	; 8
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <DIO_SetPullupRes+0x1c>
 c50:	ce c0       	rjmp	.+412    	; 0xdee <DIO_SetPullupRes+0x1b8>
    {
        switch (PortID)
 c52:	8a 81       	ldd	r24, Y+2	; 0x02
 c54:	28 2f       	mov	r18, r24
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	3d 83       	std	Y+5, r19	; 0x05
 c5a:	2c 83       	std	Y+4, r18	; 0x04
 c5c:	4c 81       	ldd	r20, Y+4	; 0x04
 c5e:	5d 81       	ldd	r21, Y+5	; 0x05
 c60:	41 30       	cpi	r20, 0x01	; 1
 c62:	51 05       	cpc	r21, r1
 c64:	09 f4       	brne	.+2      	; 0xc68 <DIO_SetPullupRes+0x32>
 c66:	42 c0       	rjmp	.+132    	; 0xcec <DIO_SetPullupRes+0xb6>
 c68:	8c 81       	ldd	r24, Y+4	; 0x04
 c6a:	9d 81       	ldd	r25, Y+5	; 0x05
 c6c:	82 30       	cpi	r24, 0x02	; 2
 c6e:	91 05       	cpc	r25, r1
 c70:	34 f4       	brge	.+12     	; 0xc7e <DIO_SetPullupRes+0x48>
 c72:	2c 81       	ldd	r18, Y+4	; 0x04
 c74:	3d 81       	ldd	r19, Y+5	; 0x05
 c76:	21 15       	cp	r18, r1
 c78:	31 05       	cpc	r19, r1
 c7a:	71 f0       	breq	.+28     	; 0xc98 <DIO_SetPullupRes+0x62>
 c7c:	b5 c0       	rjmp	.+362    	; 0xde8 <DIO_SetPullupRes+0x1b2>
 c7e:	4c 81       	ldd	r20, Y+4	; 0x04
 c80:	5d 81       	ldd	r21, Y+5	; 0x05
 c82:	42 30       	cpi	r20, 0x02	; 2
 c84:	51 05       	cpc	r21, r1
 c86:	09 f4       	brne	.+2      	; 0xc8a <DIO_SetPullupRes+0x54>
 c88:	5b c0       	rjmp	.+182    	; 0xd40 <DIO_SetPullupRes+0x10a>
 c8a:	8c 81       	ldd	r24, Y+4	; 0x04
 c8c:	9d 81       	ldd	r25, Y+5	; 0x05
 c8e:	83 30       	cpi	r24, 0x03	; 3
 c90:	91 05       	cpc	r25, r1
 c92:	09 f4       	brne	.+2      	; 0xc96 <DIO_SetPullupRes+0x60>
 c94:	7f c0       	rjmp	.+254    	; 0xd94 <DIO_SetPullupRes+0x15e>
 c96:	a8 c0       	rjmp	.+336    	; 0xde8 <DIO_SetPullupRes+0x1b2>
        {
        case PORTa :
            if(DIO_u8_INPUT==Get_Bit(DDRA, PinNumber))
 c98:	ea e3       	ldi	r30, 0x3A	; 58
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	80 81       	ld	r24, Z
 c9e:	28 2f       	mov	r18, r24
 ca0:	30 e0       	ldi	r19, 0x00	; 0
 ca2:	8b 81       	ldd	r24, Y+3	; 0x03
 ca4:	88 2f       	mov	r24, r24
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	a9 01       	movw	r20, r18
 caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_SetPullupRes+0x7a>
 cac:	55 95       	asr	r21
 cae:	47 95       	ror	r20
 cb0:	8a 95       	dec	r24
 cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_SetPullupRes+0x76>
 cb4:	ca 01       	movw	r24, r20
 cb6:	81 70       	andi	r24, 0x01	; 1
 cb8:	90 70       	andi	r25, 0x00	; 0
 cba:	00 97       	sbiw	r24, 0x00	; 0
 cbc:	a1 f4       	brne	.+40     	; 0xce6 <DIO_SetPullupRes+0xb0>
            {
                SET_BIT(PORTA, PinNumber);
 cbe:	ab e3       	ldi	r26, 0x3B	; 59
 cc0:	b0 e0       	ldi	r27, 0x00	; 0
 cc2:	eb e3       	ldi	r30, 0x3B	; 59
 cc4:	f0 e0       	ldi	r31, 0x00	; 0
 cc6:	80 81       	ld	r24, Z
 cc8:	48 2f       	mov	r20, r24
 cca:	8b 81       	ldd	r24, Y+3	; 0x03
 ccc:	28 2f       	mov	r18, r24
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	02 2e       	mov	r0, r18
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_SetPullupRes+0xa6>
 cd8:	88 0f       	add	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	0a 94       	dec	r0
 cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_SetPullupRes+0xa2>
 ce0:	84 2b       	or	r24, r20
 ce2:	8c 93       	st	X, r24
 ce4:	86 c0       	rjmp	.+268    	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 ce6:	81 e0       	ldi	r24, 0x01	; 1
 ce8:	89 83       	std	Y+1, r24	; 0x01
 cea:	83 c0       	rjmp	.+262    	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTb :
            if(DIO_u8_INPUT==Get_Bit(DDRB, PinNumber))
 cec:	e7 e3       	ldi	r30, 0x37	; 55
 cee:	f0 e0       	ldi	r31, 0x00	; 0
 cf0:	80 81       	ld	r24, Z
 cf2:	28 2f       	mov	r18, r24
 cf4:	30 e0       	ldi	r19, 0x00	; 0
 cf6:	8b 81       	ldd	r24, Y+3	; 0x03
 cf8:	88 2f       	mov	r24, r24
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	a9 01       	movw	r20, r18
 cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_SetPullupRes+0xce>
 d00:	55 95       	asr	r21
 d02:	47 95       	ror	r20
 d04:	8a 95       	dec	r24
 d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_SetPullupRes+0xca>
 d08:	ca 01       	movw	r24, r20
 d0a:	81 70       	andi	r24, 0x01	; 1
 d0c:	90 70       	andi	r25, 0x00	; 0
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	a1 f4       	brne	.+40     	; 0xd3a <DIO_SetPullupRes+0x104>
            {
                SET_BIT(PORTB, PinNumber);
 d12:	a8 e3       	ldi	r26, 0x38	; 56
 d14:	b0 e0       	ldi	r27, 0x00	; 0
 d16:	e8 e3       	ldi	r30, 0x38	; 56
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	80 81       	ld	r24, Z
 d1c:	48 2f       	mov	r20, r24
 d1e:	8b 81       	ldd	r24, Y+3	; 0x03
 d20:	28 2f       	mov	r18, r24
 d22:	30 e0       	ldi	r19, 0x00	; 0
 d24:	81 e0       	ldi	r24, 0x01	; 1
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	02 2e       	mov	r0, r18
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_SetPullupRes+0xfa>
 d2c:	88 0f       	add	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	0a 94       	dec	r0
 d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_SetPullupRes+0xf6>
 d34:	84 2b       	or	r24, r20
 d36:	8c 93       	st	X, r24
 d38:	5c c0       	rjmp	.+184    	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	89 83       	std	Y+1, r24	; 0x01
 d3e:	59 c0       	rjmp	.+178    	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTc :
            if(DIO_u8_INPUT==Get_Bit(DDRC, PinNumber))
 d40:	e4 e3       	ldi	r30, 0x34	; 52
 d42:	f0 e0       	ldi	r31, 0x00	; 0
 d44:	80 81       	ld	r24, Z
 d46:	28 2f       	mov	r18, r24
 d48:	30 e0       	ldi	r19, 0x00	; 0
 d4a:	8b 81       	ldd	r24, Y+3	; 0x03
 d4c:	88 2f       	mov	r24, r24
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	a9 01       	movw	r20, r18
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_SetPullupRes+0x122>
 d54:	55 95       	asr	r21
 d56:	47 95       	ror	r20
 d58:	8a 95       	dec	r24
 d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_SetPullupRes+0x11e>
 d5c:	ca 01       	movw	r24, r20
 d5e:	81 70       	andi	r24, 0x01	; 1
 d60:	90 70       	andi	r25, 0x00	; 0
 d62:	00 97       	sbiw	r24, 0x00	; 0
 d64:	a1 f4       	brne	.+40     	; 0xd8e <DIO_SetPullupRes+0x158>
            {
                SET_BIT(PORTC, PinNumber);
 d66:	a5 e3       	ldi	r26, 0x35	; 53
 d68:	b0 e0       	ldi	r27, 0x00	; 0
 d6a:	e5 e3       	ldi	r30, 0x35	; 53
 d6c:	f0 e0       	ldi	r31, 0x00	; 0
 d6e:	80 81       	ld	r24, Z
 d70:	48 2f       	mov	r20, r24
 d72:	8b 81       	ldd	r24, Y+3	; 0x03
 d74:	28 2f       	mov	r18, r24
 d76:	30 e0       	ldi	r19, 0x00	; 0
 d78:	81 e0       	ldi	r24, 0x01	; 1
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	02 2e       	mov	r0, r18
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_SetPullupRes+0x14e>
 d80:	88 0f       	add	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	0a 94       	dec	r0
 d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_SetPullupRes+0x14a>
 d88:	84 2b       	or	r24, r20
 d8a:	8c 93       	st	X, r24
 d8c:	32 c0       	rjmp	.+100    	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	89 83       	std	Y+1, r24	; 0x01
 d92:	2f c0       	rjmp	.+94     	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }
            break;
        case PORTd :
            if(DIO_u8_INPUT==Get_Bit(DDRD, PinNumber))
 d94:	e1 e3       	ldi	r30, 0x31	; 49
 d96:	f0 e0       	ldi	r31, 0x00	; 0
 d98:	80 81       	ld	r24, Z
 d9a:	28 2f       	mov	r18, r24
 d9c:	30 e0       	ldi	r19, 0x00	; 0
 d9e:	8b 81       	ldd	r24, Y+3	; 0x03
 da0:	88 2f       	mov	r24, r24
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	a9 01       	movw	r20, r18
 da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_SetPullupRes+0x176>
 da8:	55 95       	asr	r21
 daa:	47 95       	ror	r20
 dac:	8a 95       	dec	r24
 dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_SetPullupRes+0x172>
 db0:	ca 01       	movw	r24, r20
 db2:	81 70       	andi	r24, 0x01	; 1
 db4:	90 70       	andi	r25, 0x00	; 0
 db6:	00 97       	sbiw	r24, 0x00	; 0
 db8:	a1 f4       	brne	.+40     	; 0xde2 <DIO_SetPullupRes+0x1ac>
            {
                SET_BIT(PORTD, PinNumber);
 dba:	a2 e3       	ldi	r26, 0x32	; 50
 dbc:	b0 e0       	ldi	r27, 0x00	; 0
 dbe:	e2 e3       	ldi	r30, 0x32	; 50
 dc0:	f0 e0       	ldi	r31, 0x00	; 0
 dc2:	80 81       	ld	r24, Z
 dc4:	48 2f       	mov	r20, r24
 dc6:	8b 81       	ldd	r24, Y+3	; 0x03
 dc8:	28 2f       	mov	r18, r24
 dca:	30 e0       	ldi	r19, 0x00	; 0
 dcc:	81 e0       	ldi	r24, 0x01	; 1
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	02 2e       	mov	r0, r18
 dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_SetPullupRes+0x1a2>
 dd4:	88 0f       	add	r24, r24
 dd6:	99 1f       	adc	r25, r25
 dd8:	0a 94       	dec	r0
 dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_SetPullupRes+0x19e>
 ddc:	84 2b       	or	r24, r20
 dde:	8c 93       	st	X, r24
 de0:	08 c0       	rjmp	.+16     	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 de2:	81 e0       	ldi	r24, 0x01	; 1
 de4:	89 83       	std	Y+1, r24	; 0x01
 de6:	05 c0       	rjmp	.+10     	; 0xdf2 <DIO_SetPullupRes+0x1bc>
            }
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	89 83       	std	Y+1, r24	; 0x01
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_SetPullupRes+0x1bc>
    }	  //END OF IF

    else
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 dee:	81 e0       	ldi	r24, 0x01	; 1
 df0:	89 83       	std	Y+1, r24	; 0x01
    } //END of ELSE
    return u8_ERROR_STAT ;
 df2:	89 81       	ldd	r24, Y+1	; 0x01
}
 df4:	0f 90       	pop	r0
 df6:	0f 90       	pop	r0
 df8:	0f 90       	pop	r0
 dfa:	0f 90       	pop	r0
 dfc:	0f 90       	pop	r0
 dfe:	cf 91       	pop	r28
 e00:	df 91       	pop	r29
 e02:	08 95       	ret

00000e04 <App_Init>:
/*GLOBAL VARIABLE
----------------------------*/
uint8_t data=0;

void TWI_ISR(void);
void App_Init(void){
 e04:	df 93       	push	r29
 e06:	cf 93       	push	r28
 e08:	cd b7       	in	r28, 0x3d	; 61
 e0a:	de b7       	in	r29, 0x3e	; 62

	TWI_Init();
 e0c:	0e 94 49 00 	call	0x92	; 0x92 <TWI_Init>
	TWI_EnableInterrupt();
 e10:	0e 94 5f 01 	call	0x2be	; 0x2be <TWI_EnableInterrupt>
	TWI_SetCallback(&TWI_ISR);
 e14:	8e e1       	ldi	r24, 0x1E	; 30
 e16:	97 e0       	ldi	r25, 0x07	; 7
 e18:	0e 94 8e 01 	call	0x31c	; 0x31c <TWI_SetCallback>
	DIO_setPortDirection(PORTa,DIO_u8_OUTPUT);
 e1c:	80 e0       	ldi	r24, 0x00	; 0
 e1e:	6f ef       	ldi	r22, 0xFF	; 255
 e20:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DIO_setPortDirection>
	GI_EnableGI();
 e24:	0e 94 cd 01 	call	0x39a	; 0x39a <GI_EnableGI>
}
 e28:	cf 91       	pop	r28
 e2a:	df 91       	pop	r29
 e2c:	08 95       	ret

00000e2e <App_Update>:
void App_Update(void){
 e2e:	df 93       	push	r29
 e30:	cf 93       	push	r28
 e32:	cd b7       	in	r28, 0x3d	; 61
 e34:	de b7       	in	r29, 0x3e	; 62

}
 e36:	cf 91       	pop	r28
 e38:	df 91       	pop	r29
 e3a:	08 95       	ret

00000e3c <TWI_ISR>:
void TWI_ISR(void)
{
 e3c:	df 93       	push	r29
 e3e:	cf 93       	push	r28
 e40:	cd b7       	in	r28, 0x3d	; 61
 e42:	de b7       	in	r29, 0x3e	; 62
	TWI_RecDataAck(&data);
 e44:	82 e6       	ldi	r24, 0x62	; 98
 e46:	90 e0       	ldi	r25, 0x00	; 0
 e48:	0e 94 14 01 	call	0x228	; 0x228 <TWI_RecDataAck>
	DIO_writePortValue(PORTa,data);
 e4c:	90 91 62 00 	lds	r25, 0x0062
 e50:	80 e0       	ldi	r24, 0x00	; 0
 e52:	69 2f       	mov	r22, r25
 e54:	0e 94 43 03 	call	0x686	; 0x686 <DIO_writePortValue>

}
 e58:	cf 91       	pop	r28
 e5a:	df 91       	pop	r29
 e5c:	08 95       	ret

00000e5e <main>:
 */

#include"APP.h"

int main()
{
 e5e:	df 93       	push	r29
 e60:	cf 93       	push	r28
 e62:	cd b7       	in	r28, 0x3d	; 61
 e64:	de b7       	in	r29, 0x3e	; 62
	App_Init();
 e66:	0e 94 02 07 	call	0xe04	; 0xe04 <App_Init>
	App_Update();
 e6a:	0e 94 17 07 	call	0xe2e	; 0xe2e <App_Update>
 e6e:	ff cf       	rjmp	.-2      	; 0xe6e <main+0x10>

00000e70 <_exit>:
 e70:	f8 94       	cli

00000e72 <__stop_program>:
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stop_program>
